from sklearn.utils import Bunch

_ROUND_TIME = 6
_ROUND_METRIC = 10


class PartialResultInfo(Bunch):
    """ PartialResultInfo """

    def __init__(self,
                 pec_id=None,
                 timestamp=None,
                 iteration=None,
                 is_last=False,
                 is_last_et=False,
                 n_clusters=None,
                 n_runs=None,

                 best_run=None,
                 completed_runs=None,
                 runs_iterations=None,
                 completed_runs_status=None,

                 clustering_time=0,
                 decision_time=0,
                 labels_cleaning_time=0
                 ):
        super().__init__(
            pec_id=pec_id,
            timestamp=round(timestamp, _ROUND_TIME),
            iteration=iteration,
            is_last=is_last,
            is_last_et=is_last_et,
            n_clusters=n_clusters,
            n_runs=n_runs,

            best_run=best_run,
            completed_runs=completed_runs,
            runs_iterations="-".join(list(map(lambda i: str(i).zfill(3), runs_iterations))),
            completed_runs_status="-".join(list(map(lambda s: "t" if s else "f", completed_runs_status))),

            clustering_time=round(clustering_time, _ROUND_TIME),
            decision_time=round(decision_time, _ROUND_TIME),
            labels_cleaning_time=round(labels_cleaning_time, _ROUND_TIME)
        )


class PartialResultMetrics(Bunch):
    """ PartialResultMetrics """

    def __init__(self, **kwargs):
        super().__init__(**kwargs)


class PartialResult(Bunch):
    """
    PartialResult

    ----------
    parameters:

    info : PartialResultInfo object with meta-information about the partial result

    labels : numpy array with clustering labels (labels after decision)

    partitions: array of labels generated by each run of clustering algorithm
    """
    def __init__(self, info, metrics, labels, partitions):
        if not isinstance(info, PartialResultInfo):
            raise RuntimeError('info must be instance of PartialResultInfo')
        if not isinstance(metrics, PartialResultMetrics):
            raise RuntimeError('info must be instance of PartialResultMetrics')
        super().__init__(info=info, metrics=metrics, labels=labels, partitions=partitions)

    def getElapsedTimes(self):
        """Returns the elapsed times: clustering, decision, cleaning and total."""
        return Bunch(
            clustering=self.info.clustering_time,
            decision=self.info.decision_time,
            cleaning=self.info.labels_cleaning_time,
            total=round(self.info.clustering_time+self.info.decision_time+self.info.labels_cleaning_time, _ROUND_TIME)
        )

#################################################################################################################
#################################################################################################################
#################################################################################################################
