# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class AutonacModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'update_time': 'datetime',
        'creation_time': 'datetime',
        'id': 'str',
        'deleted': 'bool',
        'model_id': 'str',
        'baseline_model_id': 'str',
        'workspace_id': 'str',
        'name': 'str',
        'owner': 'str',
        'model_size': 'float',
        'quantization_level': 'QuantizationLevel',
        'dl_task': 'DeepLearningTask',
        'dl_task_label': 'DeepLearningTaskLabel',
        'input_dimensions': 'list[object]',
        'primary_hardware': 'HardwareReturnSchema',
        'accuracy_metrics': 'list[AccuracyMetric]',
        'source': 'ModelSource',
        'hyper_parameters': 'list[HyperParameter]',
        'raw_format': 'bool',
        'description': 'str',
        'kpis': 'list[KPI]',
        'architecture': 'str',
        'optimization_state': 'ModelOptimizationState',
        'colab_link': 'str'
    }

    attribute_map = {
        'update_time': 'updateTime',
        'creation_time': 'creationTime',
        'id': 'id',
        'deleted': 'deleted',
        'model_id': 'modelId',
        'baseline_model_id': 'baselineModelId',
        'workspace_id': 'workspaceId',
        'name': 'name',
        'owner': 'owner',
        'model_size': 'modelSize',
        'quantization_level': 'quantizationLevel',
        'dl_task': 'dlTask',
        'dl_task_label': 'dlTaskLabel',
        'input_dimensions': 'inputDimensions',
        'primary_hardware': 'primaryHardware',
        'accuracy_metrics': 'accuracyMetrics',
        'source': 'source',
        'hyper_parameters': 'hyperParameters',
        'raw_format': 'rawFormat',
        'description': 'description',
        'kpis': 'kpis',
        'architecture': 'architecture',
        'optimization_state': 'optimizationState',
        'colab_link': 'colabLink'
    }

    def __init__(self, update_time=None, creation_time=None, id=None, deleted=False, model_id=None, baseline_model_id=None, workspace_id=None, name=None, owner=None, model_size=None, quantization_level=None, dl_task=None, dl_task_label=None, input_dimensions=None, primary_hardware=None, accuracy_metrics=None, source=None, hyper_parameters=None, raw_format=False, description=None, kpis=None, architecture=None, optimization_state=None, colab_link=None, local_vars_configuration=None):  # noqa: E501
        """AutonacModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._update_time = None
        self._creation_time = None
        self._id = None
        self._deleted = None
        self._model_id = None
        self._baseline_model_id = None
        self._workspace_id = None
        self._name = None
        self._owner = None
        self._model_size = None
        self._quantization_level = None
        self._dl_task = None
        self._dl_task_label = None
        self._input_dimensions = None
        self._primary_hardware = None
        self._accuracy_metrics = None
        self._source = None
        self._hyper_parameters = None
        self._raw_format = None
        self._description = None
        self._kpis = None
        self._architecture = None
        self._optimization_state = None
        self._colab_link = None
        self.discriminator = None

        if update_time is not None:
            self.update_time = update_time
        if creation_time is not None:
            self.creation_time = creation_time
        if id is not None:
            self.id = id
        if deleted is not None:
            self.deleted = deleted
        self.model_id = model_id
        self.baseline_model_id = baseline_model_id
        self.workspace_id = workspace_id
        self.name = name
        self.owner = owner
        self.model_size = model_size
        self.quantization_level = quantization_level
        self.dl_task = dl_task
        self.dl_task_label = dl_task_label
        self.input_dimensions = input_dimensions
        self.primary_hardware = primary_hardware
        self.accuracy_metrics = accuracy_metrics
        self.source = source
        self.hyper_parameters = hyper_parameters
        if raw_format is not None:
            self.raw_format = raw_format
        self.description = description
        self.kpis = kpis
        self.architecture = architecture
        self.optimization_state = optimization_state
        if colab_link is not None:
            self.colab_link = colab_link

    @property
    def update_time(self):
        """Gets the update_time of this AutonacModel.  # noqa: E501


        :return: The update_time of this AutonacModel.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this AutonacModel.


        :param update_time: The update_time of this AutonacModel.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def creation_time(self):
        """Gets the creation_time of this AutonacModel.  # noqa: E501


        :return: The creation_time of this AutonacModel.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this AutonacModel.


        :param creation_time: The creation_time of this AutonacModel.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this AutonacModel.  # noqa: E501


        :return: The id of this AutonacModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutonacModel.


        :param id: The id of this AutonacModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def deleted(self):
        """Gets the deleted of this AutonacModel.  # noqa: E501


        :return: The deleted of this AutonacModel.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this AutonacModel.


        :param deleted: The deleted of this AutonacModel.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def model_id(self):
        """Gets the model_id of this AutonacModel.  # noqa: E501


        :return: The model_id of this AutonacModel.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this AutonacModel.


        :param model_id: The model_id of this AutonacModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and model_id is None:  # noqa: E501
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def baseline_model_id(self):
        """Gets the baseline_model_id of this AutonacModel.  # noqa: E501


        :return: The baseline_model_id of this AutonacModel.  # noqa: E501
        :rtype: str
        """
        return self._baseline_model_id

    @baseline_model_id.setter
    def baseline_model_id(self, baseline_model_id):
        """Sets the baseline_model_id of this AutonacModel.


        :param baseline_model_id: The baseline_model_id of this AutonacModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and baseline_model_id is None:  # noqa: E501
            raise ValueError("Invalid value for `baseline_model_id`, must not be `None`")  # noqa: E501

        self._baseline_model_id = baseline_model_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this AutonacModel.  # noqa: E501


        :return: The workspace_id of this AutonacModel.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this AutonacModel.


        :param workspace_id: The workspace_id of this AutonacModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and workspace_id is None:  # noqa: E501
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    @property
    def name(self):
        """Gets the name of this AutonacModel.  # noqa: E501


        :return: The name of this AutonacModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutonacModel.


        :param name: The name of this AutonacModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this AutonacModel.  # noqa: E501


        :return: The owner of this AutonacModel.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AutonacModel.


        :param owner: The owner of this AutonacModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and owner is None:  # noqa: E501
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def model_size(self):
        """Gets the model_size of this AutonacModel.  # noqa: E501


        :return: The model_size of this AutonacModel.  # noqa: E501
        :rtype: float
        """
        return self._model_size

    @model_size.setter
    def model_size(self, model_size):
        """Sets the model_size of this AutonacModel.


        :param model_size: The model_size of this AutonacModel.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and model_size is None:  # noqa: E501
            raise ValueError("Invalid value for `model_size`, must not be `None`")  # noqa: E501

        self._model_size = model_size

    @property
    def quantization_level(self):
        """Gets the quantization_level of this AutonacModel.  # noqa: E501


        :return: The quantization_level of this AutonacModel.  # noqa: E501
        :rtype: QuantizationLevel
        """
        return self._quantization_level

    @quantization_level.setter
    def quantization_level(self, quantization_level):
        """Sets the quantization_level of this AutonacModel.


        :param quantization_level: The quantization_level of this AutonacModel.  # noqa: E501
        :type: QuantizationLevel
        """
        if self.local_vars_configuration.client_side_validation and quantization_level is None:  # noqa: E501
            raise ValueError("Invalid value for `quantization_level`, must not be `None`")  # noqa: E501

        self._quantization_level = quantization_level

    @property
    def dl_task(self):
        """Gets the dl_task of this AutonacModel.  # noqa: E501


        :return: The dl_task of this AutonacModel.  # noqa: E501
        :rtype: DeepLearningTask
        """
        return self._dl_task

    @dl_task.setter
    def dl_task(self, dl_task):
        """Sets the dl_task of this AutonacModel.


        :param dl_task: The dl_task of this AutonacModel.  # noqa: E501
        :type: DeepLearningTask
        """
        if self.local_vars_configuration.client_side_validation and dl_task is None:  # noqa: E501
            raise ValueError("Invalid value for `dl_task`, must not be `None`")  # noqa: E501

        self._dl_task = dl_task

    @property
    def dl_task_label(self):
        """Gets the dl_task_label of this AutonacModel.  # noqa: E501


        :return: The dl_task_label of this AutonacModel.  # noqa: E501
        :rtype: DeepLearningTaskLabel
        """
        return self._dl_task_label

    @dl_task_label.setter
    def dl_task_label(self, dl_task_label):
        """Sets the dl_task_label of this AutonacModel.


        :param dl_task_label: The dl_task_label of this AutonacModel.  # noqa: E501
        :type: DeepLearningTaskLabel
        """
        if self.local_vars_configuration.client_side_validation and dl_task_label is None:  # noqa: E501
            raise ValueError("Invalid value for `dl_task_label`, must not be `None`")  # noqa: E501

        self._dl_task_label = dl_task_label

    @property
    def input_dimensions(self):
        """Gets the input_dimensions of this AutonacModel.  # noqa: E501


        :return: The input_dimensions of this AutonacModel.  # noqa: E501
        :rtype: list[object]
        """
        return self._input_dimensions

    @input_dimensions.setter
    def input_dimensions(self, input_dimensions):
        """Sets the input_dimensions of this AutonacModel.


        :param input_dimensions: The input_dimensions of this AutonacModel.  # noqa: E501
        :type: list[object]
        """
        if self.local_vars_configuration.client_side_validation and input_dimensions is None:  # noqa: E501
            raise ValueError("Invalid value for `input_dimensions`, must not be `None`")  # noqa: E501

        self._input_dimensions = input_dimensions

    @property
    def primary_hardware(self):
        """Gets the primary_hardware of this AutonacModel.  # noqa: E501


        :return: The primary_hardware of this AutonacModel.  # noqa: E501
        :rtype: HardwareReturnSchema
        """
        return self._primary_hardware

    @primary_hardware.setter
    def primary_hardware(self, primary_hardware):
        """Sets the primary_hardware of this AutonacModel.


        :param primary_hardware: The primary_hardware of this AutonacModel.  # noqa: E501
        :type: HardwareReturnSchema
        """
        if self.local_vars_configuration.client_side_validation and primary_hardware is None:  # noqa: E501
            raise ValueError("Invalid value for `primary_hardware`, must not be `None`")  # noqa: E501

        self._primary_hardware = primary_hardware

    @property
    def accuracy_metrics(self):
        """Gets the accuracy_metrics of this AutonacModel.  # noqa: E501


        :return: The accuracy_metrics of this AutonacModel.  # noqa: E501
        :rtype: list[AccuracyMetric]
        """
        return self._accuracy_metrics

    @accuracy_metrics.setter
    def accuracy_metrics(self, accuracy_metrics):
        """Sets the accuracy_metrics of this AutonacModel.


        :param accuracy_metrics: The accuracy_metrics of this AutonacModel.  # noqa: E501
        :type: list[AccuracyMetric]
        """
        if self.local_vars_configuration.client_side_validation and accuracy_metrics is None:  # noqa: E501
            raise ValueError("Invalid value for `accuracy_metrics`, must not be `None`")  # noqa: E501

        self._accuracy_metrics = accuracy_metrics

    @property
    def source(self):
        """Gets the source of this AutonacModel.  # noqa: E501


        :return: The source of this AutonacModel.  # noqa: E501
        :rtype: ModelSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AutonacModel.


        :param source: The source of this AutonacModel.  # noqa: E501
        :type: ModelSource
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def hyper_parameters(self):
        """Gets the hyper_parameters of this AutonacModel.  # noqa: E501


        :return: The hyper_parameters of this AutonacModel.  # noqa: E501
        :rtype: list[HyperParameter]
        """
        return self._hyper_parameters

    @hyper_parameters.setter
    def hyper_parameters(self, hyper_parameters):
        """Sets the hyper_parameters of this AutonacModel.


        :param hyper_parameters: The hyper_parameters of this AutonacModel.  # noqa: E501
        :type: list[HyperParameter]
        """
        if self.local_vars_configuration.client_side_validation and hyper_parameters is None:  # noqa: E501
            raise ValueError("Invalid value for `hyper_parameters`, must not be `None`")  # noqa: E501

        self._hyper_parameters = hyper_parameters

    @property
    def raw_format(self):
        """Gets the raw_format of this AutonacModel.  # noqa: E501


        :return: The raw_format of this AutonacModel.  # noqa: E501
        :rtype: bool
        """
        return self._raw_format

    @raw_format.setter
    def raw_format(self, raw_format):
        """Sets the raw_format of this AutonacModel.


        :param raw_format: The raw_format of this AutonacModel.  # noqa: E501
        :type: bool
        """

        self._raw_format = raw_format

    @property
    def description(self):
        """Gets the description of this AutonacModel.  # noqa: E501


        :return: The description of this AutonacModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AutonacModel.


        :param description: The description of this AutonacModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def kpis(self):
        """Gets the kpis of this AutonacModel.  # noqa: E501


        :return: The kpis of this AutonacModel.  # noqa: E501
        :rtype: list[KPI]
        """
        return self._kpis

    @kpis.setter
    def kpis(self, kpis):
        """Sets the kpis of this AutonacModel.


        :param kpis: The kpis of this AutonacModel.  # noqa: E501
        :type: list[KPI]
        """
        if self.local_vars_configuration.client_side_validation and kpis is None:  # noqa: E501
            raise ValueError("Invalid value for `kpis`, must not be `None`")  # noqa: E501

        self._kpis = kpis

    @property
    def architecture(self):
        """Gets the architecture of this AutonacModel.  # noqa: E501


        :return: The architecture of this AutonacModel.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this AutonacModel.


        :param architecture: The architecture of this AutonacModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and architecture is None:  # noqa: E501
            raise ValueError("Invalid value for `architecture`, must not be `None`")  # noqa: E501

        self._architecture = architecture

    @property
    def optimization_state(self):
        """Gets the optimization_state of this AutonacModel.  # noqa: E501


        :return: The optimization_state of this AutonacModel.  # noqa: E501
        :rtype: ModelOptimizationState
        """
        return self._optimization_state

    @optimization_state.setter
    def optimization_state(self, optimization_state):
        """Sets the optimization_state of this AutonacModel.


        :param optimization_state: The optimization_state of this AutonacModel.  # noqa: E501
        :type: ModelOptimizationState
        """
        if self.local_vars_configuration.client_side_validation and optimization_state is None:  # noqa: E501
            raise ValueError("Invalid value for `optimization_state`, must not be `None`")  # noqa: E501

        self._optimization_state = optimization_state

    @property
    def colab_link(self):
        """Gets the colab_link of this AutonacModel.  # noqa: E501


        :return: The colab_link of this AutonacModel.  # noqa: E501
        :rtype: str
        """
        return self._colab_link

    @colab_link.setter
    def colab_link(self, colab_link):
        """Sets the colab_link of this AutonacModel.


        :param colab_link: The colab_link of this AutonacModel.  # noqa: E501
        :type: str
        """

        self._colab_link = colab_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutonacModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutonacModel):
            return True

        return self.to_dict() != other.to_dict()
