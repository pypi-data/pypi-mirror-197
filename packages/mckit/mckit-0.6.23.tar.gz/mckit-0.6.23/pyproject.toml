[tool.poetry]
name = "mckit"
version = "0.6.23"
description = "Tools to process MCNP models and results"
authors = ["rrn <r.rodionov@iterrf.ru>"]
maintainers = ["dpv2015 <dmitri_portnov@yahoo.com>"]
homepage = "https://github.com/MC-kit/mckit"
repository = "https://github.com/MC-kit/mckit"
documentation = "https://mckit.readthedocs.io"
license = "GPL3"
keywords = ["mckit", "MCNP"]
readme = "README.rst"
packages = [
    { include = "mckit", from = "src" },
    { include = "building", format="sdist", from = "."},
    { include = "tests", format="sdist", from = "."},
    { include = "benchmarks", format="sdist", from = "."},
]
include = [
    "src/mckit/data/isotopes.dat",
    { path = "build.py", format="sdist"}
]
exclude = [
    ".py[co]$",
    "setup.py"
]
# Select from PyPI classifiers: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: C",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
]

[build-system]
requires = [
    "poetry-core >= 1.5.1",
    "setuptools >= 67.4.0",
    "cmake >= 3.25.0",
    "mkl-devel == 2022.2.1",
    "tbb == 2021.7.1",
    "numpy>=1.24.2",
    "wheel>=0.37.1",
]
build-backend = "poetry.core.masonry.api"

[tool.poetry.build]
script = "build.py"
generate-setup-file = true

[tool.poetry.scripts]
mckit = "mckit.cli.runner:mckit"

[tool.poetry.urls]
"Repository" = "https://github.com/MC-kit/mckit"
"Bug Tracker" = "https://github.com/MC-kit/mckit/issues"
# "Documentation" TODO



[tool.poetry.dependencies]
python = ">=3.8,<3.12"  # TODO dvp: update upper limit with scipy
DateTime = ">=4.3"
atomicwrites = ">=1.4.0"
attrs = ">=21.2.0"
click = ">=8.0.1"
colorama = ">=0.4.4"
importlib-resources = {version = ">=5.12.0", python = "3.8"}
loguru = ">=0.6.0"
numpy = ">=1.24.2"
ply = ">=3.11"
python-dotenv = ">=0.20.0"
scipy = ">=1.10.1"
sly = ">=0.4"
tomli = {version = ">=2.0.1", python="<3.11"}
tomli-w = ">=1.0.0"
tqdm = ">=4.55.1"
# mkl again has different versions for different platforms
mkl-devel = "2022.2.1"
tbb = "2021.7.1"
# The following works for linux and windows, but not for macos
# besides we need to have the same versions on build (see [build-system]),
# so, we use the most recent version compatbile to all the OS.
#mkl-devel = [
#    {version = "2023.0.0", markers = "sys_platform == 'linux'"},
#    {version = "2023.0.0", markers = "sys_platform == 'darvin'"},
#    {version = "2022.2.1", markers = "sys_platform == 'win32'"}
#]
#intel-openmp = [
#    {version = "2023.0.0", markers = "sys_platform == 'linux'"},
#    {version = "2023.0.0", markers = "sys_platform == 'darvin'"},
#    {version = "2022.2.1", markers = "sys_platform == 'win32'"}
#]
#tbb = [
#    {version = "2021.8.0", markers = "sys_platform == 'linux'"},
#    {version = "2021.8.0", markers = "sys_platform == 'darvin'"},
#    {version = "2021.7.1", markers = "sys_platform == 'win32'"}
#]
# Check MKL wheels availablility:
#   https://pypi.org/simple/mkl-devel/
#   https://pypi.org/simple/intel-openmp/
#   https://pypi.org/simple/tbb/
# Also interesting: https://pypistats.org/packages/mkl - no visible MacOS downloads
# As for 2022.01.12 for MacOS only version 10.15 is supported
# TODO dvp: automate the check above
#
# TODO dvp: check
#      https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/onemkl/link-line-advisor.html
#

[tool.poetry.group.dev.dependencies]
Pygments = ">=2.10.0"
nox = ">=2022.1.7"

#[tool.poetry.group.profile]
#optional = true

#[tool.poetry.group.profile.dependencies]
# TODO dvp: apply yappi: https://coderzcolumn.com/tutorials/python/yappi-yet-another-python-profiler
#yappi = ">=1.3.2"

[tool.poetry.group.safety.dependencies]
safety = ">=2.3.5"

[tool.poetry.group.pre_commit.dependencies]
pre-commit = ">=2.15.0"
rstcheck = ">=3.3.1"
pydocstringformatter = "^0.7.3"

[tool.poetry.group.black.dependencies]
black = ">=22.8.0"  #TODO dvp: update with safety and packaging

[tool.poetry.group.isort.dependencies]
isort = ">=5.9.3"
pycln = {version = "^2.1.1", extras = ["click"]}

[tool.poetry.group.test.dependencies]
pytest = ">=7.0.1"
pytest-benchmark = ">=4.0.0"
pytest-cache = ">=1.0"
pytest-cov = ">=3.0.0"
pytest-mock = ">=3.6.1"
coverage = { version = ">=6.1.2", extras = ["toml"] }

[tool.poetry.group.coverage.dependencies]
coverage = { version = ">=6.1.2", extras = ["toml"] }

[tool.poetry.group.xdoctest.dependencies]
xdoctest = {extras = ["colors"], version = ">=0.15.10"}

[tool.poetry.group.typeguard.dependencies]
typeguard = ">=2.13.0"

[tool.poetry.group.mypy.dependencies]
mypy = ">=0.931"
pep8-naming = ">=0.12.1"
types-setuptools = ">=57.4.2"
numpy = ">=1.23.2"

[tool.poetry.group.flake8.dependencies]
darglint = ">=1.8.1"
flake8 = ">=4.0.1"  #TODO dvp: update with flake8-eradicate
#flake8 = ">=6.0.0"
flake8-adjustable-complexity = ">=0.0.6"
flake8-annotations = ">=2.6.2"
flake8-annotations-coverage = ">=0.0.6"
flake8-bandit = ">=4.1.1"
flake8-bugbear = ">=22.3.23"
flake8-builtins = ">=1.5.3"
flake8-class-attributes-order = ">=0.1.3"
flake8-cognitive-complexity = ">=0.1.0"
flake8-colors = ">=0.1.9"
flake8-commas = ">=2.1.0"
flake8-comprehensions = ">=3.10.0"
flake8-docstrings = ">=1.6.0"
flake8-eradicate = ">=1.4.0"
flake8-expression-complexity = ">=0.0.11"
flake8-functions = ">=0.0.7"
flake8-import-order = ">=0.18.1"
flake8-pie = ">=0.16.0"
flake8-print = ">=5.0.0"
flake8-rst-docstrings = ">=0.2.7"
flake8-scream = ">=0.1.0"
flake8-simplify = ">=0.19.3"
flake8-use-fstring = ">=1.4"
flake8-use-pathlib = ">=0.3.0"
pylint = ">=2.15.10"
flake8-pylint = ">=0.1.3"
# TODO dvp: check/use flake8-pyprojecttoml plugin
# https://gitlab.com/durko/flake8-pyprojecttoml/-/blob/master/pyproject.toml

[tool.poetry.group.docs.dependencies]
sphinx = ">=6.1.3"
sphinx-autodoc-typehints = ">=1.19.5"
sphinx-click = ">=4.4.0"

[tool.poetry.group.docs_auto.dependencies]
sphinx-autobuild = ">=2021.3.14"


[tool.isort]
atomic = true
ensure_newline_before_comments = true
known_first_party = "mckit"
known_third_party = "mpl_toolkits,matplotlib,numpy,scipy"
known_typing = "typing,types,typing_extensions,mypy,mypy_extensions"
sections = "FUTURE,TYPING,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"
default_section = "FIRSTPARTY"
use_parentheses = true
multi_line_output = 3
line_length = 100
include_trailing_comma = true
lines_between_types = 1
skip_gitignore = true
skip_glob = ["setup*.py", "*-example.py"]


# NOTE: you have to use single-quoted strings in TOML for regular expressions.
# It's the equivalent of r-strings in Python.  Multiline strings are treated as
# verbose regular expressions by Black.  Use [ ] to denote a significant space
# character.

[tool.black]
line-length = 100
include = '''
(
    \.pyi?$
)
'''
exclude = '''
(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.nox
  | \.venv
  | \.idea
  | _build
  | build
  | build_configs
  | dist
  | 3rd-party
  | data
  | htmlcov
  | \.egg-info
  | _tab\.py$
  | notebooks
  | tutorial
  | wrk
)
'''

[tool.pytest.ini_options]
minversion = "6.0"
norecursedirs = ".* build dist *.egg-info data htmlcov notebooks tools wrk"
python_functions = "test_*  profile_*"
addopts = "-ra -q --tb=short --doctest-modules --strict-markers --ignore setup.py --failed-first"
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ALLOW_UNICODE ALLOW_BYTES"
testpaths = ["tests"]
markers = [
    "slow: too slow tests"
]
# xfail tests that pass should fail the test suite
xfail_strict = true
filterwarnings = [
    "error",
    'ignore:Implementing implicit namespace packages \(as specified in PEP 420\) is preferred to `pkg_resources.declare_namespace`',
    "ignore:.*not typechecking multipledispatch.dispatcher.*UserWarning",
    'ignore:.*io.FileIO \[closed\]',
    'ignore:.*Deprecated call to `pkg_resources.declare_namespace'
]
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"

[tool.xdoctest]
quiet = true
options = ""

# [tool.coverage]
[tool.coverage.paths]
source = ["src", ".nox/*/site-packages"]

[tool.coverage.run]
branch = true
source = ["src"]
omit = ["*_tab.py", "**/__init__.py"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 85  # TODO dvp: increase limit to 100 with code maturing
omit = ["*_tab.py", "**/__init__.py"]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
]
ignore_errors = true
sort = "Cover"


# MyPy config
# See https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
#     https://dev.to/tusharsadhwani/the-comprehensive-guide-to-mypy-561m
[tool.mypy]
python="3.11"
# strict = true     # TODO dvp: uncomment this to get strict control
follow_imports = "silent"
# namespace_packages = true
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
disable_error_code = ["annotation-unchecked"]
show_error_context = true
error_summary = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
files = "src/**/*.py"
plugins = ["numpy.typing.mypy_plugin"]

[[tool.mypy.overrides]]
module = [
    "click",
    "click.testing",
    "importlib_resources",
    "loguru",
    "importlib_metadata",
    "multipledispatch",
    "nox",
    "numpy.testing",
    "pandas",
    "pytest",
    "scipy.constants",
    "tomllib",
    "tomli"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tomllib",
    "tomli"
]
allow_redefinition = true
disable_error_code = "no-redef"

[tool.check-manifest]
ignore = [
    "tests/*",
    "tools/*",
    "*.yaml",
    "noxfile.py",
]

[tool.ipdb]
# For debugging in jupyterlab and ipython
# see https://github.com/gotcha/ipdb
context=5

[tool.tryceratops]
include = ["src"]
experimental = true

[tool.pycln]
path = "src"
exclude = '''
(
    \.egg-info
  | \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.nox
  | \.venv
  | \.idea
  | _build
  | 3rd-party
  | build
  | build_configs
  | data
  | dist
  | notebooks
  | htmlcov
  | wrk
  | [Pp]arser
  | tab\.py
)
'''
#silence = true


[tool.pydocstringformatter]
write = true
style = "pep257"
exclude = ["tools/**","src/**/*_parser.py","src/**/*_tab.py"]
strip-whitespaces = true
max-line-length = 100
summary-quotes-same-line = true


[tool.pylint]
good-names-rgxs=["."]  # a single character variable is okay
logging-format-style="new"   # use {} in logging messages
deprecated-modules=["six"]
