"use strict";(self.webpackChunk_JUPYTERLAB_CORE_OUTPUT=self.webpackChunk_JUPYTERLAB_CORE_OUTPUT||[]).push([[6256],{86256:(e,n,o)=>{o.r(n),o.d(n,{default:()=>S});var t=o(67536),r=o(19898),l=o(58461),s=o(98471),a=o(74225),c=o(88818),i=o(17879),d=o(70112),u=o(24571),p=o(7781),m=o(32025),C=o(44789),g=o(86129),v=o(6644),h=o(68594),f=o(75944);const b={id:"@jupyterlab/console-extension:foreign",requires:[a.IConsoleTracker,p.ISettingRegistry,m.ITranslator],optional:[r.ICommandPalette],activate:function(e,n,o,t,r){const l=t.load("jupyterlab"),{shell:s}=e;n.widgetAdded.connect(((e,n)=>{const t=n.console,r=new a.ForeignHandler({sessionContext:t.sessionContext,parent:t});k.foreignHandlerProperty.set(t,r),o.get("@jupyterlab/console-extension:tracker","showAllKernelActivity").then((({composite:e})=>{const n=e;r.enabled=n})),t.disposed.connect((()=>{r.dispose()}))}));const{commands:c}=e,i=l.__("Console"),d="console:toggle-show-all-kernel-activity";c.addCommand(d,{label:e=>l.__("Show All Kernel Activity"),execute:e=>{const o=function(e){const o=n.currentWidget;return!1!==e.activate&&o&&s.activateById(o.id),o}(e);if(!o)return;const t=k.foreignHandlerProperty.get(o.console);t&&(t.enabled=!t.enabled)},isToggled:()=>{var e;return null!==n.currentWidget&&!!(null===(e=k.foreignHandlerProperty.get(n.currentWidget.console))||void 0===e?void 0:e.enabled)},isEnabled:()=>null!==n.currentWidget&&n.currentWidget===s.currentWidget}),r&&r.addItem({command:d,category:i,args:{isPalette:!0}})},autoStart:!0},y=b;var k,x;!function(e){e.foreignHandlerProperty=new f.AttachedProperty({name:"foreignHandler",create:()=>{}})}(k||(k={})),function(e){e.autoClosingBrackets="console:toggle-autoclosing-brackets",e.create="console:create",e.clear="console:clear",e.runUnforced="console:run-unforced",e.runForced="console:run-forced",e.linebreak="console:linebreak",e.interrupt="console:interrupt-kernel",e.restart="console:restart-kernel",e.closeAndShutdown="console:close-and-shutdown",e.open="console:open",e.inject="console:inject",e.changeKernel="console:change-kernel",e.getKernel="console:get-kernel",e.enterToExecute="console:enter-to-execute",e.shiftEnterToExecute="console:shift-enter-to-execute",e.interactionMode="console:interaction-mode",e.replaceSelection="console:replace-selection",e.shutdown="console:shutdown",e.invokeCompleter="completer:invoke-console",e.selectCompleter="completer:select-console"}(x||(x={}));const _={id:"@jupyterlab/console-extension:tracker",provides:a.IConsoleTracker,requires:[a.ConsolePanel.IContentFactory,l.IEditorServices,u.IRenderMimeRegistry,p.ISettingRegistry,m.ITranslator],optional:[t.ILayoutRestorer,c.IDefaultFileBrowser,d.IMainMenu,r.ICommandPalette,i.ILauncher,t.ILabStatus,r.ISessionContextDialogs,C.IFormRendererRegistry],activate:async function(e,n,o,t,l,s,c,i,d,u,p,m,f,b){const y=s.load("jupyterlab"),k=e.serviceManager,{commands:_,shell:w}=e,I=y.__("Console");f=null!=f?f:r.sessionContextDialogs;const E=new r.WidgetTracker({namespace:"console"});async function S(e){var r,c;await k.ready;const i=new a.ConsolePanel({manager:k,contentFactory:n,mimeTypeService:o.mimeTypeService,rendermime:t,translator:s,setBusy:null!==(r=m&&(()=>m.setBusy()))&&void 0!==r?r:void 0,...e}),d=(await l.get("@jupyterlab/console-extension:tracker","interactionMode")).composite;return i.console.node.dataset.jpInteractionMode=d,await E.add(i),i.sessionContext.propertyChanged.connect((()=>{E.save(i)})),w.add(i,"main",{ref:e.ref,mode:e.insertMode,activate:!1!==e.activate,type:null!==(c=e.type)&&void 0!==c?c:"Console"}),i}c&&c.restore(E,{command:x.create,args:e=>{const{path:n,name:o,kernelPreference:t}=e.console.sessionContext;return{path:n,name:o,kernelPreference:{...t}}},name:e=>{var n;return null!==(n=e.console.sessionContext.path)&&void 0!==n?n:v.UUID.uuid4()},when:k.ready}),p&&k.ready.then((()=>{let e=null;const n=()=>{e&&(e.dispose(),e=null);const n=k.kernelspecs.specs;if(n){e=new h.DisposableSet;for(const o in n.kernelspecs){const t=o===n.default?0:1/0,r=n.kernelspecs[o],l=r.resources["logo-svg"]||r.resources["logo-64x64"];e.add(p.add({command:x.create,args:{isLauncher:!0,kernelPreference:{name:o}},category:y.__("Console"),rank:t,kernelIconUrl:l,metadata:{kernel:v.JSONExt.deepCopy(r.metadata||{})}}))}}};n(),k.kernelspecs.specsChanged.connect(n)}));const P="@jupyterlab/console-extension:tracker";let M,j={};async function T(e){M=(await l.get(P,"interactionMode")).composite,j=(await l.get(P,"promptCellConfig")).composite;const n=e=>{var n,o;e.console.node.dataset.jpInteractionMode=M,e.console.editorConfig=j,null===(o=null===(n=e.console.promptCell)||void 0===n?void 0:n.editor)||void 0===o||o.setOptions(j)};e?n(e):E.forEach(n)}if(l.pluginChanged.connect(((e,n)=>{n===P&&T()})),await T(),b){const e=b.getRenderer("@jupyterlab/codemirror-extension:plugin.defaultConfig");e&&b.addRenderer("@jupyterlab/console-extension:tracker.promptCellConfig",e)}function K(){return null!==E.currentWidget&&E.currentWidget===w.currentWidget}E.widgetAdded.connect(((e,n)=>{T(n)})),_.addCommand(x.autoClosingBrackets,{execute:async e=>{var n;j.autoClosingBrackets=!!(null!==(n=e.force)&&void 0!==n?n:!j.autoClosingBrackets),await l.set(P,"promptCellConfig",j)},label:y.__("Auto Close Brackets for Code Console Prompt"),isToggled:()=>j.autoClosingBrackets});let B=x.open;function R(e){const n=E.currentWidget;return!1!==e.activate&&n&&w.activateById(n.id),null!=n?n:null}_.addCommand(B,{label:y.__("Open a console for the provided `path`."),execute:e=>{const n=e.path,o=E.find((e=>{var o;return(null===(o=e.console.sessionContext.session)||void 0===o?void 0:o.path)===n}));return o?(!1!==e.activate&&w.activateById(o.id),o):k.ready.then((()=>(0,g.find)(k.sessions.running(),(e=>e.path===n))?S(e):Promise.reject(`No running kernel session for path: ${n}`)))}}),B=x.create,_.addCommand(B,{label:e=>{var n,o,t,r;if(e.isPalette)return y.__("New Console");if(e.isLauncher&&e.kernelPreference){const l=e.kernelPreference;return null!==(r=null===(t=null===(o=null===(n=k.kernelspecs)||void 0===n?void 0:n.specs)||void 0===o?void 0:o.kernelspecs[l.name||""])||void 0===t?void 0:t.display_name)&&void 0!==r?r:""}return y.__("Console")},icon:e=>e.isPalette?void 0:C.consoleIcon,execute:e=>{var n;return S({basePath:null!==(n=e.basePath||e.cwd||(null==i?void 0:i.model.path))&&void 0!==n?n:"",...e})}}),_.addCommand(x.clear,{label:y.__("Clear Console Cells"),execute:e=>{const n=R(e);n&&n.console.clear()},isEnabled:K}),_.addCommand(x.runUnforced,{label:y.__("Run Cell (unforced)"),execute:e=>{const n=R(e);if(n)return n.console.execute()},isEnabled:K}),_.addCommand(x.runForced,{label:y.__("Run Cell (forced)"),execute:e=>{const n=R(e);if(n)return n.console.execute(!0)},isEnabled:K}),_.addCommand(x.linebreak,{label:y.__("Insert Line Break"),execute:e=>{const n=R(e);n&&n.console.insertLinebreak()},isEnabled:K}),_.addCommand(x.replaceSelection,{label:y.__("Replace Selection in Console"),execute:e=>{const n=R(e);if(!n)return;const o=e.text||"";n.console.replaceSelection(o)},isEnabled:K}),_.addCommand(x.interrupt,{label:y.__("Interrupt Kernel"),execute:e=>{var n;const o=R(e);if(!o)return;const t=null===(n=o.console.sessionContext.session)||void 0===n?void 0:n.kernel;return t?t.interrupt():void 0},isEnabled:K}),_.addCommand(x.restart,{label:y.__("Restart Kernel…"),execute:e=>{const n=R(e);if(n)return f.restart(n.console.sessionContext,s)},isEnabled:K}),_.addCommand(x.shutdown,{label:y.__("Shut Down"),execute:e=>{const n=R(e);if(n)return n.console.sessionContext.shutdown()}}),_.addCommand(x.closeAndShutdown,{label:y.__("Close and Shut Down…"),execute:e=>{const n=R(e);if(n)return(0,r.showDialog)({title:y.__("Shut down the console?"),body:y.__('Are you sure you want to close "%1"?',n.title.label),buttons:[r.Dialog.cancelButton(),r.Dialog.warnButton()]}).then((e=>!!e.button.accept&&_.execute(x.shutdown,{activate:!1}).then((()=>(n.dispose(),!0)))))},isEnabled:K}),_.addCommand(x.inject,{label:y.__("Inject some code in a console."),execute:e=>{const n=e.path;E.find((o=>{var t;return(null===(t=o.console.sessionContext.session)||void 0===t?void 0:t.path)===n&&(!1!==e.activate&&w.activateById(o.id),o.console.inject(e.code,e.metadata),!0)}))},isEnabled:K}),_.addCommand(x.changeKernel,{label:y.__("Change Kernel…"),execute:e=>{const n=R(e);if(n)return f.selectKernel(n.console.sessionContext,s)},isEnabled:K}),_.addCommand(x.getKernel,{label:y.__("Get Kernel"),execute:e=>{var n;const o=R({activate:!1,...e});if(o)return null===(n=o.sessionContext.session)||void 0===n?void 0:n.kernel},isEnabled:K}),u&&[x.create,x.linebreak,x.clear,x.runUnforced,x.runForced,x.restart,x.interrupt,x.changeKernel,x.closeAndShutdown].forEach((e=>{u.addItem({command:e,category:I,args:{isPalette:!0}})})),d&&(d.fileMenu.closeAndCleaners.add({id:x.closeAndShutdown,isEnabled:K}),d.kernelMenu.kernelUsers.changeKernel.add({id:x.changeKernel,isEnabled:K}),d.kernelMenu.kernelUsers.clearWidget.add({id:x.clear,isEnabled:K}),d.kernelMenu.kernelUsers.interruptKernel.add({id:x.interrupt,isEnabled:K}),d.kernelMenu.kernelUsers.restartKernel.add({id:x.restart,isEnabled:K}),d.kernelMenu.kernelUsers.shutdownKernel.add({id:x.shutdown,isEnabled:K}),d.runMenu.codeRunners.run.add({id:x.runForced,isEnabled:K}),d.editMenu.clearers.clearCurrent.add({id:x.clear,isEnabled:K}),d.helpMenu.getKernel.add({id:x.getKernel,isEnabled:K}));const A={notebook:y.__("Execute with Shift+Enter"),terminal:y.__("Execute with Enter")};return _.addCommand(x.interactionMode,{label:e=>{var n;return null!==(n=A[e.interactionMode])&&void 0!==n?n:"Set the console interaction mode."},execute:async e=>{try{await l.set(P,"interactionMode",e.interactionMode)}catch(e){console.error(`Failed to set ${P}:keyMap - ${e.message}`)}},isToggled:e=>e.interactionMode===M}),E},autoStart:!0},w={id:"@jupyterlab/console-extension:factory",provides:a.ConsolePanel.IContentFactory,requires:[l.IEditorServices],autoStart:!0,activate:(e,n)=>{const o=n.factoryService.newInlineEditor;return new a.ConsolePanel.ContentFactory({editorFactory:o})}},I={id:"@jupyterlab/console-extension:kernel-status",autoStart:!0,requires:[a.IConsoleTracker,r.IKernelStatusModel],activate:(e,n,o)=>{o.addSessionProvider((e=>e&&n.has(e)?e.sessionContext:null))}},E={id:"@jupyterlab/console-extension:cursor-position",autoStart:!0,requires:[a.IConsoleTracker,l.IPositionModel],activate:(e,n,o)=>{let t=null;o.addEditorProvider((async e=>{let r=null;if(e!==t){if(null==t||t.console.promptCellCreated.disconnect(o.update),t=null,e&&n.has(e)){e.console.promptCellCreated.connect(o.update);const n=e.console.promptCell;r=null,n&&(await n.ready,r=n.editor),t=e}}else if(e){const n=e.console.promptCell;r=null,n&&(await n.ready,r=n.editor)}return r}))}},S=[w,_,y,I,E,{id:"@jupyterlab/console-extension:completer",autoStart:!0,requires:[a.IConsoleTracker],optional:[s.ICompletionProviderManager,m.ITranslator,r.ISanitizer],activate:function(e,n,o,t,l){if(!o)return;const s=(null!=t?t:m.nullTranslator).load("jupyterlab"),a=null!=l?l:new r.Sanitizer;e.commands.addCommand(x.invokeCompleter,{label:s.__("Display the completion helper."),execute:()=>{const e=n.currentWidget&&n.currentWidget.id;if(e)return o.invoke(e)}}),e.commands.addCommand(x.selectCompleter,{label:s.__("Select the completion suggestion."),execute:()=>{const e=n.currentWidget&&n.currentWidget.id;if(e)return o.select(e)}}),e.commands.addKeyBinding({command:x.selectCompleter,keys:["Enter"],selector:".jp-ConsolePanel .jp-mod-completer-active"});const c=async(e,n)=>{var t,r;const l={editor:null!==(r=null===(t=n.console.promptCell)||void 0===t?void 0:t.editor)&&void 0!==r?r:null,session:n.console.sessionContext.session,widget:n};await o.updateCompleter(l),n.console.promptCellCreated.connect(((e,t)=>{const r={editor:t.editor,session:e.sessionContext.session,widget:n,sanitzer:a};o.updateCompleter(r).catch(console.error)})),n.console.sessionContext.sessionChanged.connect((()=>{var e,t;const r={editor:null!==(t=null===(e=n.console.promptCell)||void 0===e?void 0:e.editor)&&void 0!==t?t:null,session:n.console.sessionContext.session,widget:n,sanitizer:a};o.updateCompleter(r).catch(console.error)}))};n.widgetAdded.connect(c),o.activeProvidersChanged.connect((()=>{n.forEach((e=>{c(0,e).catch((e=>console.error(e)))}))}))}}]}}]);