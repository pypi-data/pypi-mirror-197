# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, conint, constr

from typing import Optional

from infobip_cpaasx.models.channel import Channel
from infobip_cpaasx.models.page_resource_association import PageResourceAssociation
from infobip_cpaasx.models.resource_association_request import (
    ResourceAssociationRequest,
)
from infobip_cpaasx.models.resource_association_response import (
    ResourceAssociationResponse,
)
from infobip_cpaasx.models.resource_type import ResourceType

from infobip_cpaasx.api_client import ApiClient
from infobip_cpaasx.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class ResourceAssociationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_resource_association(
        self, resource_association_request: ResourceAssociationRequest, **kwargs
    ) -> None:  # noqa: E501
        """Create resource association  # noqa: E501

        Create a resource association.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_resource_association(resource_association_request, async_req=True)
        >>> result = thread.get()

        :param resource_association_request: (required)
        :type resource_association_request: ResourceAssociationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        return self.create_resource_association_with_http_info(
            resource_association_request, **kwargs
        )  # noqa: E501

    @validate_arguments
    def create_resource_association_with_http_info(
        self, resource_association_request: ResourceAssociationRequest, **kwargs
    ):  # noqa: E501
        """Create resource association  # noqa: E501

        Create a resource association.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_resource_association_with_http_info(resource_association_request, async_req=True)
        >>> result = thread.get()

        :param resource_association_request: (required)
        :type resource_association_request: ResourceAssociationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["resource_association_request"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_resource_association" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params["resource_association_request"]:
            _body_params = _params["resource_association_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["APIKeyHeader"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/provisioning/1/associations",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_resource_association(
        self, resource_association_request: ResourceAssociationRequest, **kwargs
    ) -> None:  # noqa: E501
        """Delete resource association  # noqa: E501

        Delete a resource association.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_resource_association(resource_association_request, async_req=True)
        >>> result = thread.get()

        :param resource_association_request: (required)
        :type resource_association_request: ResourceAssociationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        return self.delete_resource_association_with_http_info(
            resource_association_request, **kwargs
        )  # noqa: E501

    @validate_arguments
    def delete_resource_association_with_http_info(
        self, resource_association_request: ResourceAssociationRequest, **kwargs
    ):  # noqa: E501
        """Delete resource association  # noqa: E501

        Delete a resource association.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_resource_association_with_http_info(resource_association_request, async_req=True)
        >>> result = thread.get()

        :param resource_association_request: (required)
        :type resource_association_request: ResourceAssociationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["resource_association_request"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_resource_association" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params["resource_association_request"]:
            _body_params = _params["resource_association_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["APIKeyHeader"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/provisioning/1/associations",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_resource_association(
        self,
        resource_type: Annotated[
            ResourceType, Field(..., description="Resource type to be used.")
        ],
        channel: Annotated[Channel, Field(..., description="Channel to be used.")],
        application_id: Annotated[
            constr(strict=True, max_length=255),
            Field(
                ...,
                description="Id of the application, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail.",
            ),
        ],
        resource_id: Annotated[
            constr(strict=True, max_length=255),
            Field(
                ...,
                description="ID of the resource. Depends on `resourceType` and `channel`.<br/>Use [numberKey](https://www.infobip.com/docs/api/platform-connectivity/numbers/phone-numbers/list-purchased-numbers) for the NUMBER `resourceType` available for: 10DLC, Short Code, VLN for the following channels: SMS, MMS.<br/>Use [domainName](https://www.infobip.com/docs/api/channels/email/get-all-domains) for the DOMAIN `resourceType` available for domain for the following channel: Email.",
            ),
        ],
        entity_id: Annotated[
            Optional[constr(strict=True, max_length=255)],
            Field(
                description="Id of the entity, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail. If there is no entity associated with this exact resource, the value for entity should be `null`."
            ),
        ] = None,
        **kwargs
    ) -> ResourceAssociationResponse:  # noqa: E501
        """Get resource association  # noqa: E501

        Get an exact resource association.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_resource_association(resource_type, channel, application_id, resource_id, entity_id, async_req=True)
        >>> result = thread.get()

        :param resource_type: Resource type to be used. (required)
        :type resource_type: ResourceType
        :param channel: Channel to be used. (required)
        :type channel: Channel
        :param application_id: Id of the application, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail. (required)
        :type application_id: str
        :param resource_id: ID of the resource. Depends on `resourceType` and `channel`.<br/>Use [numberKey](https://www.infobip.com/docs/api/platform-connectivity/numbers/phone-numbers/list-purchased-numbers) for the NUMBER `resourceType` available for: 10DLC, Short Code, VLN for the following channels: SMS, MMS.<br/>Use [domainName](https://www.infobip.com/docs/api/channels/email/get-all-domains) for the DOMAIN `resourceType` available for domain for the following channel: Email. (required)
        :type resource_id: str
        :param entity_id: Id of the entity, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail. If there is no entity associated with this exact resource, the value for entity should be `null`.
        :type entity_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResourceAssociationResponse
        """
        kwargs["_return_http_data_only"] = True
        return self.get_resource_association_with_http_info(
            resource_type, channel, application_id, resource_id, entity_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_resource_association_with_http_info(
        self,
        resource_type: Annotated[
            ResourceType, Field(..., description="Resource type to be used.")
        ],
        channel: Annotated[Channel, Field(..., description="Channel to be used.")],
        application_id: Annotated[
            constr(strict=True, max_length=255),
            Field(
                ...,
                description="Id of the application, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail.",
            ),
        ],
        resource_id: Annotated[
            constr(strict=True, max_length=255),
            Field(
                ...,
                description="ID of the resource. Depends on `resourceType` and `channel`.<br/>Use [numberKey](https://www.infobip.com/docs/api/platform-connectivity/numbers/phone-numbers/list-purchased-numbers) for the NUMBER `resourceType` available for: 10DLC, Short Code, VLN for the following channels: SMS, MMS.<br/>Use [domainName](https://www.infobip.com/docs/api/channels/email/get-all-domains) for the DOMAIN `resourceType` available for domain for the following channel: Email.",
            ),
        ],
        entity_id: Annotated[
            Optional[constr(strict=True, max_length=255)],
            Field(
                description="Id of the entity, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail. If there is no entity associated with this exact resource, the value for entity should be `null`."
            ),
        ] = None,
        **kwargs
    ):  # noqa: E501
        """Get resource association  # noqa: E501

        Get an exact resource association.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_resource_association_with_http_info(resource_type, channel, application_id, resource_id, entity_id, async_req=True)
        >>> result = thread.get()

        :param resource_type: Resource type to be used. (required)
        :type resource_type: ResourceType
        :param channel: Channel to be used. (required)
        :type channel: Channel
        :param application_id: Id of the application, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail. (required)
        :type application_id: str
        :param resource_id: ID of the resource. Depends on `resourceType` and `channel`.<br/>Use [numberKey](https://www.infobip.com/docs/api/platform-connectivity/numbers/phone-numbers/list-purchased-numbers) for the NUMBER `resourceType` available for: 10DLC, Short Code, VLN for the following channels: SMS, MMS.<br/>Use [domainName](https://www.infobip.com/docs/api/channels/email/get-all-domains) for the DOMAIN `resourceType` available for domain for the following channel: Email. (required)
        :type resource_id: str
        :param entity_id: Id of the entity, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail. If there is no entity associated with this exact resource, the value for entity should be `null`.
        :type entity_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResourceAssociationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "resource_type",
            "channel",
            "application_id",
            "resource_id",
            "entity_id",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource_association" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("resource_type") is not None:  # noqa: E501
            _query_params.append(("resourceType", _params["resource_type"]))
        if _params.get("channel") is not None:  # noqa: E501
            _query_params.append(("channel", _params["channel"]))
        if _params.get("application_id") is not None:  # noqa: E501
            _query_params.append(("applicationId", _params["application_id"]))
        if _params.get("entity_id") is not None:  # noqa: E501
            _query_params.append(("entityId", _params["entity_id"]))
        if _params.get("resource_id") is not None:  # noqa: E501
            _query_params.append(("resourceId", _params["resource_id"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKeyHeader"]  # noqa: E501

        _response_types_map = {
            "200": "ResourceAssociationResponse",
        }

        return self.api_client.call_api(
            "/provisioning/1/associations/single",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_resource_associations(
        self,
        page: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="Results page to retrieve (0..N)."),
        ] = None,
        size: Annotated[
            Optional[conint(strict=True, le=100, ge=1)],
            Field(description="Number of records per page."),
        ] = None,
        resource_type: Annotated[
            Optional[ResourceType], Field(description="Resource type to be used.")
        ] = None,
        channel: Annotated[
            Optional[Channel], Field(description="Channel to be used.")
        ] = None,
        application_id: Annotated[
            Optional[constr(strict=True, max_length=255)],
            Field(
                description="Id of the application, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail."
            ),
        ] = None,
        entity_id: Annotated[
            Optional[constr(strict=True, max_length=255)],
            Field(
                description="Id of the entity, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail."
            ),
        ] = None,
        resource_id: Annotated[
            Optional[constr(strict=True, max_length=255)],
            Field(
                description="ID of the resource. Depends on `resourceType` and `channel`.<br/>Use [numberKey](https://www.infobip.com/docs/api/platform-connectivity/numbers/phone-numbers/list-purchased-numbers) for the NUMBER `resourceType` available for: 10DLC, Short Code, VLN for the following channels: SMS, MMS.<br/>Use [domainName](https://www.infobip.com/docs/api/channels/email/get-all-domains) for the DOMAIN `resourceType` available for domain for the following channel: Email."
            ),
        ] = None,
        **kwargs
    ) -> PageResourceAssociation:  # noqa: E501
        """Get resource associations  # noqa: E501

        Get a paginated list of resource associations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_resource_associations(page, size, resource_type, channel, application_id, entity_id, resource_id, async_req=True)
        >>> result = thread.get()

        :param page: Results page to retrieve (0..N).
        :type page: int
        :param size: Number of records per page.
        :type size: int
        :param resource_type: Resource type to be used.
        :type resource_type: ResourceType
        :param channel: Channel to be used.
        :type channel: Channel
        :param application_id: Id of the application, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail.
        :type application_id: str
        :param entity_id: Id of the entity, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail.
        :type entity_id: str
        :param resource_id: ID of the resource. Depends on `resourceType` and `channel`.<br/>Use [numberKey](https://www.infobip.com/docs/api/platform-connectivity/numbers/phone-numbers/list-purchased-numbers) for the NUMBER `resourceType` available for: 10DLC, Short Code, VLN for the following channels: SMS, MMS.<br/>Use [domainName](https://www.infobip.com/docs/api/channels/email/get-all-domains) for the DOMAIN `resourceType` available for domain for the following channel: Email.
        :type resource_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PageResourceAssociation
        """
        kwargs["_return_http_data_only"] = True
        return self.get_resource_associations_with_http_info(
            page,
            size,
            resource_type,
            channel,
            application_id,
            entity_id,
            resource_id,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_resource_associations_with_http_info(
        self,
        page: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="Results page to retrieve (0..N)."),
        ] = None,
        size: Annotated[
            Optional[conint(strict=True, le=100, ge=1)],
            Field(description="Number of records per page."),
        ] = None,
        resource_type: Annotated[
            Optional[ResourceType], Field(description="Resource type to be used.")
        ] = None,
        channel: Annotated[
            Optional[Channel], Field(description="Channel to be used.")
        ] = None,
        application_id: Annotated[
            Optional[constr(strict=True, max_length=255)],
            Field(
                description="Id of the application, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail."
            ),
        ] = None,
        entity_id: Annotated[
            Optional[constr(strict=True, max_length=255)],
            Field(
                description="Id of the entity, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail."
            ),
        ] = None,
        resource_id: Annotated[
            Optional[constr(strict=True, max_length=255)],
            Field(
                description="ID of the resource. Depends on `resourceType` and `channel`.<br/>Use [numberKey](https://www.infobip.com/docs/api/platform-connectivity/numbers/phone-numbers/list-purchased-numbers) for the NUMBER `resourceType` available for: 10DLC, Short Code, VLN for the following channels: SMS, MMS.<br/>Use [domainName](https://www.infobip.com/docs/api/channels/email/get-all-domains) for the DOMAIN `resourceType` available for domain for the following channel: Email."
            ),
        ] = None,
        **kwargs
    ):  # noqa: E501
        """Get resource associations  # noqa: E501

        Get a paginated list of resource associations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_resource_associations_with_http_info(page, size, resource_type, channel, application_id, entity_id, resource_id, async_req=True)
        >>> result = thread.get()

        :param page: Results page to retrieve (0..N).
        :type page: int
        :param size: Number of records per page.
        :type size: int
        :param resource_type: Resource type to be used.
        :type resource_type: ResourceType
        :param channel: Channel to be used.
        :type channel: Channel
        :param application_id: Id of the application, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail.
        :type application_id: str
        :param entity_id: Id of the entity, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail.
        :type entity_id: str
        :param resource_id: ID of the resource. Depends on `resourceType` and `channel`.<br/>Use [numberKey](https://www.infobip.com/docs/api/platform-connectivity/numbers/phone-numbers/list-purchased-numbers) for the NUMBER `resourceType` available for: 10DLC, Short Code, VLN for the following channels: SMS, MMS.<br/>Use [domainName](https://www.infobip.com/docs/api/channels/email/get-all-domains) for the DOMAIN `resourceType` available for domain for the following channel: Email.
        :type resource_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PageResourceAssociation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "page",
            "size",
            "resource_type",
            "channel",
            "application_id",
            "entity_id",
            "resource_id",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource_associations" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))
        if _params.get("size") is not None:  # noqa: E501
            _query_params.append(("size", _params["size"]))
        if _params.get("resource_type") is not None:  # noqa: E501
            _query_params.append(("resourceType", _params["resource_type"]))
        if _params.get("channel") is not None:  # noqa: E501
            _query_params.append(("channel", _params["channel"]))
        if _params.get("application_id") is not None:  # noqa: E501
            _query_params.append(("applicationId", _params["application_id"]))
        if _params.get("entity_id") is not None:  # noqa: E501
            _query_params.append(("entityId", _params["entity_id"]))
        if _params.get("resource_id") is not None:  # noqa: E501
            _query_params.append(("resourceId", _params["resource_id"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKeyHeader"]  # noqa: E501

        _response_types_map = {
            "200": "PageResourceAssociation",
        }

        return self.api_client.call_api(
            "/provisioning/1/associations",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
