# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, validator

from typing import List, Optional

from infobip_cpaasx.models.number_response import NumberResponse
from infobip_cpaasx.models.numbers_mo_configuration import NumbersMoConfiguration
from infobip_cpaasx.models.numbers_mo_configurations import NumbersMoConfigurations
from infobip_cpaasx.models.numbers_purchase_number_request import (
    NumbersPurchaseNumberRequest,
)
from infobip_cpaasx.models.numbers_response import NumbersResponse
from infobip_cpaasx.models.numbers_stored_mo_configuration import (
    NumbersStoredMoConfiguration,
)

from infobip_cpaasx.api_client import ApiClient
from infobip_cpaasx.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class NumbersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def cancel_number(
        self,
        number_key: Annotated[
            StrictStr, Field(..., description="Unique ID of a number.")
        ],
        **kwargs
    ) -> None:  # noqa: E501
        """Cancel number  # noqa: E501

        This method will cancel your purchased number. The number you cancel will become available in the numbers pool for anyone to buy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_number(number_key, async_req=True)
        >>> result = thread.get()

        :param number_key: Unique ID of a number. (required)
        :type number_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        return self.cancel_number_with_http_info(number_key, **kwargs)  # noqa: E501

    @validate_arguments
    def cancel_number_with_http_info(
        self,
        number_key: Annotated[
            StrictStr, Field(..., description="Unique ID of a number.")
        ],
        **kwargs
    ):  # noqa: E501
        """Cancel number  # noqa: E501

        This method will cancel your purchased number. The number you cancel will become available in the numbers pool for anyone to buy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_number_with_http_info(number_key, async_req=True)
        >>> result = thread.get()

        :param number_key: Unique ID of a number. (required)
        :type number_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["number_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_number" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["number_key"]:
            _path_params["numberKey"] = _params["number_key"]

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # authentication setting
        _auth_settings = ["APIKeyHeader"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/numbers/1/numbers/{numberKey}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def create_new_configuration(
        self,
        number_key: Annotated[
            StrictStr, Field(..., description="Unique ID of a number.")
        ],
        numbers_mo_configuration: Annotated[
            NumbersMoConfiguration, Field(..., description="configuration")
        ],
        **kwargs
    ) -> NumbersStoredMoConfiguration:  # noqa: E501
        """Create number configuration  # noqa: E501

        Create a new configuration for the number. The parameters used for setting up a configuration depend on the action type. Check the examples for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_new_configuration(number_key, numbers_mo_configuration, async_req=True)
        >>> result = thread.get()

        :param number_key: Unique ID of a number. (required)
        :type number_key: str
        :param numbers_mo_configuration: configuration (required)
        :type numbers_mo_configuration: NumbersMoConfiguration
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NumbersStoredMoConfiguration
        """
        kwargs["_return_http_data_only"] = True
        return self.create_new_configuration_with_http_info(
            number_key, numbers_mo_configuration, **kwargs
        )  # noqa: E501

    @validate_arguments
    def create_new_configuration_with_http_info(
        self,
        number_key: Annotated[
            StrictStr, Field(..., description="Unique ID of a number.")
        ],
        numbers_mo_configuration: Annotated[
            NumbersMoConfiguration, Field(..., description="configuration")
        ],
        **kwargs
    ):  # noqa: E501
        """Create number configuration  # noqa: E501

        Create a new configuration for the number. The parameters used for setting up a configuration depend on the action type. Check the examples for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_new_configuration_with_http_info(number_key, numbers_mo_configuration, async_req=True)
        >>> result = thread.get()

        :param number_key: Unique ID of a number. (required)
        :type number_key: str
        :param numbers_mo_configuration: configuration (required)
        :type numbers_mo_configuration: NumbersMoConfiguration
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NumbersStoredMoConfiguration, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["number_key", "numbers_mo_configuration"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_configuration" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["number_key"]:
            _path_params["numberKey"] = _params["number_key"]

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params["numbers_mo_configuration"]:
            _body_params = _params["numbers_mo_configuration"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["APIKeyHeader"]  # noqa: E501

        _response_types_map = {
            "200": "NumbersStoredMoConfiguration",
        }

        return self.api_client.call_api(
            "/numbers/2/numbers/{numberKey}/sms",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_configuration(
        self,
        configuration_key: Annotated[
            StrictStr, Field(..., description="Unique ID of configuration.")
        ],
        number_key: Annotated[
            StrictStr, Field(..., description="Unique ID of a number.")
        ],
        **kwargs
    ) -> None:  # noqa: E501
        """Delete number configuration  # noqa: E501

        This method will delete the configuration. If there are no configurations, you can still retrieve any incoming message by using a Get received messages method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_configuration(configuration_key, number_key, async_req=True)
        >>> result = thread.get()

        :param configuration_key: Unique ID of configuration. (required)
        :type configuration_key: str
        :param number_key: Unique ID of a number. (required)
        :type number_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        return self.delete_configuration_with_http_info(
            configuration_key, number_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def delete_configuration_with_http_info(
        self,
        configuration_key: Annotated[
            StrictStr, Field(..., description="Unique ID of configuration.")
        ],
        number_key: Annotated[
            StrictStr, Field(..., description="Unique ID of a number.")
        ],
        **kwargs
    ):  # noqa: E501
        """Delete number configuration  # noqa: E501

        This method will delete the configuration. If there are no configurations, you can still retrieve any incoming message by using a Get received messages method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_configuration_with_http_info(configuration_key, number_key, async_req=True)
        >>> result = thread.get()

        :param configuration_key: Unique ID of configuration. (required)
        :type configuration_key: str
        :param number_key: Unique ID of a number. (required)
        :type number_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["configuration_key", "number_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_configuration" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["configuration_key"]:
            _path_params["configurationKey"] = _params["configuration_key"]
        if _params["number_key"]:
            _path_params["numberKey"] = _params["number_key"]

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # authentication setting
        _auth_settings = ["APIKeyHeader"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/numbers/2/numbers/{numberKey}/sms/{configurationKey}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_available_numbers(
        self,
        capabilities: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="An array of communication channels the number is able to support."
            ),
        ] = None,
        country: Annotated[
            Optional[StrictStr], Field(description="The number's country code.")
        ] = None,
        state: Annotated[
            Optional[StrictStr], Field(description="US Numbers only: US state")
        ] = None,
        npa: Annotated[
            Optional[StrictInt], Field(description="US numbers only: area code.")
        ] = None,
        nxx: Annotated[
            Optional[StrictInt],
            Field(description="US numbers only: the 3 digits following the area code."),
        ] = None,
        extras: Annotated[
            Optional[List[StrictStr]], Field(description="extras")
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records returned per page."),
        ] = None,
        number: Annotated[
            Optional[StrictStr], Field(description="Searched number.")
        ] = None,
        page: Annotated[
            Optional[StrictInt],
            Field(description="Page number. Use it with `limit` for paging purposes."),
        ] = None,
        **kwargs
    ) -> NumbersResponse:  # noqa: E501
        """Get available numbers  # noqa: E501

        When you're looking for a new number, this method will return all available numbers filtered by the specified parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_available_numbers(capabilities, country, state, npa, nxx, extras, limit, number, page, async_req=True)
        >>> result = thread.get()

        :param capabilities: An array of communication channels the number is able to support.
        :type capabilities: List[str]
        :param country: The number's country code.
        :type country: str
        :param state: US Numbers only: US state
        :type state: str
        :param npa: US numbers only: area code.
        :type npa: int
        :param nxx: US numbers only: the 3 digits following the area code.
        :type nxx: int
        :param extras: extras
        :type extras: List[str]
        :param limit: Number of records returned per page.
        :type limit: int
        :param number: Searched number.
        :type number: str
        :param page: Page number. Use it with `limit` for paging purposes.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NumbersResponse
        """
        kwargs["_return_http_data_only"] = True
        return self.get_available_numbers_with_http_info(
            capabilities,
            country,
            state,
            npa,
            nxx,
            extras,
            limit,
            number,
            page,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_available_numbers_with_http_info(
        self,
        capabilities: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="An array of communication channels the number is able to support."
            ),
        ] = None,
        country: Annotated[
            Optional[StrictStr], Field(description="The number's country code.")
        ] = None,
        state: Annotated[
            Optional[StrictStr], Field(description="US Numbers only: US state")
        ] = None,
        npa: Annotated[
            Optional[StrictInt], Field(description="US numbers only: area code.")
        ] = None,
        nxx: Annotated[
            Optional[StrictInt],
            Field(description="US numbers only: the 3 digits following the area code."),
        ] = None,
        extras: Annotated[
            Optional[List[StrictStr]], Field(description="extras")
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records returned per page."),
        ] = None,
        number: Annotated[
            Optional[StrictStr], Field(description="Searched number.")
        ] = None,
        page: Annotated[
            Optional[StrictInt],
            Field(description="Page number. Use it with `limit` for paging purposes."),
        ] = None,
        **kwargs
    ):  # noqa: E501
        """Get available numbers  # noqa: E501

        When you're looking for a new number, this method will return all available numbers filtered by the specified parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_available_numbers_with_http_info(capabilities, country, state, npa, nxx, extras, limit, number, page, async_req=True)
        >>> result = thread.get()

        :param capabilities: An array of communication channels the number is able to support.
        :type capabilities: List[str]
        :param country: The number's country code.
        :type country: str
        :param state: US Numbers only: US state
        :type state: str
        :param npa: US numbers only: area code.
        :type npa: int
        :param nxx: US numbers only: the 3 digits following the area code.
        :type nxx: int
        :param extras: extras
        :type extras: List[str]
        :param limit: Number of records returned per page.
        :type limit: int
        :param number: Searched number.
        :type number: str
        :param page: Page number. Use it with `limit` for paging purposes.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NumbersResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "capabilities",
            "country",
            "state",
            "npa",
            "nxx",
            "extras",
            "limit",
            "number",
            "page",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_available_numbers" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("capabilities") is not None:  # noqa: E501
            _query_params.append(("capabilities", _params["capabilities"]))
            _collection_formats["capabilities"] = "multi"
        if _params.get("country") is not None:  # noqa: E501
            _query_params.append(("country", _params["country"]))
        if _params.get("state") is not None:  # noqa: E501
            _query_params.append(("state", _params["state"]))
        if _params.get("npa") is not None:  # noqa: E501
            _query_params.append(("npa", _params["npa"]))
        if _params.get("nxx") is not None:  # noqa: E501
            _query_params.append(("nxx", _params["nxx"]))
        if _params.get("extras") is not None:  # noqa: E501
            _query_params.append(("extras", _params["extras"]))
            _collection_formats["extras"] = "multi"
        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))
        if _params.get("number") is not None:  # noqa: E501
            _query_params.append(("number", _params["number"]))
        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKeyHeader"]  # noqa: E501

        _response_types_map = {
            "200": "NumbersResponse",
        }

        return self.api_client.call_api(
            "/numbers/1/numbers/available",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_single_configuration(
        self,
        configuration_key: Annotated[
            StrictStr, Field(..., description="Unique ID of configuration.")
        ],
        number_key: Annotated[
            StrictStr, Field(..., description="Unique ID of a number.")
        ],
        **kwargs
    ) -> NumbersStoredMoConfiguration:  # noqa: E501
        """Get single number configuration  # noqa: E501

        This method fetches a single configuration details set up for the number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_single_configuration(configuration_key, number_key, async_req=True)
        >>> result = thread.get()

        :param configuration_key: Unique ID of configuration. (required)
        :type configuration_key: str
        :param number_key: Unique ID of a number. (required)
        :type number_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NumbersStoredMoConfiguration
        """
        kwargs["_return_http_data_only"] = True
        return self.get_single_configuration_with_http_info(
            configuration_key, number_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_single_configuration_with_http_info(
        self,
        configuration_key: Annotated[
            StrictStr, Field(..., description="Unique ID of configuration.")
        ],
        number_key: Annotated[
            StrictStr, Field(..., description="Unique ID of a number.")
        ],
        **kwargs
    ):  # noqa: E501
        """Get single number configuration  # noqa: E501

        This method fetches a single configuration details set up for the number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_single_configuration_with_http_info(configuration_key, number_key, async_req=True)
        >>> result = thread.get()

        :param configuration_key: Unique ID of configuration. (required)
        :type configuration_key: str
        :param number_key: Unique ID of a number. (required)
        :type number_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NumbersStoredMoConfiguration, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["configuration_key", "number_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_configuration" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["configuration_key"]:
            _path_params["configurationKey"] = _params["configuration_key"]
        if _params["number_key"]:
            _path_params["numberKey"] = _params["number_key"]

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKeyHeader"]  # noqa: E501

        _response_types_map = {
            "200": "NumbersStoredMoConfiguration",
        }

        return self.api_client.call_api(
            "/numbers/2/numbers/{numberKey}/sms/{configurationKey}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_single_purchased_number(
        self,
        number_key: Annotated[
            StrictStr,
            Field(
                ...,
                description="The unique ID of the number for which information is requested.",
            ),
        ],
        **kwargs
    ) -> NumberResponse:  # noqa: E501
        """Get single purchased number  # noqa: E501

        Get information about a single purchased number by the number key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_single_purchased_number(number_key, async_req=True)
        >>> result = thread.get()

        :param number_key: The unique ID of the number for which information is requested. (required)
        :type number_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NumberResponse
        """
        kwargs["_return_http_data_only"] = True
        return self.get_single_purchased_number_with_http_info(
            number_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_single_purchased_number_with_http_info(
        self,
        number_key: Annotated[
            StrictStr,
            Field(
                ...,
                description="The unique ID of the number for which information is requested.",
            ),
        ],
        **kwargs
    ):  # noqa: E501
        """Get single purchased number  # noqa: E501

        Get information about a single purchased number by the number key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_single_purchased_number_with_http_info(number_key, async_req=True)
        >>> result = thread.get()

        :param number_key: The unique ID of the number for which information is requested. (required)
        :type number_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NumberResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["number_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_purchased_number" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["number_key"]:
            _path_params["numberKey"] = _params["number_key"]

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKeyHeader"]  # noqa: E501

        _response_types_map = {
            "200": "NumberResponse",
        }

        return self.api_client.call_api(
            "/numbers/1/numbers/{numberKey}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_configurations_for_number(
        self,
        number_key: Annotated[
            StrictStr, Field(..., description="Unique ID of a number.")
        ],
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records returned per page."),
        ] = None,
        page: Annotated[
            Optional[StrictInt],
            Field(description="Page number. Use with `limit` for paging purposes."),
        ] = None,
        **kwargs
    ) -> NumbersMoConfigurations:  # noqa: E501
        """Get all number configurations  # noqa: E501

        List all configurations set up for a number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_configurations_for_number(number_key, limit, page, async_req=True)
        >>> result = thread.get()

        :param number_key: Unique ID of a number. (required)
        :type number_key: str
        :param limit: Number of records returned per page.
        :type limit: int
        :param page: Page number. Use with `limit` for paging purposes.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NumbersMoConfigurations
        """
        kwargs["_return_http_data_only"] = True
        return self.list_configurations_for_number_with_http_info(
            number_key, limit, page, **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_configurations_for_number_with_http_info(
        self,
        number_key: Annotated[
            StrictStr, Field(..., description="Unique ID of a number.")
        ],
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records returned per page."),
        ] = None,
        page: Annotated[
            Optional[StrictInt],
            Field(description="Page number. Use with `limit` for paging purposes."),
        ] = None,
        **kwargs
    ):  # noqa: E501
        """Get all number configurations  # noqa: E501

        List all configurations set up for a number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_configurations_for_number_with_http_info(number_key, limit, page, async_req=True)
        >>> result = thread.get()

        :param number_key: Unique ID of a number. (required)
        :type number_key: str
        :param limit: Number of records returned per page.
        :type limit: int
        :param page: Page number. Use with `limit` for paging purposes.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NumbersMoConfigurations, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["number_key", "limit", "page"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_configurations_for_number" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["number_key"]:
            _path_params["numberKey"] = _params["number_key"]

        # process the query parameters
        _query_params = []
        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))
        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKeyHeader"]  # noqa: E501

        _response_types_map = {
            "200": "NumbersMoConfigurations",
        }

        return self.api_client.call_api(
            "/numbers/2/numbers/{numberKey}/sms",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_purchased_numbers(
        self,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records returned per page."),
        ] = None,
        number: Annotated[
            Optional[StrictStr], Field(description="Searched number.")
        ] = None,
        page: Annotated[
            Optional[StrictInt],
            Field(description="Page number. Use with `limit` for paging purposes."),
        ] = None,
        **kwargs
    ) -> NumbersResponse:  # noqa: E501
        """List purchased numbers  # noqa: E501

        Use this method to get all the numbers purchased for the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_purchased_numbers(limit, number, page, async_req=True)
        >>> result = thread.get()

        :param limit: Number of records returned per page.
        :type limit: int
        :param number: Searched number.
        :type number: str
        :param page: Page number. Use with `limit` for paging purposes.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NumbersResponse
        """
        kwargs["_return_http_data_only"] = True
        return self.list_purchased_numbers_with_http_info(
            limit, number, page, **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_purchased_numbers_with_http_info(
        self,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records returned per page."),
        ] = None,
        number: Annotated[
            Optional[StrictStr], Field(description="Searched number.")
        ] = None,
        page: Annotated[
            Optional[StrictInt],
            Field(description="Page number. Use with `limit` for paging purposes."),
        ] = None,
        **kwargs
    ):  # noqa: E501
        """List purchased numbers  # noqa: E501

        Use this method to get all the numbers purchased for the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_purchased_numbers_with_http_info(limit, number, page, async_req=True)
        >>> result = thread.get()

        :param limit: Number of records returned per page.
        :type limit: int
        :param number: Searched number.
        :type number: str
        :param page: Page number. Use with `limit` for paging purposes.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NumbersResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["limit", "number", "page"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_purchased_numbers" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))
        if _params.get("number") is not None:  # noqa: E501
            _query_params.append(("number", _params["number"]))
        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKeyHeader"]  # noqa: E501

        _response_types_map = {
            "200": "NumbersResponse",
        }

        return self.api_client.call_api(
            "/numbers/1/numbers",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def modify_sms_configurations(
        self,
        number_key: Annotated[
            StrictStr, Field(..., description="Unique ID of a number.")
        ],
        numbers_stored_mo_configuration: Annotated[
            NumbersStoredMoConfiguration,
            Field(..., description="Configuration with updated values."),
        ],
        **kwargs
    ) -> NumbersStoredMoConfiguration:  # noqa: E501
        """Update number configuration  # noqa: E501

        Update configuration details. Parameters used vary depending on the action type, the same as with the Create a new configuration method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.modify_sms_configurations(number_key, numbers_stored_mo_configuration, async_req=True)
        >>> result = thread.get()

        :param number_key: Unique ID of a number. (required)
        :type number_key: str
        :param numbers_stored_mo_configuration: Configuration with updated values. (required)
        :type numbers_stored_mo_configuration: NumbersStoredMoConfiguration
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NumbersStoredMoConfiguration
        """
        kwargs["_return_http_data_only"] = True
        return self.modify_sms_configurations_with_http_info(
            number_key, numbers_stored_mo_configuration, **kwargs
        )  # noqa: E501

    @validate_arguments
    def modify_sms_configurations_with_http_info(
        self,
        number_key: Annotated[
            StrictStr, Field(..., description="Unique ID of a number.")
        ],
        numbers_stored_mo_configuration: Annotated[
            NumbersStoredMoConfiguration,
            Field(..., description="Configuration with updated values."),
        ],
        **kwargs
    ):  # noqa: E501
        """Update number configuration  # noqa: E501

        Update configuration details. Parameters used vary depending on the action type, the same as with the Create a new configuration method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.modify_sms_configurations_with_http_info(number_key, numbers_stored_mo_configuration, async_req=True)
        >>> result = thread.get()

        :param number_key: Unique ID of a number. (required)
        :type number_key: str
        :param numbers_stored_mo_configuration: Configuration with updated values. (required)
        :type numbers_stored_mo_configuration: NumbersStoredMoConfiguration
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NumbersStoredMoConfiguration, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["number_key", "numbers_stored_mo_configuration"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_sms_configurations" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["number_key"]:
            _path_params["numberKey"] = _params["number_key"]

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params["numbers_stored_mo_configuration"]:
            _body_params = _params["numbers_stored_mo_configuration"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["APIKeyHeader"]  # noqa: E501

        _response_types_map = {
            "200": "NumbersStoredMoConfiguration",
        }

        return self.api_client.call_api(
            "/numbers/2/numbers/{numberKey}/sms",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def purchase_number(
        self,
        numbers_purchase_number_request: Annotated[
            NumbersPurchaseNumberRequest,
            Field(
                ...,
                description="Either numberKey of the number to be purchased or a number needs to be provided",
            ),
        ],
        **kwargs
    ) -> NumberResponse:  # noqa: E501
        """Purchase number  # noqa: E501

        Using the number ID or number, this method enables you to buy a new number. For buying a US number, only the number should be provided. For all other purchases, only the numberKey must be provided  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.purchase_number(numbers_purchase_number_request, async_req=True)
        >>> result = thread.get()

        :param numbers_purchase_number_request: Either numberKey of the number to be purchased or a number needs to be provided (required)
        :type numbers_purchase_number_request: NumbersPurchaseNumberRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NumberResponse
        """
        kwargs["_return_http_data_only"] = True
        return self.purchase_number_with_http_info(
            numbers_purchase_number_request, **kwargs
        )  # noqa: E501

    @validate_arguments
    def purchase_number_with_http_info(
        self,
        numbers_purchase_number_request: Annotated[
            NumbersPurchaseNumberRequest,
            Field(
                ...,
                description="Either numberKey of the number to be purchased or a number needs to be provided",
            ),
        ],
        **kwargs
    ):  # noqa: E501
        """Purchase number  # noqa: E501

        Using the number ID or number, this method enables you to buy a new number. For buying a US number, only the number should be provided. For all other purchases, only the numberKey must be provided  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.purchase_number_with_http_info(numbers_purchase_number_request, async_req=True)
        >>> result = thread.get()

        :param numbers_purchase_number_request: Either numberKey of the number to be purchased or a number needs to be provided (required)
        :type numbers_purchase_number_request: NumbersPurchaseNumberRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NumberResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["numbers_purchase_number_request"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchase_number" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params["numbers_purchase_number_request"]:
            _body_params = _params["numbers_purchase_number_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["APIKeyHeader"]  # noqa: E501

        _response_types_map = {
            "200": "NumberResponse",
            "201": None,
        }

        return self.api_client.call_api(
            "/numbers/1/numbers",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
