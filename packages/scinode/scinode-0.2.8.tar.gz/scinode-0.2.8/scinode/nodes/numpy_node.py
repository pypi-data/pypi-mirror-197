from scinode.core.node import Node

func_items = [
    "DataSource",
    "MachAr",
    "Tester",
    "abs",
    "absolute",
    "add",
    "add_docstring",
    "add_newdoc",
    "add_newdoc_ufunc",
    "alen",
    "all",
    "allclose",
    "alltrue",
    "amax",
    "amin",
    "angle",
    "any",
    "append",
    "apply_along_axis",
    "apply_over_axes",
    "arange",
    "arccos",
    "arccosh",
    "arcsin",
    "arcsinh",
    "arctan",
    "arctan2",
    "arctanh",
    "argmax",
    "argmin",
    "argpartition",
    "argsort",
    "argwhere",
    "around",
    "array",
    "array2string",
    "array_equal",
    "array_equiv",
    "array_repr",
    "array_split",
    "array_str",
    "asanyarray",
    "asarray",
    "asarray_chkfinite",
    "ascontiguousarray",
    "asfarray",
    "asfortranarray",
    "asmatrix",
    "asscalar",
    "atleast_1d",
    "atleast_2d",
    "atleast_3d",
    "average",
    "bartlett",
    "base_repr",
    "binary_repr",
    "bincount",
    "bitwise_and",
    "bitwise_not",
    "bitwise_or",
    "bitwise_xor",
    "blackman",
    "block",
    "bmat",
    "bool",
    "bool8",
    "bool_",
    "broadcast",
    "broadcast_arrays",
    "broadcast_to",
    "busday_count",
    "busday_offset",
    "busdaycalendar",
    "byte",
    "byte_bounds",
    "bytes0",
    "bytes_",
    "can_cast",
    "cbrt",
    "cdouble",
    "ceil",
    "cfloat",
    "character",
    "chararray",
    "choose",
    "clip",
    "clongdouble",
    "clongfloat",
    "column_stack",
    "common_type",
    "compare_chararrays",
    "complex",
    "complex128",
    "complex256",
    "complex64",
    "complex_",
    "complexfloating",
    "compress",
    "concatenate",
    "conj",
    "conjugate",
    "convolve",
    "copy",
    "copysign",
    "copyto",
    "corrcoef",
    "correlate",
    "cos",
    "cosh",
    "count_nonzero",
    "cov",
    "cross",
    "csingle",
    "cumprod",
    "cumproduct",
    "cumsum",
    "datetime64",
    "datetime_as_string",
    "datetime_data",
    "deg2rad",
    "degrees",
    "delete",
    "deprecate",
    "deprecate_with_doc",
    "diag",
    "diag_indices",
    "diag_indices_from",
    "diagflat",
    "diagonal",
    "diff",
    "digitize",
    "disp",
    "divide",
    "divmod",
    "dot",
    "double",
    "dsplit",
    "dstack",
    "dtype",
    "ediff1d",
    "einsum",
    "einsum_path",
    "empty",
    "empty_like",
    "equal",
    "errstate",
    "exp",
    "exp2",
    "expand_dims",
    "expm1",
    "extract",
    "eye",
    "fabs",
    "fastCopyAndTranspose",
    "fill_diagonal",
    "find_common_type",
    "finfo",
    "fix",
    "flatiter",
    "flatnonzero",
    "flexible",
    "flip",
    "fliplr",
    "flipud",
    "float",
    "float128",
    "float16",
    "float32",
    "float64",
    "float_",
    "float_power",
    "floating",
    "floor",
    "floor_divide",
    "fmax",
    "fmin",
    "fmod",
    "format_float_positional",
    "format_float_scientific",
    "format_parser",
    "frexp",
    "frombuffer",
    "fromfile",
    "fromfunction",
    "fromiter",
    "frompyfunc",
    "fromregex",
    "fromstring",
    "full",
    "full_like",
    "fv",
    "gcd",
    "generic",
    "genfromtxt",
    "geomspace",
    "get_array_wrap",
    "get_include",
    "get_printoptions",
    "getbufsize",
    "geterr",
    "geterrcall",
    "geterrobj",
    "gradient",
    "greater",
    "greater_equal",
    "half",
    "hamming",
    "hanning",
    "heaviside",
    "histogram",
    "histogram2d",
    "histogram_bin_edges",
    "histogramdd",
    "hsplit",
    "hstack",
    "hypot",
    "i0",
    "identity",
    "iinfo",
    "imag",
    "in1d",
    "indices",
    "inexact",
    "info",
    "inner",
    "insert",
    "int",
    "int0",
    "int16",
    "int32",
    "int64",
    "int8",
    "int_",
    "intc",
    "integer",
    "interp",
    "intersect1d",
    "intp",
    "invert",
    "ipmt",
    "irr",
    "is_busday",
    "isclose",
    "iscomplex",
    "iscomplexobj",
    "isfinite",
    "isfortran",
    "isin",
    "isinf",
    "isnan",
    "isnat",
    "isneginf",
    "isposinf",
    "isreal",
    "isrealobj",
    "isscalar",
    "issctype",
    "issubclass_",
    "issubdtype",
    "issubsctype",
    "iterable",
    "ix_",
    "kaiser",
    "kron",
    "lcm",
    "ldexp",
    "left_shift",
    "less",
    "less_equal",
    "lexsort",
    "linspace",
    "load",
    "loads",
    "loadtxt",
    "log",
    "log10",
    "log1p",
    "log2",
    "logaddexp",
    "logaddexp2",
    "logical_and",
    "logical_not",
    "logical_or",
    "logical_xor",
    "logspace",
    "long",
    "longcomplex",
    "longdouble",
    "longfloat",
    "longlong",
    "lookfor",
    "mafromtxt",
    "mask_indices",
    "mat",
    "matmul",
    "matrix",
    "max",
    "maximum",
    "maximum_sctype",
    "may_share_memory",
    "mean",
    "median",
    "memmap",
    "meshgrid",
    "min",
    "min_scalar_type",
    "minimum",
    "mintypecode",
    "mirr",
    "mod",
    "modf",
    "moveaxis",
    "msort",
    "multiply",
    "nan_to_num",
    "nanargmax",
    "nanargmin",
    "nancumprod",
    "nancumsum",
    "nanmax",
    "nanmean",
    "nanmedian",
    "nanmin",
    "nanpercentile",
    "nanprod",
    "nanquantile",
    "nanstd",
    "nansum",
    "nanvar",
    "ndarray",
    "ndenumerate",
    "ndfromtxt",
    "ndim",
    "ndindex",
    "nditer",
    "negative",
    "nested_iters",
    "nextafter",
    "nonzero",
    "not_equal",
    "nper",
    "npv",
    "number",
    "obj2sctype",
    "object",
    "object0",
    "object_",
    "ones",
    "ones_like",
    "outer",
    "packbits",
    "pad",
    "partition",
    "percentile",
    "piecewise",
    "place",
    "pmt",
    "poly",
    "poly1d",
    "polyadd",
    "polyder",
    "polydiv",
    "polyfit",
    "polyint",
    "polymul",
    "polysub",
    "polyval",
    "positive",
    "power",
    "ppmt",
    "printoptions",
    "prod",
    "product",
    "promote_types",
    "ptp",
    "put",
    "put_along_axis",
    "putmask",
    "pv",
    "quantile",
    "rad2deg",
    "radians",
    "rate",
    "ravel",
    "ravel_multi_index",
    "real",
    "real_if_close",
    "recarray",
    "recfromcsv",
    "recfromtxt",
    "reciprocal",
    "record",
    "remainder",
    "repeat",
    "require",
    "reshape",
    "resize",
    "result_type",
    "right_shift",
    "rint",
    "roll",
    "rollaxis",
    "roots",
    "rot90",
    "round",
    "round_",
    "row_stack",
    "safe_eval",
    "save",
    "savetxt",
    "savez",
    "savez_compressed",
    "sctype2char",
    "searchsorted",
    "select",
    "set_numeric_ops",
    "set_printoptions",
    "set_string_function",
    "setbufsize",
    "setdiff1d",
    "seterr",
    "seterrcall",
    "seterrobj",
    "setxor1d",
    "shape",
    "shares_memory",
    "short",
    "show_config",
    "sign",
    "signbit",
    "signedinteger",
    "sin",
    "sinc",
    "single",
    "singlecomplex",
    "sinh",
    "size",
    "sometrue",
    "sort",
    "sort_complex",
    "source",
    "spacing",
    "split",
    "sqrt",
    "square",
    "squeeze",
    "stack",
    "std",
    "str",
    "str0",
    "str_",
    "string_",
    "subtract",
    "sum",
    "swapaxes",
    "take",
    "take_along_axis",
    "tan",
    "tanh",
    "tensordot",
    "test",
    "tile",
    "timedelta64",
    "trace",
    "transpose",
    "trapz",
    "tri",
    "tril",
    "tril_indices",
    "tril_indices_from",
    "trim_zeros",
    "triu",
    "triu_indices",
    "triu_indices_from",
    "true_divide",
    "trunc",
    "typename",
    "ubyte",
    "ufunc",
    "uint",
    "uint0",
    "uint16",
    "uint32",
    "uint64",
    "uint8",
    "uintc",
    "uintp",
    "ulonglong",
    "unicode",
    "unicode_",
    "union1d",
    "unique",
    "unpackbits",
    "unravel_index",
    "unsignedinteger",
    "unwrap",
    "ushort",
    "vander",
    "var",
    "vdot",
    "vectorize",
    "void",
    "void0",
    "vsplit",
    "vstack",
    "where",
    "who",
    "zeros",
    "zeros_like",
]


class ScinodeNumpy(Node):
    identifier = "Numpy"
    name = "Numpy"
    catalog = "Math"

    def create_properties(self):
        self.properties.new(
            "Enum",
            "function",
            data={
                "default": "cos",
                "options": func_items,
                "update": self.create_sockets,
            },
        )
        self.properties.new("Float", "x1", data={"default": 1})
        self.properties.new("Float", "x2", data={"default": 1})
        self.properties.new("Float", "x", data={"default": 1})
        self.properties.new("Float", "y", data={"default": 1})
        self.properties.new("Float", "start", data={"default": 1})
        self.properties.new("Float", "stop", data={"default": 10})
        self.properties.new("Int", "num", data={"default": 10})
        self.properties.new("Float", "step", data={"default": 1})
        self.properties.new("Int", "axis", data={"default": 0})
        self.properties.new("IntVector", "shape", data={"default": [1], "size": [1, 2]})

    def create_sockets(self):
        self.inputs.clear()
        self.outputs.clear()
        if self.properties["function"].value in ["linspace"]:
            self.inputs.new("Float", "start")
            self.inputs.new("Float", "stop")
            self.inputs.new("Int", "num")
            self.args = ["start", "stop"]
            self.kwargs = ["num"]
        elif self.properties["function"].value in ["arange"]:
            self.inputs.new("Float", "start")
            self.inputs.new("Float", "stop")
            self.inputs.new("Int", "step")
            self.args = ["start", "stop"]
            self.kwargs = ["step"]
        elif self.properties["function"].value in ["cos", "sin"]:
            self.inputs.new("Float", "x")
            self.args = ["x"]
            self.kwargs = []
        elif self.properties["function"].value in []:
            self.inputs.new("Float", "x")
            self.inputs.new("Float", "y")
            self.args = ["x", "y"]
            self.kwargs = []
        elif self.properties["function"].value in ["argmax", "argmin"]:
            self.inputs.new("General", "a")
            self.inputs.new("Int", "axis")
            self.args = ["a"]
            self.kwargs = ["axis"]
        elif self.properties["function"].value in ["ones", "zeros"]:
            self.inputs.new("General", "shape")
            self.args = ["shape"]
            self.kwargs = []
        elif self.properties["function"].value in [
            "multiply",
            "divide",
            "power",
            "substract",
            "mod",
            "greater",
            "less",
            "add",
        ]:
            self.inputs.new("General", "x1")
            self.inputs.new("General", "x2")
            self.args = ["x1", "x2"]
            self.kwargs = []
        else:
            self.inputs.new("Float", "x")
            self.args = ["x"]
            self.kwargs = []
        self.outputs.new("General", "Result")

    def get_executor(self):
        return {
            "path": "numpy",
            "name": self.properties["function"].value,
            "type": "function",
        }


node_list = [
    ScinodeNumpy,
]
