/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   named_event.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_NAMED_EVENT_H
#define UHDM_NAMED_EVENT_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/containers.h>
#include <uhdm/BaseClass.h>




namespace UHDM {
class event_typespec;

class named_event final : public BaseClass {
  UHDM_IMPLEMENT_RTTI(named_event, BaseClass)
public:
  // Implicit constructor used to initialize all members,
  // comment: named_event();
  virtual ~named_event() final = default;

  virtual const BaseClass* VpiParent() const final { return vpiParent_; }

  virtual bool VpiParent(BaseClass* data) final { vpiParent_ = data; return true; }

  virtual bool VpiFile(const std::string& data) final;

  virtual const std::string& VpiFile() const final;

  virtual unsigned int UhdmId() const final { return uhdmId_; }

  virtual bool UhdmId(unsigned int data) final { uhdmId_ = data; return true; }

  bool VpiArrayMember() const { return vpiArrayMember_; }

  bool VpiArrayMember(bool data) { vpiArrayMember_ = data; return true; }

  virtual bool VpiName(const std::string& data) final;

  virtual const std::string& VpiName() const final;

  bool VpiFullName(const std::string& data);

  const std::string& VpiFullName() const;

  bool VpiAutomatic() const { return vpiAutomatic_; }

  bool VpiAutomatic(bool data) { vpiAutomatic_ = data; return true; }

  int VpiAllocScheme() const { return vpiAllocScheme_; }

  bool VpiAllocScheme(int data) { vpiAllocScheme_ = data; return true; }

  VectorOfattribute* Attributes() const { return attributes_; }

  bool Attributes(VectorOfattribute* data) { attributes_ = data; return true; }

  const event_typespec* Event_typespec() const { return event_typespec_; }

  bool Event_typespec(event_typespec* data) { event_typespec_ = data; return true; }

  VectorOfthread_obj* Threads() const { return threads_; }

  bool Threads(VectorOfthread_obj* data) { threads_ = data; return true; }

  virtual unsigned int VpiType() const final { return vpiNamedEvent; }

  virtual named_event* DeepClone(Serializer* serializer, ElaboratorListener* elaborator, BaseClass* parent) const override;

  virtual const BaseClass* GetByVpiName(std::string_view name) const override;

  virtual std::tuple<const BaseClass*, UHDM_OBJECT_TYPE, const std::vector<const BaseClass*>*> GetByVpiType(int type) const override;

  virtual vpi_property_value_t GetVpiPropertyValue(int property) const override;

  virtual int Compare(const BaseClass* const other, AnySet& visited) const override;

  virtual  UHDM_OBJECT_TYPE UhdmType() const final { return uhdmnamed_event; }

protected:
  void DeepCopy(named_event* clone, Serializer* serializer,
                ElaboratorListener* elaborator, BaseClass* parent) const;

private:
  BaseClass* vpiParent_ = nullptr;

  SymbolFactory::ID vpiFile_ = 0;

  unsigned int uhdmId_ = 0;

  bool vpiArrayMember_ = false;

  SymbolFactory::ID vpiName_ = 0;

  SymbolFactory::ID vpiFullName_ = 0;

  bool vpiAutomatic_ = false;

  int vpiAllocScheme_ = 0;

  VectorOfattribute* attributes_ = nullptr;

  event_typespec* event_typespec_ = nullptr;

  VectorOfthread_obj* threads_ = nullptr;
};


typedef FactoryT<named_event> named_eventFactory;


typedef FactoryT<std::vector<named_event *>> VectorOfnamed_eventFactory;

}  // namespace UHDM

#endif
