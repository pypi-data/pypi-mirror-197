/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   assignment.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_ASSIGNMENT_H
#define UHDM_ASSIGNMENT_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/containers.h>
#include <uhdm/atomic_stmt.h>

#include "expr_interf_expr_group.h"


namespace UHDM {
class delay_control;
class event_control;
class expr;
class repeat_control;

class assignment final : public atomic_stmt {
  UHDM_IMPLEMENT_RTTI(assignment, atomic_stmt)
public:
  // Implicit constructor used to initialize all members,
  // comment: assignment();
  virtual ~assignment() final = default;

  virtual const BaseClass* VpiParent() const final { return vpiParent_; }

  virtual bool VpiParent(BaseClass* data) final { vpiParent_ = data; return true; }

  virtual bool VpiFile(const std::string& data) final;

  virtual const std::string& VpiFile() const final;

  virtual unsigned int UhdmId() const final { return uhdmId_; }

  virtual bool UhdmId(unsigned int data) final { uhdmId_ = data; return true; }

  int VpiOpType() const { return vpiOpType_; }

  bool VpiOpType(int data) { vpiOpType_ = data; return true; }

  bool VpiBlocking() const { return vpiBlocking_; }

  bool VpiBlocking(bool data) { vpiBlocking_ = data; return true; }

  const any* Rhs() const { return rhs_; }

  bool Rhs(any* data) { if (!expr_interf_expr_groupGroupCompliant(data)) return false; rhs_ = data; return true; }

  const expr* Lhs() const { return lhs_; }

  bool Lhs(expr* data) { lhs_ = data; return true; }

  const delay_control* Delay_control() const { return delay_control_; }

  bool Delay_control(delay_control* data) { delay_control_ = data; return true; }

  const event_control* Event_control() const { return event_control_; }

  bool Event_control(event_control* data) { event_control_ = data; return true; }

  const repeat_control* Repeat_control() const { return repeat_control_; }

  bool Repeat_control(repeat_control* data) { repeat_control_ = data; return true; }

  virtual unsigned int VpiType() const final { return vpiAssignment; }

  virtual assignment* DeepClone(Serializer* serializer, ElaboratorListener* elaborator, BaseClass* parent) const override;

  virtual const BaseClass* GetByVpiName(std::string_view name) const override;

  virtual std::tuple<const BaseClass*, UHDM_OBJECT_TYPE, const std::vector<const BaseClass*>*> GetByVpiType(int type) const override;

  virtual vpi_property_value_t GetVpiPropertyValue(int property) const override;

  virtual int Compare(const BaseClass* const other, AnySet& visited) const override;

  virtual  UHDM_OBJECT_TYPE UhdmType() const final { return uhdmassignment; }

protected:
  void DeepCopy(assignment* clone, Serializer* serializer,
                ElaboratorListener* elaborator, BaseClass* parent) const;

private:
  BaseClass* vpiParent_ = nullptr;

  SymbolFactory::ID vpiFile_ = 0;

  unsigned int uhdmId_ = 0;

  int vpiOpType_ = 0;

  bool vpiBlocking_ = false;

  any* rhs_ = nullptr;

  expr* lhs_ = nullptr;

  delay_control* delay_control_ = nullptr;

  event_control* event_control_ = nullptr;

  repeat_control* repeat_control_ = nullptr;
};


typedef FactoryT<assignment> assignmentFactory;


typedef FactoryT<std::vector<assignment *>> VectorOfassignmentFactory;

}  // namespace UHDM

#endif
