/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   packed_array_net.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_PACKED_ARRAY_NET_H
#define UHDM_PACKED_ARRAY_NET_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/containers.h>
#include <uhdm/net.h>

#include "enum_struct_packed_net_group.h"


namespace UHDM {
class expr;

class packed_array_net final : public net {
  UHDM_IMPLEMENT_RTTI(packed_array_net, net)
public:
  // Implicit constructor used to initialize all members,
  // comment: packed_array_net();
  virtual ~packed_array_net() final = default;

  virtual const BaseClass* VpiParent() const final { return vpiParent_; }

  virtual bool VpiParent(BaseClass* data) final { vpiParent_ = data; return true; }

  virtual bool VpiFile(const std::string& data) final;

  virtual const std::string& VpiFile() const final;

  virtual unsigned int UhdmId() const final { return uhdmId_; }

  virtual bool UhdmId(unsigned int data) final { uhdmId_ = data; return true; }

  bool VpiPackedArrayMember() const { return vpiPackedArrayMember_; }

  bool VpiPackedArrayMember(bool data) { vpiPackedArrayMember_ = data; return true; }

  const expr* Left_expr() const { return left_expr_; }

  bool Left_expr(expr* data) { left_expr_ = data; return true; }

  const expr* Right_expr() const { return right_expr_; }

  bool Right_expr(expr* data) { right_expr_ = data; return true; }

  VectorOfrange* Ranges() const { return ranges_; }

  bool Ranges(VectorOfrange* data) { ranges_ = data; return true; }

  VectorOfany* Elements() const { return elements_; }

  bool Elements(VectorOfany* data) { if (!enum_struct_packed_net_groupGroupCompliant(data)) return false; elements_ = data; return true; }

  virtual unsigned int VpiType() const final { return vpiPackedArrayNet; }

  virtual packed_array_net* DeepClone(Serializer* serializer, ElaboratorListener* elaborator, BaseClass* parent) const override;

  virtual const BaseClass* GetByVpiName(std::string_view name) const override;

  virtual std::tuple<const BaseClass*, UHDM_OBJECT_TYPE, const std::vector<const BaseClass*>*> GetByVpiType(int type) const override;

  virtual vpi_property_value_t GetVpiPropertyValue(int property) const override;

  virtual int Compare(const BaseClass* const other, AnySet& visited) const override;

  virtual  UHDM_OBJECT_TYPE UhdmType() const final { return uhdmpacked_array_net; }

protected:
  void DeepCopy(packed_array_net* clone, Serializer* serializer,
                ElaboratorListener* elaborator, BaseClass* parent) const;

private:
  BaseClass* vpiParent_ = nullptr;

  SymbolFactory::ID vpiFile_ = 0;

  unsigned int uhdmId_ = 0;

  bool vpiPackedArrayMember_ = false;

  expr* left_expr_ = nullptr;

  expr* right_expr_ = nullptr;

  VectorOfrange* ranges_ = nullptr;

  VectorOfany* elements_ = nullptr;
};


typedef FactoryT<packed_array_net> packed_array_netFactory;


typedef FactoryT<std::vector<packed_array_net *>> VectorOfpacked_array_netFactory;

}  // namespace UHDM

#endif
