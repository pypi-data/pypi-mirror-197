/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   case_stmt.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_CASE_STMT_H
#define UHDM_CASE_STMT_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/containers.h>
#include <uhdm/atomic_stmt.h>




namespace UHDM {
class expr;

class case_stmt final : public atomic_stmt {
  UHDM_IMPLEMENT_RTTI(case_stmt, atomic_stmt)
public:
  // Implicit constructor used to initialize all members,
  // comment: case_stmt();
  virtual ~case_stmt() final = default;

  virtual const BaseClass* VpiParent() const final { return vpiParent_; }

  virtual bool VpiParent(BaseClass* data) final { vpiParent_ = data; return true; }

  virtual bool VpiFile(const std::string& data) final;

  virtual const std::string& VpiFile() const final;

  virtual unsigned int UhdmId() const final { return uhdmId_; }

  virtual bool UhdmId(unsigned int data) final { uhdmId_ = data; return true; }

  unsigned int VpiType() const final { return vpiCase; }

  unsigned int VpiRandType() const { return vpiRandType_; }

  bool VpiRandType(unsigned int data) { vpiRandType_ = data; return true; }

  int VpiCaseType() const { return vpiCaseType_; }

  bool VpiCaseType(int data) { vpiCaseType_ = data; return true; }

  int VpiQualifier() const { return vpiQualifier_; }

  bool VpiQualifier(int data) { vpiQualifier_ = data; return true; }

  const expr* VpiCondition() const { return vpiCondition_; }

  bool VpiCondition(expr* data) { vpiCondition_ = data; return true; }

  VectorOfcase_item* Case_items() const { return case_items_; }

  bool Case_items(VectorOfcase_item* data) { case_items_ = data; return true; }

  virtual case_stmt* DeepClone(Serializer* serializer, ElaboratorListener* elaborator, BaseClass* parent) const override;

  virtual const BaseClass* GetByVpiName(std::string_view name) const override;

  virtual std::tuple<const BaseClass*, UHDM_OBJECT_TYPE, const std::vector<const BaseClass*>*> GetByVpiType(int type) const override;

  virtual vpi_property_value_t GetVpiPropertyValue(int property) const override;

  virtual int Compare(const BaseClass* const other, AnySet& visited) const override;

  virtual  UHDM_OBJECT_TYPE UhdmType() const final { return uhdmcase_stmt; }

protected:
  void DeepCopy(case_stmt* clone, Serializer* serializer,
                ElaboratorListener* elaborator, BaseClass* parent) const;

private:
  BaseClass* vpiParent_ = nullptr;

  SymbolFactory::ID vpiFile_ = 0;

  unsigned int uhdmId_ = 0;

  unsigned int vpiRandType_ = 0;

  int vpiCaseType_ = 0;

  int vpiQualifier_ = 0;

  expr* vpiCondition_ = nullptr;

  VectorOfcase_item* case_items_ = nullptr;
};


typedef FactoryT<case_stmt> case_stmtFactory;


typedef FactoryT<std::vector<case_stmt *>> VectorOfcase_stmtFactory;

}  // namespace UHDM

#endif
