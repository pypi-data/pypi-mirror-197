/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   primitive.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_PRIMITIVE_H
#define UHDM_PRIMITIVE_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/containers.h>
#include <uhdm/BaseClass.h>




namespace UHDM {
class expr;

class primitive : public BaseClass {
  UHDM_IMPLEMENT_RTTI(primitive, BaseClass)
public:
  // Implicit constructor used to initialize all members,
  // comment: primitive();
  virtual ~primitive() = default;

  bool VpiArrayMember() const { return vpiArrayMember_; }

  bool VpiArrayMember(bool data) { vpiArrayMember_ = data; return true; }

  virtual bool VpiDefName(const std::string& data) final;

  virtual const std::string& VpiDefName() const final;

  bool VpiDelay(const std::string& data);

  const std::string& VpiDelay() const;

  virtual bool VpiName(const std::string& data) final;

  virtual const std::string& VpiName() const final;

  bool VpiFullName(const std::string& data);

  const std::string& VpiFullName() const;

  int VpiPrimType() const { return vpiPrimType_; }

  bool VpiPrimType(int data) { vpiPrimType_ = data; return true; }

  int VpiStrength0() const { return vpiStrength0_; }

  bool VpiStrength0(int data) { vpiStrength0_ = data; return true; }

  int VpiStrength1() const { return vpiStrength1_; }

  bool VpiStrength1(int data) { vpiStrength1_ = data; return true; }

  VectorOfattribute* Attributes() const { return attributes_; }

  bool Attributes(VectorOfattribute* data) { attributes_ = data; return true; }

  bool VpiValue(const std::string& data);

  const std::string& VpiValue() const;

  const expr* Delay() const { return delay_; }

  bool Delay(expr* data) { delay_ = data; return true; }

  const expr* Index() const { return index_; }

  bool Index(expr* data) { index_ = data; return true; }

  VectorOfprim_term* Prim_terms() const { return prim_terms_; }

  bool Prim_terms(VectorOfprim_term* data) { prim_terms_ = data; return true; }

  virtual primitive* DeepClone(Serializer* serializer, ElaboratorListener* elaborator, BaseClass* parent) const override = 0;

  virtual const BaseClass* GetByVpiName(std::string_view name) const override;

  virtual std::tuple<const BaseClass*, UHDM_OBJECT_TYPE, const std::vector<const BaseClass*>*> GetByVpiType(int type) const override;

  virtual vpi_property_value_t GetVpiPropertyValue(int property) const override;

  virtual int Compare(const BaseClass* const other, AnySet& visited) const override;

  virtual  UHDM_OBJECT_TYPE UhdmType() const override { return uhdmprimitive; }

protected:
  void DeepCopy(primitive* clone, Serializer* serializer,
                ElaboratorListener* elaborator, BaseClass* parent) const;

private:
  bool vpiArrayMember_ = false;

  SymbolFactory::ID vpiDefName_ = 0;

  SymbolFactory::ID vpiDelay_ = 0;

  SymbolFactory::ID vpiName_ = 0;

  SymbolFactory::ID vpiFullName_ = 0;

  int vpiPrimType_ = 0;

  int vpiStrength0_ = 0;

  int vpiStrength1_ = 0;

  VectorOfattribute* attributes_ = nullptr;

  SymbolFactory::ID vpiValue_ = 0;

  expr* delay_ = nullptr;

  expr* index_ = nullptr;

  VectorOfprim_term* prim_terms_ = nullptr;
};

#if 0 // This class cannot be instantiated
typedef FactoryT<primitive> primitiveFactory;
#endif

typedef FactoryT<std::vector<primitive *>> VectorOfprimitiveFactory;

}  // namespace UHDM

#endif
