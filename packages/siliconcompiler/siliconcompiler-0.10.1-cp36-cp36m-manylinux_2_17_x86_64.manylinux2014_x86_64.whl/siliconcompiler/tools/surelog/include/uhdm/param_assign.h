/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   param_assign.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_PARAM_ASSIGN_H
#define UHDM_PARAM_ASSIGN_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/containers.h>
#include <uhdm/BaseClass.h>

#include "expr_typespec_group.h"
#include "parameters.h"


namespace UHDM {


class param_assign final : public BaseClass {
  UHDM_IMPLEMENT_RTTI(param_assign, BaseClass)
public:
  // Implicit constructor used to initialize all members,
  // comment: param_assign();
  virtual ~param_assign() final = default;

  virtual const BaseClass* VpiParent() const final { return vpiParent_; }

  virtual bool VpiParent(BaseClass* data) final { vpiParent_ = data; return true; }

  virtual bool VpiFile(const std::string& data) final;

  virtual const std::string& VpiFile() const final;

  virtual unsigned int UhdmId() const final { return uhdmId_; }

  virtual bool UhdmId(unsigned int data) final { uhdmId_ = data; return true; }

  bool VpiConnByName() const { return vpiConnByName_; }

  bool VpiConnByName(bool data) { vpiConnByName_ = data; return true; }

  bool VpiOverriden() const { return vpiOverriden_; }

  bool VpiOverriden(bool data) { vpiOverriden_ = data; return true; }

  const any* Rhs() const { return rhs_; }

  bool Rhs(any* data) { if (!expr_typespec_groupGroupCompliant(data)) return false; rhs_ = data; return true; }

  const any* Lhs() const { return lhs_; }

  bool Lhs(any* data) { if (!parametersGroupCompliant(data)) return false; lhs_ = data; return true; }

  VectorOfattribute* Attributes() const { return attributes_; }

  bool Attributes(VectorOfattribute* data) { attributes_ = data; return true; }

  virtual unsigned int VpiType() const final { return vpiParamAssign; }

  virtual param_assign* DeepClone(Serializer* serializer, ElaboratorListener* elaborator, BaseClass* parent) const override;

  virtual const BaseClass* GetByVpiName(std::string_view name) const override;

  virtual std::tuple<const BaseClass*, UHDM_OBJECT_TYPE, const std::vector<const BaseClass*>*> GetByVpiType(int type) const override;

  virtual vpi_property_value_t GetVpiPropertyValue(int property) const override;

  virtual int Compare(const BaseClass* const other, AnySet& visited) const override;

  virtual  UHDM_OBJECT_TYPE UhdmType() const final { return uhdmparam_assign; }

protected:
  void DeepCopy(param_assign* clone, Serializer* serializer,
                ElaboratorListener* elaborator, BaseClass* parent) const;

private:
  BaseClass* vpiParent_ = nullptr;

  SymbolFactory::ID vpiFile_ = 0;

  unsigned int uhdmId_ = 0;

  bool vpiConnByName_ = false;

  bool vpiOverriden_ = false;

  any* rhs_ = nullptr;

  any* lhs_ = nullptr;

  VectorOfattribute* attributes_ = nullptr;
};


typedef FactoryT<param_assign> param_assignFactory;


typedef FactoryT<std::vector<param_assign *>> VectorOfparam_assignFactory;

}  // namespace UHDM

#endif
