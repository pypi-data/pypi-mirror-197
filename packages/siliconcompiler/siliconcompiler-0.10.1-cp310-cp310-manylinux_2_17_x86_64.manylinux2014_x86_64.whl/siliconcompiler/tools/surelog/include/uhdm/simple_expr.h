/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   simple_expr.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_SIMPLE_EXPR_H
#define UHDM_SIMPLE_EXPR_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/containers.h>
#include <uhdm/expr.h>

#include "simple_expr_use_group.h"


namespace UHDM {


class simple_expr : public expr {
  UHDM_IMPLEMENT_RTTI(simple_expr, expr)
public:
  // Implicit constructor used to initialize all members,
  // comment: simple_expr();
  virtual ~simple_expr() = default;

  VectorOfany* VpiUses() const { return vpiUses_; }

  bool VpiUses(VectorOfany* data) { if (!simple_expr_use_groupGroupCompliant(data)) return false; vpiUses_ = data; return true; }

  virtual simple_expr* DeepClone(Serializer* serializer, ElaboratorListener* elaborator, BaseClass* parent) const override = 0;

  virtual const BaseClass* GetByVpiName(std::string_view name) const override;

  virtual std::tuple<const BaseClass*, UHDM_OBJECT_TYPE, const std::vector<const BaseClass*>*> GetByVpiType(int type) const override;

  virtual vpi_property_value_t GetVpiPropertyValue(int property) const override;

  virtual int Compare(const BaseClass* const other, AnySet& visited) const override;

  virtual  UHDM_OBJECT_TYPE UhdmType() const override { return uhdmsimple_expr; }

protected:
  void DeepCopy(simple_expr* clone, Serializer* serializer,
                ElaboratorListener* elaborator, BaseClass* parent) const;

private:
  VectorOfany* vpiUses_ = nullptr;
};

#if 0 // This class cannot be instantiated
typedef FactoryT<simple_expr> simple_exprFactory;
#endif

typedef FactoryT<std::vector<simple_expr *>> VectorOfsimple_exprFactory;

}  // namespace UHDM

#endif
