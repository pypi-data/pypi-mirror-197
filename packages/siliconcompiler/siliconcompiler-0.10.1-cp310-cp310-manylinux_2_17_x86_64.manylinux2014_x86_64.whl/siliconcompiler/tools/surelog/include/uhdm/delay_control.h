/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   delay_control.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_DELAY_CONTROL_H
#define UHDM_DELAY_CONTROL_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/containers.h>
#include <uhdm/atomic_stmt.h>

#include "stmt.h"


namespace UHDM {
class expr;

class delay_control final : public atomic_stmt {
  UHDM_IMPLEMENT_RTTI(delay_control, atomic_stmt)
public:
  // Implicit constructor used to initialize all members,
  // comment: delay_control();
  virtual ~delay_control() final = default;

  virtual const BaseClass* VpiParent() const final { return vpiParent_; }

  virtual bool VpiParent(BaseClass* data) final { vpiParent_ = data; return true; }

  virtual bool VpiFile(const std::string& data) final;

  virtual const std::string& VpiFile() const final;

  virtual unsigned int UhdmId() const final { return uhdmId_; }

  virtual bool UhdmId(unsigned int data) final { uhdmId_ = data; return true; }

  bool VpiDelay(const std::string& data);

  const std::string& VpiDelay() const;

  const any* Stmt() const { return stmt_; }

  bool Stmt(any* data) { if (!stmtGroupCompliant(data)) return false; stmt_ = data; return true; }

  const expr* Delay() const { return delay_; }

  bool Delay(expr* data) { delay_ = data; return true; }

  virtual unsigned int VpiType() const final { return vpiDelayControl; }

  virtual delay_control* DeepClone(Serializer* serializer, ElaboratorListener* elaborator, BaseClass* parent) const override;

  virtual const BaseClass* GetByVpiName(std::string_view name) const override;

  virtual std::tuple<const BaseClass*, UHDM_OBJECT_TYPE, const std::vector<const BaseClass*>*> GetByVpiType(int type) const override;

  virtual vpi_property_value_t GetVpiPropertyValue(int property) const override;

  virtual int Compare(const BaseClass* const other, AnySet& visited) const override;

  virtual  UHDM_OBJECT_TYPE UhdmType() const final { return uhdmdelay_control; }

protected:
  void DeepCopy(delay_control* clone, Serializer* serializer,
                ElaboratorListener* elaborator, BaseClass* parent) const;

private:
  BaseClass* vpiParent_ = nullptr;

  SymbolFactory::ID vpiFile_ = 0;

  unsigned int uhdmId_ = 0;

  SymbolFactory::ID vpiDelay_ = 0;

  any* stmt_ = nullptr;

  expr* delay_ = nullptr;
};


typedef FactoryT<delay_control> delay_controlFactory;


typedef FactoryT<std::vector<delay_control *>> VectorOfdelay_controlFactory;

}  // namespace UHDM

#endif
