/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   cont_assign_bit.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_CONT_ASSIGN_BIT_H
#define UHDM_CONT_ASSIGN_BIT_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/containers.h>
#include <uhdm/BaseClass.h>




namespace UHDM {
class expr;

class cont_assign_bit final : public BaseClass {
  UHDM_IMPLEMENT_RTTI(cont_assign_bit, BaseClass)
public:
  // Implicit constructor used to initialize all members,
  // comment: cont_assign_bit();
  virtual ~cont_assign_bit() final = default;

  virtual const BaseClass* VpiParent() const final { return vpiParent_; }

  virtual bool VpiParent(BaseClass* data) final { vpiParent_ = data; return true; }

  virtual bool VpiFile(const std::string& data) final;

  virtual const std::string& VpiFile() const final;

  virtual unsigned int UhdmId() const final { return uhdmId_; }

  virtual bool UhdmId(unsigned int data) final { uhdmId_ = data; return true; }

  int VpiOffset() const { return vpiOffset_; }

  bool VpiOffset(int data) { vpiOffset_ = data; return true; }

  bool VpiNetDeclAssign() const { return vpiNetDeclAssign_; }

  bool VpiNetDeclAssign(bool data) { vpiNetDeclAssign_ = data; return true; }

  int VpiStrength0() const { return vpiStrength0_; }

  bool VpiStrength0(int data) { vpiStrength0_ = data; return true; }

  int VpiStrength1() const { return vpiStrength1_; }

  bool VpiStrength1(int data) { vpiStrength1_ = data; return true; }

  bool VpiValue(const std::string& data);

  const std::string& VpiValue() const;

  const expr* Delay() const { return delay_; }

  bool Delay(expr* data) { delay_ = data; return true; }

  const expr* Rhs() const { return rhs_; }

  bool Rhs(expr* data) { rhs_ = data; return true; }

  const expr* Lhs() const { return lhs_; }

  bool Lhs(expr* data) { lhs_ = data; return true; }

  virtual unsigned int VpiType() const final { return vpiContAssignBit; }

  virtual cont_assign_bit* DeepClone(Serializer* serializer, ElaboratorListener* elaborator, BaseClass* parent) const override;

  virtual const BaseClass* GetByVpiName(std::string_view name) const override;

  virtual std::tuple<const BaseClass*, UHDM_OBJECT_TYPE, const std::vector<const BaseClass*>*> GetByVpiType(int type) const override;

  virtual vpi_property_value_t GetVpiPropertyValue(int property) const override;

  virtual int Compare(const BaseClass* const other, AnySet& visited) const override;

  virtual  UHDM_OBJECT_TYPE UhdmType() const final { return uhdmcont_assign_bit; }

protected:
  void DeepCopy(cont_assign_bit* clone, Serializer* serializer,
                ElaboratorListener* elaborator, BaseClass* parent) const;

private:
  BaseClass* vpiParent_ = nullptr;

  SymbolFactory::ID vpiFile_ = 0;

  unsigned int uhdmId_ = 0;

  int vpiOffset_ = 0;

  bool vpiNetDeclAssign_ = false;

  int vpiStrength0_ = 0;

  int vpiStrength1_ = 0;

  SymbolFactory::ID vpiValue_ = 0;

  expr* delay_ = nullptr;

  expr* rhs_ = nullptr;

  expr* lhs_ = nullptr;
};


typedef FactoryT<cont_assign_bit> cont_assign_bitFactory;


typedef FactoryT<std::vector<cont_assign_bit *>> VectorOfcont_assign_bitFactory;

}  // namespace UHDM

#endif
