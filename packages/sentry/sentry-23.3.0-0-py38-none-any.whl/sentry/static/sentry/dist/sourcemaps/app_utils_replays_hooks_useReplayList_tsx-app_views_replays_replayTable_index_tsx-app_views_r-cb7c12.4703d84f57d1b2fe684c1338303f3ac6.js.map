{"version":3,"file":"chunks/app_utils_replays_hooks_useReplayList_tsx-app_views_replays_replayTable_index_tsx-app_views_r-cb7c12.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/replays/fetchReplayList.tsx","webpack:///./app/utils/replays/hooks/useReplayList.tsx","webpack:///./app/views/replays/replayTable/sortableHeader.tsx","webpack:///./app/views/replays/replayTable/headerCell.tsx","webpack:///./app/views/replays/replayTable/tableCell.tsx","webpack:///./app/views/replays/replayTable/index.tsx","webpack:///./app/views/replays/replayTable/types.tsx","webpack:///./app/views/replays/types.tsx"],"sourcesContent":["import * as Sentry from '@sentry/react';\nimport type {Location} from 'history';\n\nimport type {Client} from 'sentry/api';\nimport type {Organization} from 'sentry/types';\nimport type EventView from 'sentry/utils/discover/eventView';\nimport {mapResponseToReplayRecord} from 'sentry/utils/replays/replayDataUtils';\nimport type RequestError from 'sentry/utils/requestError/requestError';\nimport type {ReplayListRecord} from 'sentry/views/replays/types';\n\nexport const DEFAULT_SORT = '-started_at';\n\ntype State = {\n  fetchError: undefined | RequestError;\n  pageLinks: null | string;\n  replays: undefined | ReplayListRecord[];\n};\n\ntype Result = State;\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\nasync function fetchReplayList({\n  api,\n  organization,\n  location,\n  eventView,\n}: Props): Promise<Result> {\n  try {\n    const path = `/organizations/${organization.slug}/replays/`;\n\n    const [{data}, _textStatus, resp] = await api.requestPromise(path, {\n      includeAllArgs: true,\n      query: {\n        ...eventView.getEventsAPIPayload(location),\n        cursor: location.query.cursor,\n      },\n    });\n\n    const pageLinks = resp?.getResponseHeader('Link') ?? '';\n\n    return {\n      fetchError: undefined,\n      pageLinks,\n      replays: data.map(mapResponseToReplayRecord),\n    };\n  } catch (error) {\n    if (error.responseJSON?.detail) {\n      return {\n        fetchError: error.responseJSON.detail,\n        pageLinks: null,\n        replays: [],\n      };\n    }\n    Sentry.captureException(error);\n    return {\n      fetchError: error,\n      pageLinks: null,\n      replays: [],\n    };\n  }\n}\n\nexport default fetchReplayList;\n","import {useCallback, useEffect, useState} from 'react';\nimport {Location} from 'history';\n\nimport type {Organization} from 'sentry/types';\nimport type EventView from 'sentry/utils/discover/eventView';\nimport fetchReplayList from 'sentry/utils/replays/fetchReplayList';\nimport useApi from 'sentry/utils/useApi';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\ntype Options = {\n  eventView: EventView;\n  location: Location<ReplayListLocationQuery>;\n  organization: Organization;\n};\n\ntype State = Awaited<ReturnType<typeof fetchReplayList>> & {isFetching: boolean};\n\ntype Result = State;\n\nfunction useReplayList({eventView, location, organization}: Options): Result {\n  const api = useApi();\n\n  const [data, setData] = useState<State>({\n    fetchError: undefined,\n    isFetching: true,\n    pageLinks: null,\n    replays: [],\n  });\n\n  const loadReplays = useCallback(async () => {\n    api.clear();\n    setData(prev => ({\n      ...prev,\n      isFetching: true,\n    }));\n    const response = await fetchReplayList({\n      api,\n      organization,\n      location,\n      eventView,\n    });\n\n    setData({...response, isFetching: false});\n  }, [api, organization, location, eventView]);\n\n  useEffect(() => {\n    loadReplays();\n  }, [loadReplays]);\n\n  return data;\n}\n\nexport default useReplayList;\n","import styled from '@emotion/styled';\n\nimport Link from 'sentry/components/links/link';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {IconArrow} from 'sentry/icons';\nimport {space} from 'sentry/styles/space';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport type {Sort} from 'sentry/utils/discover/fields';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\nimport {ReplayRecord} from 'sentry/views/replays/types';\n\ntype NotSortable = {\n  label: string;\n  tooltip?: string;\n};\n\ntype Sortable = {\n  fieldName: keyof ReplayRecord;\n  label: string;\n  sort: undefined | Sort;\n  tooltip?: string;\n};\n\ntype Props = NotSortable | Sortable;\n\nfunction SortableHeader(props: Props) {\n  const location = useLocation<ReplayListLocationQuery>();\n  const organization = useOrganization();\n\n  if (!('sort' in props) || !props.sort) {\n    const {label, tooltip} = props;\n    return (\n      <Header>\n        {label}\n        {tooltip ? (\n          <StyledQuestionTooltip size=\"xs\" position=\"top\" title={tooltip} />\n        ) : null}\n      </Header>\n    );\n  }\n\n  const {fieldName, label, sort, tooltip} = props;\n\n  const arrowDirection = sort?.kind === 'asc' ? 'up' : 'down';\n  const sortArrow = <IconArrow color=\"gray300\" size=\"xs\" direction={arrowDirection} />;\n\n  return (\n    <Header>\n      <SortLink\n        role=\"columnheader\"\n        aria-sort={\n          sort?.field.endsWith(fieldName)\n            ? sort?.kind === 'asc'\n              ? 'ascending'\n              : 'descending'\n            : 'none'\n        }\n        onClick={() => {\n          const column = sort?.field.endsWith(fieldName)\n            ? sort?.kind === 'desc'\n              ? fieldName\n              : '-' + fieldName\n            : '-' + fieldName;\n          trackAdvancedAnalyticsEvent('replay.list-sorted', {\n            organization,\n            column,\n          });\n        }}\n        to={{\n          pathname: location.pathname,\n          query: {\n            ...location.query,\n            sort: sort?.field.endsWith(fieldName)\n              ? sort?.kind === 'desc'\n                ? fieldName\n                : '-' + fieldName\n              : '-' + fieldName,\n          },\n        }}\n      >\n        {label} {sort?.field === fieldName && sortArrow}\n      </SortLink>\n      {tooltip ? (\n        <StyledQuestionTooltip size=\"xs\" position=\"top\" title={tooltip} />\n      ) : null}\n    </Header>\n  );\n}\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, max-content);\n  align-items: center;\n`;\n\nconst SortLink = styled(Link)`\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n\n  svg {\n    vertical-align: top;\n  }\n`;\n\nconst StyledQuestionTooltip = styled(QuestionTooltip)`\n  margin-left: ${space(0.5)};\n`;\n\nexport default SortableHeader;\n","import {t} from 'sentry/locale';\nimport type {Sort} from 'sentry/utils/discover/fields';\nimport SortableHeader from 'sentry/views/replays/replayTable/sortableHeader';\nimport {ReplayColumns} from 'sentry/views/replays/replayTable/types';\n\ntype Props = {\n  column: keyof typeof ReplayColumns;\n  sort?: Sort;\n};\n\nfunction HeaderCell({column, sort}: Props) {\n  switch (column) {\n    case ReplayColumns.session:\n      return <SortableHeader label={t('Session')} />;\n\n    case ReplayColumns.projectId:\n      return <SortableHeader sort={sort} fieldName=\"project_id\" label={t('Project')} />;\n\n    case ReplayColumns.slowestTransaction:\n      return (\n        <SortableHeader\n          label={t('Slowest Transaction')}\n          tooltip={t(\n            'Slowest single instance of this transaction captured by this session.'\n          )}\n        />\n      );\n\n    case ReplayColumns.startedAt:\n      return (\n        <SortableHeader sort={sort} fieldName=\"started_at\" label={t('Start Time')} />\n      );\n\n    case ReplayColumns.duration:\n      return <SortableHeader sort={sort} fieldName=\"duration\" label={t('Duration')} />;\n\n    case ReplayColumns.countErrors:\n      return <SortableHeader sort={sort} fieldName=\"count_errors\" label={t('Errors')} />;\n\n    case ReplayColumns.activity:\n      return (\n        <SortableHeader\n          sort={sort}\n          fieldName=\"activity\"\n          label={t('Activity')}\n          tooltip={t(\n            'Activity represents how much user activity happened in a replay. It is determined by the number of errors encountered, duration, and UI events.'\n          )}\n        />\n      );\n\n    default:\n      return null;\n  }\n}\n\nexport default HeaderCell;\n","import styled from '@emotion/styled';\n\nimport Duration from 'sentry/components/duration';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport UserBadge from 'sentry/components/idBadge/userBadge';\nimport Link from 'sentry/components/links/link';\nimport {StringWalker} from 'sentry/components/replays/walker/urlWalker';\nimport ScoreBar from 'sentry/components/scoreBar';\nimport TimeSince from 'sentry/components/timeSince';\nimport CHART_PALETTE from 'sentry/constants/chartPalette';\nimport {space} from 'sentry/styles/space';\nimport type {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {spanOperationRelativeBreakdownRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useProjects from 'sentry/utils/useProjects';\nimport type {ReplayListRecordWithTx} from 'sentry/views/performance/transactionSummary/transactionReplays/useReplaysWithTxData';\nimport type {ReplayListRecord} from 'sentry/views/replays/types';\n\ntype Props = {\n  replay: ReplayListRecord | ReplayListRecordWithTx;\n};\n\nexport function SessionCell({\n  eventView,\n  organization,\n  referrer,\n  replay,\n}: Props & {eventView: EventView; organization: Organization; referrer: string}) {\n  const {projects} = useProjects();\n  const project = projects.find(p => p.id === replay.project_id);\n\n  return (\n    <UserBadge\n      avatarSize={32}\n      displayName={\n        <Link\n          to={{\n            pathname: `/organizations/${organization.slug}/replays/${project?.slug}:${replay.id}/`,\n            query: {\n              referrer,\n              ...eventView.generateQueryStringObject(),\n            },\n          }}\n        >\n          {replay.user.display_name || ''}\n        </Link>\n      }\n      user={{\n        username: replay.user.display_name || '',\n        email: replay.user.email || '',\n        id: replay.user.id || '',\n        ip_address: replay.user.ip || '',\n        name: replay.user.username || '',\n      }}\n      // this is the subheading for the avatar, so displayEmail in this case is a misnomer\n      displayEmail={<StringWalker urls={replay.urls} />}\n    />\n  );\n}\n\nexport function ProjectCell({replay}: Props) {\n  const {projects} = useProjects();\n  const project = projects.find(p => p.id === replay.project_id);\n\n  return (\n    <Item>{project ? <ProjectBadge project={project} avatarSize={16} /> : null}</Item>\n  );\n}\n\nexport function TransactionCell({\n  organization,\n  replay,\n}: Props & {organization: Organization}) {\n  const location = useLocation();\n\n  const hasTxEvent = 'txEvent' in replay;\n  const txDuration = hasTxEvent ? replay.txEvent?.['transaction.duration'] : undefined;\n  return hasTxEvent ? (\n    <SpanOperationBreakdown>\n      {txDuration ? <div>{txDuration}ms</div> : null}\n      {spanOperationRelativeBreakdownRenderer(\n        replay.txEvent,\n        {\n          organization,\n          location,\n        },\n        {\n          enableOnClick: false,\n        }\n      )}\n    </SpanOperationBreakdown>\n  ) : null;\n}\n\nexport function StartedAtCell({replay}: Props) {\n  return (\n    <Item>\n      <TimeSince date={replay.started_at} />\n    </Item>\n  );\n}\n\nexport function DurationCell({replay}: Props) {\n  return (\n    <Item>\n      <Duration seconds={replay.duration.asSeconds()} exact abbreviation />\n    </Item>\n  );\n}\n\nexport function ErrorCountCell({replay}: Props) {\n  return <Item data-test-id=\"replay-table-count-errors\">{replay.count_errors || 0}</Item>;\n}\n\nexport function ActivityCell({replay}: Props) {\n  const scoreBarPalette = new Array(10).fill([CHART_PALETTE[0][0]]);\n  return (\n    <Item>\n      <ScoreBar\n        size={20}\n        score={replay?.activity ?? 1}\n        palette={scoreBarPalette}\n        radius={0}\n      />\n    </Item>\n  );\n}\n\nconst Item = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(1)};\n`;\n\nconst SpanOperationBreakdown = styled('div')`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: ${space(0.5)};\n  color: ${p => p.theme.gray500};\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-align: right;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Alert} from 'sentry/components/alert';\nimport {PanelTable} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport EventView from 'sentry/utils/discover/eventView';\nimport type {Sort} from 'sentry/utils/discover/fields';\nimport getRouteStringFromRoutes from 'sentry/utils/getRouteStringFromRoutes';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useRoutes} from 'sentry/utils/useRoutes';\nimport type {ReplayListRecordWithTx} from 'sentry/views/performance/transactionSummary/transactionReplays/useReplaysWithTxData';\nimport HeaderCell from 'sentry/views/replays/replayTable/headerCell';\nimport {\n  ActivityCell,\n  DurationCell,\n  ErrorCountCell,\n  ProjectCell,\n  SessionCell,\n  StartedAtCell,\n  TransactionCell,\n} from 'sentry/views/replays/replayTable/tableCell';\nimport {ReplayColumns} from 'sentry/views/replays/replayTable/types';\nimport type {ReplayListRecord} from 'sentry/views/replays/types';\n\ntype Props = {\n  fetchError: undefined | Error;\n  isFetching: boolean;\n  replays: undefined | ReplayListRecord[] | ReplayListRecordWithTx[];\n  sort: Sort | undefined;\n  visibleColumns: Array<keyof typeof ReplayColumns>;\n};\n\nfunction ReplayTable({fetchError, isFetching, replays, sort, visibleColumns}: Props) {\n  const routes = useRoutes();\n  const location = useLocation();\n  const organization = useOrganization();\n\n  const tableHeaders = visibleColumns.map(column => (\n    <HeaderCell key={column} column={column} sort={sort} />\n  ));\n\n  if (fetchError && !isFetching) {\n    return (\n      <StyledPanelTable\n        headers={tableHeaders}\n        isLoading={false}\n        visibleColumns={visibleColumns}\n      >\n        <StyledAlert type=\"error\" showIcon>\n          {typeof fetchError === 'string'\n            ? fetchError\n            : t(\n                'Sorry, the list of replays could not be loaded. This could be due to invalid search parameters or an internal systems error.'\n              )}\n        </StyledAlert>\n      </StyledPanelTable>\n    );\n  }\n\n  const referrer = getRouteStringFromRoutes(routes);\n  const eventView = EventView.fromLocation(location);\n\n  return (\n    <StyledPanelTable\n      headers={tableHeaders}\n      isEmpty={replays?.length === 0}\n      isLoading={isFetching}\n      visibleColumns={visibleColumns}\n    >\n      {replays?.map(replay => {\n        return (\n          <Fragment key={replay.id}>\n            {visibleColumns.map(column => {\n              switch (column) {\n                case ReplayColumns.session:\n                  return (\n                    <SessionCell\n                      key=\"session\"\n                      replay={replay}\n                      eventView={eventView}\n                      organization={organization}\n                      referrer={referrer}\n                    />\n                  );\n                case ReplayColumns.projectId:\n                  return <ProjectCell key=\"projectId\" replay={replay} />;\n                case ReplayColumns.slowestTransaction:\n                  return (\n                    <TransactionCell\n                      key=\"slowestTransaction\"\n                      replay={replay}\n                      organization={organization}\n                    />\n                  );\n                case ReplayColumns.startedAt:\n                  return <StartedAtCell key=\"startedAt\" replay={replay} />;\n                case ReplayColumns.duration:\n                  return <DurationCell key=\"duration\" replay={replay} />;\n                case ReplayColumns.countErrors:\n                  return <ErrorCountCell key=\"countErrors\" replay={replay} />;\n                case ReplayColumns.activity:\n                  return <ActivityCell key=\"activity\" replay={replay} />;\n                default:\n                  return null;\n              }\n            })}\n          </Fragment>\n        );\n      })}\n    </StyledPanelTable>\n  );\n}\n\nconst StyledPanelTable = styled(PanelTable)<{\n  visibleColumns: Array<keyof typeof ReplayColumns>;\n}>`\n  grid-template-columns: ${p =>\n    p.visibleColumns\n      .map(column => (column === 'session' ? 'minmax(100px, 1fr)' : 'max-content'))\n      .join(' ')};\n`;\n\nconst StyledAlert = styled(Alert)`\n  border-radius: 0;\n  border-width: 1px 0 0 0;\n  grid-column: 1/-1;\n  margin-bottom: 0;\n`;\n\nexport default ReplayTable;\n","export enum ReplayColumns {\n  activity = 'activity',\n  countErrors = 'countErrors',\n  duration = 'duration',\n  projectId = 'projectId',\n  session = 'session',\n  slowestTransaction = 'slowestTransaction',\n  startedAt = 'startedAt',\n}\n","import type {eventWithTime} from '@sentry-internal/rrweb/typings/types';\nimport type {Duration} from 'moment';\n\nimport type {RawCrumb} from 'sentry/types/breadcrumbs';\n\n// Keep this in sync with the backend blueprint\n// \"ReplayRecord\" is distinct from the common: \"replay = new ReplayReader()\"\nexport type ReplayRecord = {\n  /**\n   * Number that represents how much user activity happened in a replay.\n   */\n  activity: number;\n  browser: {\n    name: null | string;\n    version: null | string;\n  };\n  /**\n   * The number of errors associated with the replay.\n   */\n  count_errors: number;\n  /**\n   * The number of segments that make up the replay.\n   */\n  count_segments: number;\n  /**\n   * The number of urls visited in the replay.\n   */\n  count_urls: number;\n  device: {\n    brand: null | string;\n    family: null | string;\n    model_id: null | string;\n    name: null | string;\n  };\n  dist: null | string;\n  /**\n   * Difference of `finished_at` and `started_at` in seconds.\n   */\n  duration: Duration;\n  environment: null | string;\n  error_ids: string[];\n  /**\n   * The **latest** timestamp received as determined by the SDK.\n   */\n  finished_at: Date;\n  /**\n   * The ID of the Replay instance\n   */\n  id: string;\n  /**\n   * The longest transaction associated with the replay measured in milliseconds.\n   */\n  longest_transaction: number;\n  os: {\n    name: null | string;\n    version: null | string;\n  };\n  platform: string;\n  project_id: string;\n  releases: null | string[];\n  sdk: {\n    name: string;\n    version: string;\n  };\n  /**\n   * The **earliest** timestamp received as determined by the SDK.\n   */\n  started_at: Date;\n  tags: Record<string, string[]>;\n  trace_ids: string[];\n  urls: string[];\n  user: {\n    display_name: null | string;\n    email: null | string;\n    id: null | string;\n    ip: null | string;\n    username: null | string;\n  };\n};\n\nexport type ReplayListLocationQuery = {\n  cursor?: string;\n  end?: string;\n  environment?: string[];\n  field?: string[];\n  limit?: string;\n  offset?: string;\n  project?: string[];\n  query?: string;\n  sort?: string;\n  start?: string;\n  statsPeriod?: string;\n  utc?: 'true' | 'false';\n};\n\n// Sync with REPLAY_LIST_FIELDS below\nexport type ReplayListRecord = Pick<\n  ReplayRecord,\n  | 'activity'\n  | 'count_errors'\n  | 'duration'\n  | 'finished_at'\n  | 'id'\n  | 'project_id'\n  | 'started_at'\n  | 'urls'\n  | 'user'\n>;\n\n// Sync with ReplayListRecord above\nexport const REPLAY_LIST_FIELDS: (keyof ReplayListRecord)[] = [\n  'activity',\n  'count_errors',\n  'duration',\n  'finished_at',\n  'id',\n  'project_id',\n  'started_at',\n  'urls',\n  'user',\n];\n\nexport type ReplaySegment = {\n  dateAdded: string;\n  projectId: string;\n  replayId: string;\n  segmentId: number;\n};\n\n/**\n * Highlight Replay Plugin types\n */\nexport interface Highlight {\n  nodeId: number;\n  text: string;\n  color?: string;\n}\n\nexport type RecordingEvent = eventWithTime;\n\nexport interface ReplaySpan<T = Record<string, any>> {\n  data: T;\n  endTimestamp: number;\n  id: string;\n  op: string;\n  startTimestamp: number;\n  timestamp: number;\n  description?: string;\n}\n\nexport type MemorySpanType = ReplaySpan<{\n  memory: {\n    jsHeapSizeLimit: number;\n    totalJSHeapSize: number;\n    usedJSHeapSize: number;\n  };\n}>;\n\nexport type NetworkSpan = ReplaySpan;\n\ntype Overwrite<T, U> = Pick<T, Exclude<keyof T, keyof U>> & U;\n\nexport type ReplayCrumb = Overwrite<RawCrumb, {timestamp: number}>;\n\n/**\n * This is a result of a custom discover query\n */\nexport interface ReplayError {\n  ['error.type']: string[];\n  ['error.value']: string[]; // deprecated, use title instead. See organization_replay_events_meta.py\n  id: string;\n  issue: string;\n  ['issue.id']: number;\n  ['project.name']: string;\n  timestamp: string;\n  title: string;\n}\n"],"names":["DEFAULT_SORT","async","_ref","api","organization","location","eventView","path","slug","data","_textStatus","resp","requestPromise","includeAllArgs","query","getEventsAPIPayload","cursor","fetchError","undefined","pageLinks","getResponseHeader","replays","map","mapResponseToReplayRecord","error","responseJSON","detail","Sentry","useApi","setData","useState","isFetching","loadReplays","useCallback","clear","prev","response","fetchReplayList","useEffect","SortableHeader","props","useLocation","useOrganization","sort","label","tooltip","_jsxs","Header","children","_jsx","StyledQuestionTooltip","size","position","title","fieldName","arrowDirection","kind","sortArrow","IconArrow","color","direction","SortLink","role","field","endsWith","onClick","column","trackAdvancedAnalyticsEvent","to","pathname","displayName","_styled","target","name","styles","Link","QuestionTooltip","space","ReplayColumns","t","SessionCell","referrer","replay","projects","useProjects","project","find","p","id","project_id","UserBadge","avatarSize","generateQueryStringObject","user","display_name","username","email","ip_address","ip","displayEmail","StringWalker","urls","ProjectCell","_ref2","Item","ProjectBadge","TransactionCell","_ref3","hasTxEvent","txDuration","txEvent","SpanOperationBreakdown","spanOperationRelativeBreakdownRenderer","enableOnClick","StartedAtCell","_ref4","TimeSince","date","started_at","DurationCell","_ref5","Duration","seconds","duration","asSeconds","exact","abbreviation","ErrorCountCell","_ref6","count_errors","ActivityCell","_ref7","scoreBarPalette","Array","fill","CHART_PALETTE","ScoreBar","score","activity","palette","radius","theme","gray500","fontSizeMedium","ReplayTable","visibleColumns","routes","useRoutes","tableHeaders","HeaderCell","StyledPanelTable","headers","isLoading","StyledAlert","type","showIcon","getRouteStringFromRoutes","EventView","isEmpty","length","Fragment","PanelTable","join","Alert","REPLAY_LIST_FIELDS"],"sourceRoot":""}