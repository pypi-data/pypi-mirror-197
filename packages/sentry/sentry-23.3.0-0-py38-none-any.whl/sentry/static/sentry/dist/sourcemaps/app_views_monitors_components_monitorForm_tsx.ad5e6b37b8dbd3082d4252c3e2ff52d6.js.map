{"version":3,"file":"chunks/app_views_monitors_components_monitorForm_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/monitors/components/monitorForm.tsx","webpack:///./app/views/monitors/types.tsx","webpack:///./app/views/monitors/utils.tsx"],"sourcesContent":["import {useRef, useState} from 'react';\nimport styled from '@emotion/styled';\nimport {Observer} from 'mobx-react';\n\nimport Alert from 'sentry/components/alert';\nimport {RadioOption} from 'sentry/components/forms/controls/radioGroup';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport NumberField from 'sentry/components/forms/fields/numberField';\nimport RadioField from 'sentry/components/forms/fields/radioField';\nimport SelectField from 'sentry/components/forms/fields/selectField';\nimport SentryProjectSelectorField from 'sentry/components/forms/fields/sentryProjectSelectorField';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport FormModel from 'sentry/components/forms/model';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport Text from 'sentry/components/text';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport TimeSince from 'sentry/components/timeSince';\nimport {timezoneOptions} from 'sentry/data/timezones';\nimport {t, tct, tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {SelectValue} from 'sentry/types';\nimport commonTheme from 'sentry/utils/theme';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport useProjects from 'sentry/utils/useProjects';\nimport {crontabAsText} from 'sentry/views/monitors/utils';\n\nimport {\n  IntervalConfig,\n  Monitor,\n  MonitorConfig,\n  MonitorType,\n  ScheduleType,\n} from '../types';\n\nconst SCHEDULE_OPTIONS: RadioOption<string>[] = [\n  [ScheduleType.INTERVAL, t('Interval')],\n  [ScheduleType.CRONTAB, t('Crontab')],\n];\n\nconst DEFAULT_MONITOR_TYPE = 'cron_job';\n\nconst getIntervals = (n: number): SelectValue<string>[] => [\n  {value: 'minute', label: tn('minute', 'minutes', n)},\n  {value: 'hour', label: tn('hour', 'hours', n)},\n  {value: 'day', label: tn('day', 'days', n)},\n  {value: 'week', label: tn('week', 'weeks', n)},\n  {value: 'month', label: tn('month', 'months', n)},\n  {value: 'year', label: tn('year', 'years', n)},\n];\n\ntype Props = {\n  apiEndpoint: string;\n  apiMethod: FormProps['apiMethod'];\n  onSubmitSuccess: FormProps['onSubmitSuccess'];\n  monitor?: Monitor;\n  submitLabel?: string;\n};\n\ntype TransformedData = {\n  config?: Partial<MonitorConfig>;\n};\n\nfunction transformData(_data: Record<string, any>, model: FormModel) {\n  return model.fields.toJSON().reduce<TransformedData>((data, [k, v]) => {\n    // We're only concerned with transforming the config\n    if (!k.startsWith('config.')) {\n      data[k] = v;\n      return data;\n    }\n\n    // Default to empty object\n    data.config ??= {};\n\n    if (k === 'config.schedule.frequency' || k === 'config.schedule.interval') {\n      if (!Array.isArray(data.config.schedule)) {\n        data.config.schedule = [1, 'hour'];\n      }\n    }\n\n    if (Array.isArray(data.config.schedule) && k === 'config.schedule.frequency') {\n      data.config.schedule![0] = parseInt(v as string, 10);\n      return data;\n    }\n\n    if (Array.isArray(data.config.schedule) && k === 'config.schedule.interval') {\n      data.config.schedule![1] = v as IntervalConfig['schedule'][1];\n      return data;\n    }\n\n    data.config[k.substr(7)] = v;\n    return data;\n  }, {});\n}\n\nfunction MonitorForm({\n  monitor,\n  submitLabel,\n  apiEndpoint,\n  apiMethod,\n  onSubmitSuccess,\n}: Props) {\n  const form = useRef(new FormModel({transformData}));\n  const {projects} = useProjects();\n  const {selection} = usePageFilters();\n  const [crontabInput, setCrontabInput] = useState(\n    monitor?.config.schedule_type === ScheduleType.CRONTAB\n      ? monitor?.config.schedule\n      : null\n  );\n\n  function formDataFromConfig(type: MonitorType, config: MonitorConfig) {\n    const rv = {};\n    switch (type) {\n      case 'cron_job':\n        rv['config.schedule_type'] = config.schedule_type;\n        rv['config.checkin_margin'] = config.checkin_margin;\n        rv['config.max_runtime'] = config.max_runtime;\n\n        switch (config.schedule_type) {\n          case 'interval':\n            rv['config.schedule.frequency'] = config.schedule[0];\n            rv['config.schedule.interval'] = config.schedule[1];\n            break;\n          case 'crontab':\n          default:\n            rv['config.schedule'] = config.schedule;\n            rv['config.timezone'] = config.timezone;\n        }\n        break;\n      default:\n    }\n    return rv;\n  }\n\n  const selectedProjectId = selection.projects[0];\n  const selectedProject = selectedProjectId\n    ? projects.find(p => p.id === selectedProjectId + '')\n    : null;\n\n  const parsedSchedule = crontabAsText(crontabInput);\n\n  return (\n    <Form\n      allowUndo\n      requireChanges\n      apiEndpoint={apiEndpoint}\n      apiMethod={apiMethod}\n      model={form.current}\n      initialData={\n        monitor\n          ? {\n              name: monitor.name,\n              type: monitor.type ?? DEFAULT_MONITOR_TYPE,\n              project: monitor.project.slug,\n              ...formDataFromConfig(monitor.type, monitor.config),\n            }\n          : {\n              project: selectedProject ? selectedProject.slug : null,\n              type: DEFAULT_MONITOR_TYPE,\n            }\n      }\n      onSubmitSuccess={onSubmitSuccess}\n      submitLabel={submitLabel}\n    >\n      <StyledList symbol=\"colored-numeric\">\n        <StyledListItem>{t('Add a name and project')}</StyledListItem>\n        <ListItemSubText>\n          {t('The monitor name will show up in alerts and notifications')}\n        </ListItemSubText>\n        <InputGroup>\n          <StyledTextField\n            name=\"name\"\n            placeholder={t('My Cron Job')}\n            required\n            stacked\n            inline={false}\n          />\n          <StyledSentryProjectSelectorField\n            name=\"project\"\n            projects={projects.filter(project => project.isMember)}\n            disabled={!!monitor}\n            disabledReason={t('Existing monitors cannot be moved between projects')}\n            valueIsSlug\n            required\n            stacked\n            inline={false}\n          />\n          {monitor && (\n            <StyledFieldGroup flexibleControlStateSize stacked inline={false}>\n              <StyledTextCopyInput>{monitor.slug}</StyledTextCopyInput>\n            </StyledFieldGroup>\n          )}\n        </InputGroup>\n\n        <StyledListItem>{t('Choose your schedule type')}</StyledListItem>\n        <ListItemSubText>\n          {tct('You can use our simple schedule or [link:the crontab syntax].', {\n            link: <ExternalLink href=\"https://en.wikipedia.org/wiki/Cron\" />,\n          })}\n        </ListItemSubText>\n        <InputGroup>\n          <RadioField\n            name=\"config.schedule_type\"\n            choices={SCHEDULE_OPTIONS}\n            defaultValue={ScheduleType.CRONTAB}\n            orientInline\n            required\n            stacked\n            inline={false}\n          />\n        </InputGroup>\n        <StyledListItem>{t('Choose your schedule')}</StyledListItem>\n        <ListItemSubText>\n          {t('How often you expect your recurring jobs to run.')}\n        </ListItemSubText>\n        <InputGroup>\n          {monitor !== undefined && monitor.nextCheckIn && (\n            <Alert type=\"info\">\n              {tct(\n                'Any changes you make to the execution schedule will only be applied after the next expected check-in [nextCheckin].',\n                {\n                  nextCheckin: (\n                    <strong>\n                      <TimeSince date={monitor.nextCheckIn} />\n                    </strong>\n                  ),\n                }\n              )}\n            </Alert>\n          )}\n          <Observer>\n            {() => {\n              const schedule_type = form.current.getValue('config.schedule_type');\n              if (schedule_type === 'crontab') {\n                return (\n                  <ScheduleGroupInputs>\n                    <StyledTextField\n                      name=\"config.schedule\"\n                      placeholder=\"*/5 * * * *\"\n                      css={{input: {fontFamily: commonTheme.text.familyMono}}}\n                      required\n                      stacked\n                      onChange={setCrontabInput}\n                      inline={false}\n                    />\n                    <StyledSelectField\n                      name=\"config.timezone\"\n                      defaultValue=\"UTC\"\n                      options={timezoneOptions}\n                      required\n                      stacked\n                      inline={false}\n                    />\n                    {parsedSchedule && <CronstrueText>\"{parsedSchedule}\"</CronstrueText>}\n                  </ScheduleGroupInputs>\n                );\n              }\n              if (schedule_type === 'interval') {\n                return (\n                  <ScheduleGroupInputs interval>\n                    <LabelText>{t('Every')}</LabelText>\n                    <StyledNumberField\n                      name=\"config.schedule.frequency\"\n                      placeholder=\"e.g. 1\"\n                      required\n                      stacked\n                      inline={false}\n                    />\n                    <StyledSelectField\n                      name=\"config.schedule.interval\"\n                      options={getIntervals(\n                        Number(form.current.getValue('config.schedule.frequency') ?? 1)\n                      )}\n                      required\n                      stacked\n                      inline={false}\n                    />\n                  </ScheduleGroupInputs>\n                );\n              }\n              return null;\n            }}\n          </Observer>\n        </InputGroup>\n        <StyledListItem>{t('Set a missed status')}</StyledListItem>\n        <ListItemSubText>\n          {t('How long to wait before we consider a check-in as missed.')}\n        </ListItemSubText>\n        <InputGroup>\n          <LabeledInputs>\n            <StyledNumberField\n              name=\"config.checkin_margin\"\n              placeholder=\"e.g. 30\"\n              stacked\n              inline={false}\n            />\n            <LabelText>{t('Minutes')}</LabelText>\n          </LabeledInputs>\n        </InputGroup>\n        <StyledListItem>{t('Set a failed status')}</StyledListItem>\n        <ListItemSubText>\n          {t(\n            \"How long a check-in is allowed to run before it's considered failed. If the job encounters an error it will also fail.\"\n          )}\n        </ListItemSubText>\n        <InputGroup>\n          <LabeledInputs>\n            <StyledNumberField\n              name=\"config.max_runtime\"\n              placeholder=\"e.g. 30\"\n              stacked\n              inline={false}\n            />\n            <LabelText>{t('Minutes')}</LabelText>\n          </LabeledInputs>\n        </InputGroup>\n      </StyledList>\n    </Form>\n  );\n}\n\nexport default MonitorForm;\n\nconst StyledList = styled(List)`\n  width: 500px;\n`;\n\nconst StyledTextCopyInput = styled(TextCopyInput)`\n  padding: 0;\n`;\n\nconst StyledNumberField = styled(NumberField)`\n  padding: 0;\n`;\n\nconst StyledSelectField = styled(SelectField)`\n  padding: 0;\n`;\n\nconst StyledFieldGroup = styled(FieldGroup)`\n  padding: 0;\n`;\n\nconst StyledTextField = styled(TextField)`\n  padding: 0;\n`;\n\nconst StyledSentryProjectSelectorField = styled(SentryProjectSelectorField)`\n  padding: 0;\n`;\n\nconst StyledListItem = styled(ListItem)`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  font-weight: bold;\n  line-height: 1.3;\n`;\n\nconst LabelText = styled(Text)`\n  font-weight: bold;\n  color: ${p => p.theme.subText};\n`;\n\nconst ListItemSubText = styled(LabelText)`\n  font-weight: normal;\n  padding-left: ${space(4)};\n`;\n\nconst InputGroup = styled('div')`\n  padding-left: ${space(4)};\n  margin-top: ${space(1)};\n  margin-bottom: ${space(4)};\n  display: flex;\n  flex-direction: column;\n  gap: ${space(1)};\n`;\n\nconst LabeledInputs = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr auto;\n  align-items: center;\n  gap: ${space(1)};\n`;\n\nconst ScheduleGroupInputs = styled(LabeledInputs)<{interval?: boolean}>`\n  grid-template-columns: ${p => p.interval && 'auto'} 1fr 2fr;\n`;\n\nconst CronstrueText = styled(LabelText)`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  font-family: ${p => p.theme.text.familyMono};\n  grid-column: auto / span 2;\n`;\n","import {Project} from 'sentry/types';\n\nexport enum MonitorType {\n  UNKNOWN = 'unknown',\n  CRON_JOB = 'cron_job',\n}\n\n/**\n * Some old monitor configuratiosn do NOT have a schedule_type\n *\n * TODO: This should be removed once we've cleaned up our old data and can\n *       verify we don't have any config objects missing schedule_type\n */\ntype LegacyDefaultSchedule = undefined;\n\nexport enum ScheduleType {\n  CRONTAB = 'crontab',\n  INTERVAL = 'interval',\n}\n\nexport enum MonitorStatus {\n  OK = 'ok',\n  ERROR = 'error',\n  DISABLED = 'disabled',\n  ACTIVE = 'active',\n  MISSED_CHECKIN = 'missed_checkin',\n}\n\nexport enum CheckInStatus {\n  OK = 'ok',\n  ERROR = 'error',\n  IN_PROGRESS = 'in_progress',\n  MISSED = 'missed',\n}\n\ninterface BaseConfig {\n  checkin_margin: number;\n  max_runtime: number;\n  timezone: string;\n}\n\n/**\n * The configuration object used when the schedule is a CRONTAB\n */\nexport interface CrontabConfig extends BaseConfig {\n  /**\n   * The crontab schedule\n   */\n  schedule: string;\n  schedule_type: ScheduleType.CRONTAB | LegacyDefaultSchedule;\n}\n\n/**\n * The configuration object used when the schedule is an INTERVAL\n */\nexport interface IntervalConfig extends BaseConfig {\n  /**\n   * The interval style schedule\n   */\n  schedule: [\n    value: number,\n    interval: 'year' | 'month' | 'week' | 'day' | 'hour' | 'minute'\n  ];\n  schedule_type: ScheduleType.INTERVAL;\n}\n\nexport type MonitorConfig = CrontabConfig | IntervalConfig;\n\nexport interface Monitor {\n  config: MonitorConfig;\n  dateCreated: string;\n  id: string;\n  lastCheckIn: string;\n  name: string;\n  nextCheckIn: string;\n  project: Project;\n  slug: string;\n  status: MonitorStatus;\n  type: MonitorType;\n}\n\nexport interface MonitorStat {\n  duration: number;\n  error: number;\n  missed: number;\n  ok: number;\n  ts: number;\n}\n","import cronstrue from 'cronstrue';\n\nimport {shouldUse24Hours} from 'sentry/utils/dates';\n\nexport function crontabAsText(crontabInput: string | null): string | null {\n  if (!crontabInput) {\n    return null;\n  }\n  let parsedSchedule: string;\n  try {\n    parsedSchedule = cronstrue.toString(crontabInput, {\n      verbose: true,\n      use24HourTimeFormat: shouldUse24Hours(),\n    });\n  } catch (_e) {\n    return null;\n  }\n\n  return parsedSchedule;\n}\n"],"names":["SCHEDULE_OPTIONS","ScheduleType","t","DEFAULT_MONITOR_TYPE","transformData","_data","model","fields","toJSON","reduce","data","_ref","k","v","startsWith","config","Array","isArray","schedule","parseInt","substr","MonitorForm","_ref2","monitor","submitLabel","apiEndpoint","apiMethod","onSubmitSuccess","form","useRef","FormModel","projects","useProjects","selection","usePageFilters","crontabInput","setCrontabInput","useState","schedule_type","selectedProjectId","selectedProject","find","p","id","parsedSchedule","crontabAsText","_jsx","Form","allowUndo","requireChanges","current","initialData","name","type","project","slug","rv","checkin_margin","max_runtime","timezone","formDataFromConfig","children","_jsxs","StyledList","symbol","StyledListItem","ListItemSubText","InputGroup","StyledTextField","placeholder","required","stacked","inline","StyledSentryProjectSelectorField","filter","isMember","disabled","disabledReason","valueIsSlug","StyledFieldGroup","flexibleControlStateSize","StyledTextCopyInput","tct","link","ExternalLink","href","RadioField","choices","defaultValue","orientInline","undefined","nextCheckIn","Alert","nextCheckin","TimeSince","date","Observer","getValue","ScheduleGroupInputs","css","_css","input","fontFamily","commonTheme","onChange","StyledSelectField","options","timezoneOptions","CronstrueText","interval","LabelText","StyledNumberField","n","Number","value","label","tn","LabeledInputs","displayName","_styled","List","target","styles","TextCopyInput","NumberField","SelectField","FieldGroup","TextField","SentryProjectSelectorField","ListItem","theme","fontSizeExtraLarge","Text","subText","space","fontSizeExtraSmall","text","familyMono","MonitorType","MonitorStatus","CheckInStatus","cronstrue","verbose","use24HourTimeFormat","shouldUse24Hours","_e"],"sourceRoot":""}