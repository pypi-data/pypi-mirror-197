{"version":3,"file":"chunks/app_components_charts_loadingPanel_tsx-app_components_events_searchBar_tsx-app_views_performa-33c6cd.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/loadingPanel.tsx","webpack:///./app/components/events/searchBar.tsx","webpack:///./app/components/loadingMask.tsx","webpack:///./app/utils/performance/segmentExplorer/segmentExplorerQuery.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/tagExplorer.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport LoadingMask from 'sentry/components/loadingMask';\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  height?: string;\n}\n\nconst LoadingPanel = styled(({height: _height, ...props}: Props) => (\n  <div {...props}>\n    <LoadingMask />\n  </div>\n))`\n  flex: 1;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: ${p => p.height};\n  position: relative;\n  border-color: transparent;\n  margin-bottom: 0;\n`;\n\nLoadingPanel.defaultProps = {\n  height: '200px',\n};\n\nexport default LoadingPanel;\n","import {useEffect, useMemo} from 'react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {CustomMeasurementCollection} from 'sentry/utils/customMeasurements/customMeasurements';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport {FieldKey, FieldKind} from 'sentry/utils/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\nimport {isCustomMeasurement} from 'sentry/views/dashboards/utils';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nconst STATIC_FIELD_TAGS_SET = new Set(Object.keys(FIELD_TAGS));\nconst getFunctionTags = (fields: Readonly<Field[]> | undefined) => {\n  if (!fields?.length) {\n    return [];\n  }\n  return fields.reduce((acc, item) => {\n    if (\n      !STATIC_FIELD_TAGS_SET.has(item.field) &&\n      !isEquation(item.field) &&\n      !isCustomMeasurement(item.field)\n    ) {\n      acc[item.field] = {key: item.field, name: item.field, kind: FieldKind.FUNCTION};\n    }\n\n    return acc;\n  }, {});\n};\n\nconst getMeasurementTags = (\n  measurements: Parameters<\n    React.ComponentProps<typeof Measurements>['children']\n  >[0]['measurements'],\n  customMeasurements:\n    | Parameters<React.ComponentProps<typeof Measurements>['children']>[0]['measurements']\n    | undefined\n) => {\n  const measurementsWithKind = Object.keys(measurements).reduce((tags, key) => {\n    tags[key] = {\n      ...measurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, {});\n\n  if (!customMeasurements) {\n    return measurementsWithKind;\n  }\n\n  return Object.keys(customMeasurements).reduce((tags, key) => {\n    tags[key] = {\n      ...customMeasurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, measurementsWithKind);\n};\n\nconst STATIC_FIELD_TAGS = Object.keys(FIELD_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...FIELD_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nconst STATIC_FIELD_TAGS_WITHOUT_TRACING = omit(STATIC_FIELD_TAGS, TRACING_FIELDS);\n\nconst STATIC_SPAN_TAGS = SPAN_OP_BREAKDOWN_FIELDS.reduce((tags, key) => {\n  tags[key] = {name: key, kind: FieldKind.METRICS};\n  return tags;\n}, {});\n\nconst STATIC_SEMVER_TAGS = Object.keys(SEMVER_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...SEMVER_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  customMeasurements?: CustomMeasurementCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n    customMeasurements,\n  } = props;\n\n  const api = useApi();\n\n  const functionTags = useMemo(() => getFunctionTags(fields), [fields]);\n  const tagsWithKind = useMemo(() => {\n    return Object.keys(tags).reduce((acc, key) => {\n      acc[key] = {\n        ...tags[key],\n        kind: FieldKind.TAG,\n      };\n      return acc;\n    }, {});\n  }, [tags]);\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues({\n        api,\n        orgSlug: organization.slug,\n        tagKey: tag.key,\n        search: query,\n        projectIds: projectIdStrings,\n        endpointParams,\n        // allows searching for tags on transactions as well\n        includeTransactions: true,\n        // allows searching for tags on sessions as well\n        includeSessions: includeSessionTagsValues,\n      }).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    const measurementsWithKind = getMeasurementTags(measurements, customMeasurements);\n    const orgHasPerformanceView = organization.features.includes('performance-view');\n\n    const combinedTags: TagCollection = orgHasPerformanceView\n      ? Object.assign(\n          {},\n          measurementsWithKind,\n          functionTags,\n          STATIC_SPAN_TAGS,\n          STATIC_FIELD_TAGS\n        )\n      : Object.assign({}, STATIC_FIELD_TAGS_WITHOUT_TRACING);\n\n    assign(combinedTags, tagsWithKind, STATIC_FIELD_TAGS, STATIC_SEMVER_TAGS);\n\n    combinedTags.has = {\n      key: FieldKey.HAS,\n      name: 'Has property',\n      values: Object.keys(combinedTags).sort((a, b) => {\n        return a.toLowerCase().localeCompare(b.toLowerCase());\n      }),\n      predefined: true,\n      kind: FieldKind.FIELD,\n    };\n\n    const list =\n      omitTags && omitTags.length > 0 ? omit(combinedTags, omitTags) : combinedTags;\n    return list;\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludedTags={[FieldKey.ENVIRONMENT, FieldKey.TOTAL_COUNT]}\n          maxMenuHeight={maxMenuHeight ?? 300}\n          customPerformanceMetrics={customMeasurements}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import styled from '@emotion/styled';\n\nexport interface LoadingMaskProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst LoadingMask = styled('div')<LoadingMaskProps>`\n  background-color: ${p => p.theme.backgroundSecondary};\n  border-radius: ${p => p.theme.borderRadius};\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nexport default LoadingMask;\n","import {EventQuery} from 'sentry/actionCreators/events';\nimport {LocationQuery} from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\n/**\n * An individual row in a Segment explorer result\n */\nexport type TableDataRow = {\n  aggregate: number;\n  comparison: number;\n  count: number;\n  frequency: number;\n  sumdelta: number;\n  tags_key: string;\n  tags_value: string;\n};\n\nexport type TableData = {\n  data: TableDataRow[];\n  meta: {};\n};\n\n/**\n * A Segment Explorer result including rows and metadata.\n */\n\ntype ChildrenProps = Omit<GenericChildrenProps<TableData>, 'tableData'> & {\n  tableData: TableData | null;\n};\n\ntype QueryProps = DiscoverQueryProps & {\n  aggregateColumn: string;\n  children: (props: ChildrenProps) => React.ReactNode;\n  allTagKeys?: boolean;\n  sort?: string | string[];\n  tagKey?: string;\n};\n\ntype FacetQuery = LocationQuery &\n  EventQuery & {\n    aggregateColumn?: string;\n    allTagKeys?: boolean;\n    sort?: string | string[];\n    tagKey?: string;\n  };\n\nexport function getRequestFunction(_props: QueryProps) {\n  const {aggregateColumn} = _props;\n  function getTagExplorerRequestPayload(props: DiscoverQueryProps) {\n    const {eventView} = props;\n    const apiPayload: FacetQuery = eventView.getEventsAPIPayload(props.location);\n    apiPayload.aggregateColumn = aggregateColumn;\n    apiPayload.sort = _props.sort ? _props.sort : apiPayload.sort;\n    if (_props.allTagKeys) {\n      apiPayload.allTagKeys = _props.allTagKeys;\n    }\n    if (_props.tagKey) {\n      apiPayload.tagKey = _props.tagKey;\n    }\n    return apiPayload;\n  }\n  return getTagExplorerRequestPayload;\n}\n\nfunction shouldRefetchData(prevProps: QueryProps, nextProps: QueryProps) {\n  return (\n    prevProps.aggregateColumn !== nextProps.aggregateColumn ||\n    prevProps.sort !== nextProps.sort ||\n    prevProps.allTagKeys !== nextProps.allTagKeys ||\n    prevProps.tagKey !== nextProps.tagKey\n  );\n}\n\nfunction SegmentExplorerQuery(props: QueryProps) {\n  return (\n    <GenericDiscoverQuery<TableData, QueryProps>\n      route=\"events-facets-performance\"\n      getRequestPayload={getRequestFunction(props)}\n      shouldRefetchData={shouldRefetchData}\n      {...props}\n    />\n  );\n}\n\nexport default SegmentExplorerQuery;\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getState(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptorObject} from 'history';\n\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport {Button} from 'sentry/components/button';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumn,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport PerformanceDuration from 'sentry/components/performanceDuration';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView, {fromSorts, isFieldSortable} from 'sentry/utils/discover/eventView';\nimport {fieldAlignment} from 'sentry/utils/discover/fields';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport SegmentExplorerQuery, {\n  TableData,\n  TableDataRow,\n} from 'sentry/utils/performance/segmentExplorer/segmentExplorerQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport CellAction, {Actions, updateQuery} from 'sentry/views/discover/table/cellAction';\nimport {TableColumn} from 'sentry/views/discover/table/types';\n\nimport {\n  platformAndConditionsToPerformanceType,\n  PROJECT_PERFORMANCE_TYPE,\n} from '../../utils';\nimport {\n  SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD,\n  SpanOperationBreakdownFilter,\n} from '../filter';\nimport {tagsRouteWithQuery} from '../transactionTags/utils';\nimport {normalizeSearchConditions} from '../utils';\n\nconst TAGS_CURSOR_NAME = 'tags_cursor';\n\ntype ColumnKeys =\n  | 'key'\n  | 'tagValue'\n  | 'aggregate'\n  | 'frequency'\n  | 'comparison'\n  | 'sumdelta';\ntype TagColumn = GridColumnOrder<ColumnKeys> & {\n  column: {\n    kind: string;\n  };\n  field: string;\n  canSort?: boolean;\n};\nconst COLUMN_ORDER: TagColumn[] = [\n  {\n    key: 'key',\n    field: 'key',\n    name: 'Tag Key',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'tagValue',\n    field: 'tagValue',\n    name: 'Tag Values',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'aggregate',\n    field: 'aggregate',\n    name: 'Avg Duration',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'frequency',\n    field: 'frequency',\n    name: 'Frequency',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'comparison',\n    field: 'comparison',\n    name: 'Compared To Avg',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'sumdelta',\n    field: 'sumdelta',\n    name: 'Total Time Lost',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n];\n\nexport const getTransactionField = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const fieldFromFilter = SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD[currentFilter];\n  if (fieldFromFilter) {\n    return fieldFromFilter;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    return 'measurements.lcp';\n  }\n\n  return 'transaction.duration';\n};\n\nconst getColumnsWithReplacedDuration = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const columns = COLUMN_ORDER.map(c => ({...c}));\n  const durationColumn = columns.find(c => c.key === 'aggregate');\n\n  if (!durationColumn) {\n    return columns;\n  }\n\n  const fieldFromFilter = SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD[currentFilter];\n  if (fieldFromFilter) {\n    durationColumn.name = 'Avg Span Duration';\n    return columns;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    durationColumn.name = 'Avg LCP';\n    return columns;\n  }\n\n  return columns;\n};\n\ntype TagValueProps = {\n  row: TableDataRow;\n};\n\nexport function TagValue(props: TagValueProps) {\n  return <div className=\"truncate\">{props.row.tags_value}</div>;\n}\n\ntype Props = {\n  currentFilter: SpanOperationBreakdownFilter;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n};\n\ntype State = {\n  widths: number[];\n};\nexport class TagExplorer extends Component<Props> {\n  state: State = {\n    widths: [],\n  };\n\n  handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {\n    const widths: number[] = [...this.state.widths];\n    widths[columnIndex] = nextColumn.width\n      ? Number(nextColumn.width)\n      : COL_WIDTH_UNDEFINED;\n    this.setState({widths});\n  };\n\n  getColumnOrder = (columns: GridColumnOrder[]) => {\n    const {widths} = this.state;\n    return columns.map((col: GridColumnOrder, i: number) => {\n      if (typeof widths[i] === 'number') {\n        return {...col, width: widths[i]};\n      }\n      return col;\n    });\n  };\n\n  onSortClick(currentSortKind?: string, currentSortField?: string) {\n    const {organization} = this.props;\n    trackAdvancedAnalyticsEvent('performance_views.summary.tag_explorer.sort', {\n      organization,\n      field: currentSortField,\n      direction: currentSortKind,\n    });\n  }\n\n  renderHeadCell(\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    column: TableColumn<ColumnKeys>,\n    columnInfo: TagColumn\n  ): React.ReactNode {\n    const {location} = this.props;\n    const align = fieldAlignment(column.key, column.type, tableMeta);\n    const field = {field: column.key, width: column.width};\n\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!tableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = sortedEventView.sortOnField(field, tableMeta);\n      const {sort} = nextEventView.generateQueryStringObject();\n\n      return {\n        ...location,\n        query: {...location.query, [TAGS_CURSOR_NAME]: undefined, tagSort: sort},\n      };\n    }\n    const currentSort = sortedEventView.sortForField(field, tableMeta);\n    const canSort = isFieldSortable(field, tableMeta);\n\n    const currentSortKind = currentSort ? currentSort.kind : undefined;\n    const currentSortField = currentSort ? currentSort.field : undefined;\n\n    return (\n      <SortLink\n        align={align}\n        title={columnInfo.name}\n        direction={currentSortKind}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n        onClick={() => this.onSortClick(currentSortKind, currentSortField)}\n      />\n    );\n  }\n\n  renderHeadCellWithMeta = (\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    columns: TagColumn[]\n  ) => {\n    return (column: TableColumn<ColumnKeys>, index: number): React.ReactNode =>\n      this.renderHeadCell(sortedEventView, tableMeta, column, columns[index]);\n  };\n\n  handleTagValueClick = (location: Location, tagKey: string, tagValue: string) => {\n    const {organization} = this.props;\n    trackAdvancedAnalyticsEvent('performance_views.summary.tag_explorer.tag_value', {\n      organization,\n    });\n\n    const queryString = decodeScalar(location.query.query);\n    const conditions = new MutableSearch(queryString ?? '');\n\n    conditions.addFilterValues(tagKey, [tagValue]);\n\n    const query = conditions.formatString();\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        query: String(query).trim(),\n      },\n    });\n  };\n\n  handleCellAction = (\n    column: TableColumn<ColumnKeys>,\n    tagValue: React.ReactText,\n    actionRow: any\n  ) => {\n    return (action: Actions) => {\n      const {eventView, location, organization} = this.props;\n      trackAdvancedAnalyticsEvent('performance_views.summary.tag_explorer.cell_action', {\n        organization,\n      });\n\n      const searchConditions = normalizeSearchConditions(eventView.query);\n\n      updateQuery(searchConditions, action, {...column, name: actionRow.id}, tagValue);\n\n      browserHistory.push({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          [TAGS_CURSOR_NAME]: undefined,\n          query: searchConditions.formatString(),\n        },\n      });\n    };\n  };\n\n  onTagKeyClick() {\n    const {organization} = this.props;\n    trackAdvancedAnalyticsEvent('performance_views.summary.tag_explorer.visit_tag_key', {\n      organization,\n    });\n  }\n\n  renderBodyCell = (\n    parentProps: Props,\n    column: TableColumn<ColumnKeys>,\n    dataRow: TableDataRow\n  ): React.ReactNode => {\n    const value = dataRow[column.key];\n    const {location, organization, transactionName} = parentProps;\n\n    if (column.key === 'key') {\n      const target = tagsRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction: transactionName,\n        projectID: decodeScalar(location.query.project),\n        query: {...location.query, tagKey: dataRow.tags_key},\n      });\n      return (\n        <Link to={target} onClick={() => this.onTagKeyClick()}>\n          {dataRow.tags_key}\n        </Link>\n      );\n    }\n\n    const allowActions = [Actions.ADD, Actions.EXCLUDE];\n\n    if (column.key === 'tagValue') {\n      const actionRow = {...dataRow, id: dataRow.tags_key};\n      return (\n        <CellAction\n          column={column}\n          dataRow={actionRow}\n          handleCellAction={this.handleCellAction(column, dataRow.tags_value, actionRow)}\n          allowActions={allowActions}\n        >\n          <div className=\"truncate\">{dataRow.tags_value}</div>\n        </CellAction>\n      );\n    }\n\n    if (column.key === 'frequency') {\n      return <AlignRight>{formatPercentage(dataRow.frequency, 0)}</AlignRight>;\n    }\n\n    if (column.key === 'comparison') {\n      const localValue = dataRow.comparison;\n      const pct = formatPercentage(localValue - 1, 0);\n      return (\n        <AlignRight>\n          {localValue > 1 ? t('+%s slower', pct) : t('%s faster', pct)}\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'aggregate') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.aggregate} />\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'sumdelta') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.sumdelta} />\n        </AlignRight>\n      );\n    }\n    return value;\n  };\n\n  renderBodyCellWithData = (parentProps: Props) => {\n    return (column: TableColumn<ColumnKeys>, dataRow: TableDataRow): React.ReactNode =>\n      this.renderBodyCell(parentProps, column, dataRow);\n  };\n\n  render() {\n    const {eventView, organization, location, currentFilter, projects, transactionName} =\n      this.props;\n\n    const tagSort = decodeScalar(location.query?.tagSort);\n    const cursor = decodeScalar(location.query?.[TAGS_CURSOR_NAME]);\n\n    const tagEventView = eventView.clone();\n    tagEventView.fields = COLUMN_ORDER;\n\n    const tagSorts = fromSorts(tagSort);\n\n    const sortedEventView = tagEventView.withSorts(\n      tagSorts.length\n        ? tagSorts\n        : [\n            {\n              field: 'sumdelta',\n              kind: 'desc',\n            },\n          ]\n    );\n\n    const aggregateColumn = getTransactionField(currentFilter, projects, sortedEventView);\n\n    const adjustedColumns = getColumnsWithReplacedDuration(\n      currentFilter,\n      projects,\n      sortedEventView\n    );\n    const columns = this.getColumnOrder(adjustedColumns);\n\n    const columnSortBy = sortedEventView.getSorts();\n\n    return (\n      <SegmentExplorerQuery\n        eventView={sortedEventView}\n        orgSlug={organization.slug}\n        location={location}\n        aggregateColumn={aggregateColumn}\n        limit={5}\n        cursor={cursor}\n      >\n        {({isLoading, tableData, pageLinks}) => {\n          return (\n            <Fragment>\n              <GuideAnchor target=\"tag_explorer\">\n                <TagsHeader\n                  transactionName={transactionName}\n                  location={location}\n                  organization={organization}\n                  pageLinks={pageLinks}\n                />\n              </GuideAnchor>\n              <GridEditable\n                isLoading={isLoading}\n                data={tableData && tableData.data ? tableData.data : []}\n                columnOrder={columns}\n                columnSortBy={columnSortBy}\n                grid={{\n                  renderHeadCell: this.renderHeadCellWithMeta(\n                    sortedEventView,\n                    tableData?.meta || {},\n                    adjustedColumns\n                  ) as any,\n                  renderBodyCell: this.renderBodyCellWithData(this.props) as any,\n                  onResizeColumn: this.handleResizeColumn as any,\n                }}\n                location={location}\n              />\n            </Fragment>\n          );\n        }}\n      </SegmentExplorerQuery>\n    );\n  }\n}\n\ntype HeaderProps = {\n  location: Location;\n  organization: Organization;\n  pageLinks: string | null;\n  transactionName: string;\n};\n\nfunction TagsHeader(props: HeaderProps) {\n  const {pageLinks, organization, location, transactionName} = props;\n\n  const handleCursor: CursorHandler = (cursor, pathname, query) => {\n    trackAdvancedAnalyticsEvent('performance_views.summary.tag_explorer.change_page', {\n      organization,\n    });\n    browserHistory.push({\n      pathname,\n      query: {...query, [TAGS_CURSOR_NAME]: cursor},\n    });\n  };\n\n  const handleViewAllTagsClick = () => {\n    trackAdvancedAnalyticsEvent('performance_views.summary.tag_explorer.change_page', {\n      organization,\n    });\n  };\n\n  const viewAllTarget = tagsRouteWithQuery({\n    orgSlug: organization.slug,\n    transaction: transactionName,\n    projectID: decodeScalar(location.query.project),\n    query: {...location.query},\n  });\n\n  return (\n    <Header>\n      <div>\n        <SectionHeading>{t('Suspect Tags')}</SectionHeading>\n      </div>\n      <Button\n        onClick={handleViewAllTagsClick}\n        to={viewAllTarget}\n        size=\"xs\"\n        data-test-id=\"tags-explorer-open-tags\"\n      >\n        {t('View All Tags')}\n      </Button>\n      <StyledPagination pageLinks={pageLinks} onCursor={handleCursor} size=\"xs\" />\n    </Header>\n  );\n}\n\nconst AlignRight = styled('div')`\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n  width: 100%;\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr auto auto;\n  margin-bottom: ${space(1)};\n  align-items: center;\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0 0 0 ${space(1)};\n`;\n"],"names":["LoadingPanel","_styled","_ref","height","_height","props","_jsx","children","LoadingMask","target","p","defaultProps","SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","STATIC_FIELD_TAGS_SET","Set","Object","keys","FIELD_TAGS","STATIC_FIELD_TAGS","reduce","tags","key","kind","FieldKind","STATIC_FIELD_TAGS_WITHOUT_TRACING","omit","TRACING_FIELDS","STATIC_SPAN_TAGS","SPAN_OP_BREAKDOWN_FIELDS","name","STATIC_SEMVER_TAGS","SEMVER_TAGS","SearchBar","maxSearchItems","organization","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","customMeasurements","api","useApi","functionTags","useMemo","length","acc","item","has","field","isEquation","isCustomMeasurement","getFunctionTags","tagsWithKind","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","isMeasurement","Promise","resolve","fetchTagValues","orgSlug","slug","tagKey","search","includeTransactions","includeSessions","then","results","flatten","filter","defined","_ref2","Error","_ref3","getTagList","measurements","measurementsWithKind","getMeasurementTags","combinedTags","features","includes","assign","FieldKey","values","sort","a","b","toLowerCase","localeCompare","predefined","Measurements","_ref4","SmartSearchBar","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","replace","excludedTags","customPerformanceMetrics","displayName","withTags","theme","backgroundSecondary","borderRadius","getRequestFunction","_props","aggregateColumn","eventView","apiPayload","getEventsAPIPayload","location","allTagKeys","shouldRefetchData","prevProps","nextProps","SegmentExplorerQuery","GenericDiscoverQuery","route","getRequestPayload","WrappedComponent","WithTags","Component","constructor","arguments","_defineProperty","TagStore","this","setState","undefined","componentWillUnmount","unsubscribe","render","state","getDisplayName","TAGS_CURSOR_NAME","COLUMN_ORDER","width","column","canSort","getTransactionField","currentFilter","projects","fieldFromFilter","SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD","platformAndConditionsToPerformanceType","PROJECT_PERFORMANCE_TYPE","TagValue","className","row","tags_value","TagExplorer","widths","columnIndex","nextColumn","Number","COL_WIDTH_UNDEFINED","columns","col","i","sortedEventView","tableMeta","index","renderHeadCell","tagValue","trackAdvancedAnalyticsEvent","queryString","decodeScalar","conditions","MutableSearch","addFilterValues","formatString","browserHistory","pathname","trim","actionRow","action","searchConditions","normalizeSearchConditions","updateQuery","id","parentProps","dataRow","value","transactionName","tagsRouteWithQuery","transaction","projectID","project","tags_key","Link","to","onClick","onTagKeyClick","allowActions","Actions","CellAction","handleCellAction","AlignRight","formatPercentage","frequency","localValue","comparison","pct","t","PerformanceDuration","abbreviation","milliseconds","aggregate","sumdelta","renderBodyCell","onSortClick","currentSortKind","currentSortField","direction","columnInfo","align","fieldAlignment","type","currentSort","sortForField","isFieldSortable","SortLink","title","generateSortLink","nextEventView","sortOnField","generateQueryStringObject","tagSort","cursor","tagEventView","clone","tagSorts","fromSorts","withSorts","adjustedColumns","getColumnsWithReplacedDuration","c","durationColumn","find","getColumnOrder","columnSortBy","getSorts","limit","isLoading","tableData","pageLinks","_jsxs","Fragment","GuideAnchor","TagsHeader","GridEditable","data","columnOrder","grid","renderHeadCellWithMeta","meta","renderBodyCellWithData","onResizeColumn","handleResizeColumn","viewAllTarget","Header","SectionHeading","Button","handleViewAllTagsClick","size","StyledPagination","onCursor","handleCursor","styles","space","Pagination"],"sourceRoot":""}