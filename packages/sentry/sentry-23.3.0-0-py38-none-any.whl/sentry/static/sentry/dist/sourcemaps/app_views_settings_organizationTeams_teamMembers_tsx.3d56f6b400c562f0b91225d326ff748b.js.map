{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamMembers_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/roleSelectControl.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationTeams/roleOverwriteWarning.tsx","webpack:///./app/views/settings/organizationTeams/teamMembersRow.tsx","webpack:///./app/views/settings/organizationTeams/teamMembers.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport SelectControl, {\n  ControlProps,\n} from 'sentry/components/forms/controls/selectControl';\nimport {MemberRole} from 'sentry/types';\n\ntype OptionType = {\n  details: React.ReactNode;\n  disabled: boolean;\n  label: string;\n  value: string;\n};\n\ntype Props = Omit<ControlProps<OptionType>, 'onChange' | 'value'> & {\n  disableUnallowed: boolean;\n  roles: MemberRole[];\n  /**\n   * Narrower type than SelectControl because there is no empty value\n   */\n  onChange?: (value: OptionType) => void;\n  value?: string | null;\n};\n\nfunction RoleSelectControl({roles, disableUnallowed, ...props}: Props) {\n  return (\n    <SelectControl\n      options={roles?.map(\n        (r: MemberRole) =>\n          ({\n            value: r.id,\n            label: r.name,\n            disabled: (disableUnallowed && !r.allowed) || r.isRetired,\n            details: <Details>{r.desc}</Details>,\n          } as OptionType)\n      )}\n      showDividers\n      {...props}\n    />\n  );\n}\n\nexport default RoleSelectControl;\n\nconst Details = styled('span')`\n  display: inline-block;\n  width: 20rem;\n`;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {PanelAlert} from 'sentry/components/panels';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconInfo} from 'sentry/icons';\nimport {tct} from 'sentry/locale';\nimport {OrgRole, TeamRole} from 'sentry/types';\n\ntype Props = {\n  orgRole: OrgRole['id'] | undefined;\n  orgRoleList: OrgRole[];\n  teamRoleList: TeamRole[];\n  isSelf?: boolean;\n};\n\nexport const RoleOverwriteIcon: React.FC<Props> = props => {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <Tooltip title={getOverwriteString(props)}>\n      <IconInfo size=\"sm\" color=\"gray300\" />\n    </Tooltip>\n  );\n};\n\nexport const RoleOverwritePanelAlert: React.FC<Props> = props => {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <PanelAlert data-test-id=\"alert-role-overwrite\">\n      {getOverwriteString(props)}\n    </PanelAlert>\n  );\n};\n\n/**\n * Check that the user's org role has a minimum team role that maps to the lowest\n * possible team role\n */\nexport function hasOrgRoleOverwrite(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList} = props;\n\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  return teamRoleList.findIndex(r => r.id === orgRoleObj?.minimumTeamRole) > 0;\n}\n\n/**\n * Standardize string so situations where org-level vs team-level roles is easier to recognize\n */\nexport function getOverwriteString(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList, isSelf} = props;\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  const teamRoleObj = teamRoleList.find(r => r.id === orgRoleObj?.minimumTeamRole);\n  if (!orgRoleObj || !teamRoleObj) {\n    return '';\n  }\n\n  return tct(\n    '[selfNoun] organization role as [article] [orgRole] has granted [selfPronoun] a minimum team-level role of [teamRole]',\n    {\n      selfNoun: isSelf ? 'Your' : \"This user's\",\n      selfPronoun: isSelf ? 'you' : 'them',\n      article: 'AEIOU'.includes(orgRoleObj.name[0]) ? 'an' : 'a',\n      orgRole: <strong>{orgRoleObj.name}</strong>,\n      teamRole: <strong>{teamRoleObj.name}</strong>,\n    }\n  );\n}\n\nexport default RoleOverwriteIcon;\n","import styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport IdBadge from 'sentry/components/idBadge';\nimport {PanelItem} from 'sentry/components/panels';\nimport RoleSelectControl from 'sentry/components/roleSelectControl';\nimport {IconSubtract} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Member, Organization, TeamMember, User} from 'sentry/types';\nimport {\n  hasOrgRoleOverwrite,\n  RoleOverwriteIcon,\n} from 'sentry/views/settings/organizationTeams/roleOverwriteWarning';\n\nconst TeamMembersRow = (props: {\n  hasWriteAccess: boolean;\n  member: TeamMember;\n  organization: Organization;\n  removeMember: (member: Member) => void;\n  updateMemberRole: (member: Member, newRole: string) => void;\n  user: User;\n}) => {\n  const {organization, member, user, hasWriteAccess, removeMember, updateMemberRole} =\n    props;\n\n  return (\n    <TeamRolesPanelItem key={member.id}>\n      <div>\n        <IdBadge avatarSize={36} member={member} useLink orgId={organization.slug} />\n      </div>\n      <div>\n        <TeamRoleSelect\n          hasWriteAccess={hasWriteAccess}\n          updateMemberRole={updateMemberRole}\n          organization={organization}\n          member={member}\n        />\n      </div>\n      <div>\n        <RemoveButton\n          hasWriteAccess={hasWriteAccess}\n          onClick={() => removeMember(member)}\n          member={member}\n          user={user}\n        />\n      </div>\n    </TeamRolesPanelItem>\n  );\n};\n\nconst TeamRoleSelect = (props: {\n  hasWriteAccess: boolean;\n  member: TeamMember;\n  organization: Organization;\n  updateMemberRole: (member: TeamMember, newRole: string) => void;\n}) => {\n  const {hasWriteAccess, organization, member, updateMemberRole} = props;\n  const {orgRoleList, teamRoleList, features} = organization;\n  if (!features.includes('team-roles')) {\n    return null;\n  }\n\n  const {orgRole: orgRoleId} = member;\n  const orgRole = orgRoleList.find(r => r.id === orgRoleId);\n\n  const teamRoleId = member.teamRole || orgRole?.minimumTeamRole;\n  const teamRole = teamRoleList.find(r => r.id === teamRoleId) || teamRoleList[0];\n\n  if (\n    !hasWriteAccess ||\n    hasOrgRoleOverwrite({orgRole: orgRoleId, orgRoleList, teamRoleList})\n  ) {\n    return (\n      <RoleName>\n        {teamRole.name}\n        <IconWrapper>\n          <RoleOverwriteIcon\n            orgRole={orgRoleId}\n            orgRoleList={orgRoleList}\n            teamRoleList={teamRoleList}\n          />\n        </IconWrapper>\n      </RoleName>\n    );\n  }\n\n  return (\n    <RoleSelectWrapper>\n      <RoleSelectControl\n        roles={teamRoleList}\n        value={teamRole.id}\n        onChange={option => updateMemberRole(member, option.value)}\n        disableUnallowed\n      />\n    </RoleSelectWrapper>\n  );\n};\n\nconst RemoveButton = (props: {\n  hasWriteAccess: boolean;\n  member: TeamMember;\n  onClick: () => void;\n  user: User;\n}) => {\n  const {member, user, hasWriteAccess, onClick} = props;\n\n  const isSelf = member.email === user.email;\n  const canRemoveMember = hasWriteAccess || isSelf;\n  if (!canRemoveMember) {\n    return null;\n  }\n\n  if (member.flags['idp:provisioned']) {\n    return (\n      <Button\n        size=\"xs\"\n        disabled\n        icon={<IconSubtract size=\"xs\" isCircled />}\n        onClick={onClick}\n        aria-label={t('Remove')}\n        title={t(\n          \"Membership to this team is managed through your organization's identity provider.\"\n        )}\n      >\n        {t('Remove')}\n      </Button>\n    );\n  }\n\n  return (\n    <Button\n      size=\"xs\"\n      disabled={!canRemoveMember}\n      icon={<IconSubtract size=\"xs\" isCircled />}\n      onClick={onClick}\n      aria-label={t('Remove')}\n    >\n      {t('Remove')}\n    </Button>\n  );\n};\n\nconst RoleName = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst IconWrapper = styled('div')`\n  height: ${space(2)};\n  margin-left: ${space(1)};\n`;\n\nconst RoleSelectWrapper = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  > div:first-child {\n    flex-grow: 1;\n  }\n`;\n\nconst TeamRolesPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: minmax(120px, 4fr) minmax(120px, 2fr) minmax(100px, 1fr);\n  gap: ${space(2)};\n  align-items: center;\n\n  > div:last-child {\n    margin-left: auto;\n  }\n`;\n\nexport default TeamMembersRow;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {\n  openInviteMembersModal,\n  openTeamAccessRequestModal,\n} from 'sentry/actionCreators/modal';\nimport {joinTeam, leaveTeam} from 'sentry/actionCreators/teams';\nimport {Client} from 'sentry/api';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport Link from 'sentry/components/links/link';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelHeader} from 'sentry/components/panels';\nimport {IconUser} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Config, Member, Organization, Team, TeamMember} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport TeamMembersRow from './teamMembersRow';\n\ntype RouteParams = {\n  teamId: string;\n};\n\ntype Props = {\n  api: Client;\n  config: Config;\n  organization: Organization;\n  team: Team;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  dropdownBusy: boolean;\n  error: boolean;\n  loading: boolean;\n  orgMembers: Member[];\n  teamMembers: TeamMember[];\n} & AsyncView['state'];\n\nclass TeamMembers extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      loading: true,\n      error: false,\n      dropdownBusy: false,\n      teamMembers: [],\n      orgMembers: [],\n    };\n  }\n\n  componentDidMount() {\n    // Initialize \"add member\" dropdown with data\n    this.fetchMembersRequest('');\n  }\n\n  debouncedFetchMembersRequest = debounce(\n    (query: string) =>\n      this.setState({dropdownBusy: true}, () => this.fetchMembersRequest(query)),\n    200\n  );\n\n  fetchMembersRequest = async (query: string) => {\n    const {organization, api} = this.props;\n\n    try {\n      const data = await api.requestPromise(\n        `/organizations/${organization.slug}/members/`,\n        {\n          query: {query},\n        }\n      );\n      this.setState({\n        orgMembers: data,\n        dropdownBusy: false,\n      });\n    } catch (_err) {\n      addErrorMessage(t('Unable to load organization members.'), {\n        duration: 2000,\n      });\n\n      this.setState({\n        dropdownBusy: false,\n      });\n    }\n  };\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n\n    return [\n      [\n        'teamMembers',\n        `/teams/${organization.slug}/${params.teamId}/members/`,\n        {},\n        {paginate: true},\n      ],\n    ];\n  }\n\n  addTeamMember = (selection: Item) => {\n    const {organization, params} = this.props;\n    const {orgMembers, teamMembers} = this.state;\n\n    this.setState({loading: true});\n\n    // Reset members list after adding member to team\n    this.debouncedFetchMembersRequest('');\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: organization.slug,\n        teamId: params.teamId,\n        memberId: selection.value,\n      },\n      {\n        success: () => {\n          const orgMember = orgMembers.find(member => member.id === selection.value);\n          if (orgMember === undefined) {\n            return;\n          }\n          this.setState({\n            loading: false,\n            error: false,\n            teamMembers: teamMembers.concat([orgMember as TeamMember]),\n          });\n          addSuccessMessage(t('Successfully added member to team.'));\n        },\n        error: () => {\n          this.setState({loading: false});\n          addErrorMessage(t('Unable to add team member.'));\n        },\n      }\n    );\n  };\n\n  removeTeamMember = (member: Member) => {\n    const {organization, params} = this.props;\n    const {teamMembers} = this.state;\n    leaveTeam(\n      this.props.api,\n      {\n        orgId: organization.slug,\n        teamId: params.teamId,\n        memberId: member.id,\n      },\n      {\n        success: () => {\n          this.setState({\n            teamMembers: teamMembers.filter(m => m.id !== member.id),\n          });\n          addSuccessMessage(t('Successfully removed member from team.'));\n        },\n        error: () =>\n          addErrorMessage(\n            t('There was an error while trying to remove a member from the team.')\n          ),\n      }\n    );\n  };\n\n  updateTeamMemberRole = (member: Member, newRole: string) => {\n    const {organization} = this.props;\n    const {teamId} = this.props.params;\n    const endpoint = `/organizations/${organization.slug}/members/${member.id}/teams/${teamId}/`;\n\n    this.props.api.request(endpoint, {\n      method: 'PUT',\n      data: {teamRole: newRole},\n      success: data => {\n        const teamMembers: any = [...this.state.teamMembers];\n        const i = teamMembers.findIndex(m => m.id === member.id);\n        teamMembers[i] = {\n          ...member,\n          teamRole: data.teamRole,\n        };\n        this.setState({teamMembers});\n        addSuccessMessage(t('Successfully changed role for team member.'));\n      },\n      error: () => {\n        addErrorMessage(\n          t('There was an error while trying to change the roles for a team member.')\n        );\n      },\n    });\n  };\n\n  /**\n   * We perform an API request to support orgs with > 100 members (since that's the max API returns)\n   *\n   * @param {Event} e React Event when member filter input changes\n   */\n  handleMemberFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({dropdownBusy: true});\n    this.debouncedFetchMembersRequest(e.target.value);\n  };\n\n  renderDropdown(hasWriteAccess: boolean) {\n    const {organization, params, team} = this.props;\n    const {orgMembers} = this.state;\n    const existingMembers = new Set(this.state.teamMembers.map(member => member.id));\n\n    // members can add other members to a team if the `Open Membership` setting is enabled\n    // otherwise, `org:write` or `team:admin` permissions are required\n    const hasOpenMembership = !!organization?.openMembership;\n    const canAddMembers = hasOpenMembership || hasWriteAccess;\n\n    const items = (orgMembers || [])\n      .filter(m => !existingMembers.has(m.id))\n      .map(m => ({\n        searchKey: `${m.name} ${m.email}`,\n        value: m.id,\n        label: (\n          <StyledUserListElement>\n            <StyledAvatar user={m} size={24} className=\"avatar\" />\n            <StyledNameOrEmail>{m.name || m.email}</StyledNameOrEmail>\n          </StyledUserListElement>\n        ),\n      }));\n\n    const menuHeader = (\n      <StyledMembersLabel>\n        {t('Members')}\n        <StyledCreateMemberLink\n          to=\"\"\n          onClick={() => openInviteMembersModal({source: 'teams'})}\n          data-test-id=\"invite-member\"\n        >\n          {t('Invite Member')}\n        </StyledCreateMemberLink>\n      </StyledMembersLabel>\n    );\n\n    return (\n      <DropdownAutoComplete\n        items={items}\n        alignMenu=\"right\"\n        onSelect={\n          canAddMembers\n            ? this.addTeamMember\n            : selection =>\n                openTeamAccessRequestModal({\n                  teamId: params.teamId,\n                  orgId: organization.slug,\n                  memberId: selection.value,\n                })\n        }\n        menuHeader={menuHeader}\n        emptyMessage={t('No members')}\n        onChange={this.handleMemberFilterChange}\n        busy={this.state.dropdownBusy}\n        onClose={() => this.debouncedFetchMembersRequest('')}\n        disabled={team.flags['idp:provisioned']}\n      >\n        {({isOpen}) => (\n          <DropdownButton\n            isOpen={isOpen}\n            size=\"xs\"\n            data-test-id=\"add-member\"\n            disabled={team.flags['idp:provisioned']}\n          >\n            {t('Add Member')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const {organization, config} = this.props;\n    const {teamMembersPageLinks} = this.state;\n    const {access} = organization;\n    const hasWriteAccess = access.includes('org:write') || access.includes('team:admin');\n\n    return (\n      <Fragment>\n        <Panel>\n          <PanelHeader hasButtons>\n            <div>{t('Members')}</div>\n            <div style={{textTransform: 'none'}}>\n              {this.renderDropdown(hasWriteAccess)}\n            </div>\n          </PanelHeader>\n          {this.state.teamMembers.length ? (\n            this.state.teamMembers.map(member => {\n              return (\n                <TeamMembersRow\n                  key={member.id}\n                  hasWriteAccess={hasWriteAccess}\n                  member={member}\n                  organization={organization}\n                  removeMember={this.removeTeamMember}\n                  updateMemberRole={this.updateTeamMemberRole}\n                  user={config.user}\n                />\n              );\n            })\n          ) : (\n            <EmptyMessage icon={<IconUser size=\"xl\" />} size=\"large\">\n              {t('This team has no members')}\n            </EmptyMessage>\n          )}\n        </Panel>\n        <Pagination pageLinks={teamMembersPageLinks} />\n      </Fragment>\n    );\n  }\n}\n\nconst StyledUserListElement = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(0.5)};\n  align-items: center;\n`;\n\nconst StyledNameOrEmail = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst StyledAvatar = styled(props => <UserAvatar {...props} />)`\n  min-width: 1.75em;\n  min-height: 1.75em;\n  width: 1.5em;\n  height: 1.5em;\n`;\n\nconst StyledMembersLabel = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  padding: ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  text-transform: uppercase;\n`;\n\nconst StyledCreateMemberLink = styled(Link)`\n  text-transform: none;\n`;\n\nexport default withConfig(withApi(withOrganization(TeamMembers)));\n"],"names":["RoleSelectControl","_ref","roles","disableUnallowed","props","_jsx","SelectControl","options","map","r","value","id","label","name","disabled","allowed","isRetired","details","Details","children","desc","showDividers","displayName","_styled","target","styles","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","RoleOverwriteIcon","hasOrgRoleOverwrite","Tooltip","getOverwriteString","IconInfo","size","color","RoleOverwritePanelAlert","PanelAlert","orgRole","orgRoleList","teamRoleList","orgRoleObj","find","findIndex","minimumTeamRole","isSelf","teamRoleObj","tct","selfNoun","selfPronoun","article","includes","teamRole","TeamMembersRow","organization","member","user","hasWriteAccess","removeMember","updateMemberRole","_jsxs","TeamRolesPanelItem","IdBadge","avatarSize","useLink","orgId","slug","TeamRoleSelect","RemoveButton","onClick","features","orgRoleId","teamRoleId","RoleName","IconWrapper","RoleSelectWrapper","onChange","option","email","canRemoveMember","flags","Button","icon","IconSubtract","isCircled","t","space","PanelItem","TeamMembers","constructor","arguments","_defineProperty","debounce","query","setState","dropdownBusy","fetchMembersRequest","async","api","data","requestPromise","orgMembers","_err","addErrorMessage","duration","selection","params","teamMembers","state","loading","debouncedFetchMembersRequest","joinTeam","teamId","memberId","success","orgMember","undefined","error","concat","addSuccessMessage","leaveTeam","filter","m","newRole","endpoint","request","method","i","e","getDefaultState","super","componentDidMount","getEndpoints","paginate","renderDropdown","team","existingMembers","Set","canAddMembers","openMembership","items","has","searchKey","StyledUserListElement","StyledAvatar","className","StyledNameOrEmail","menuHeader","StyledMembersLabel","StyledCreateMemberLink","to","openInviteMembersModal","source","DropdownAutoComplete","alignMenu","onSelect","addTeamMember","openTeamAccessRequestModal","emptyMessage","handleMemberFilterChange","busy","onClose","isOpen","DropdownButton","LoadingIndicator","LoadingError","onRetry","fetchData","config","teamMembersPageLinks","access","Fragment","Panel","PanelHeader","hasButtons","style","textTransform","length","removeTeamMember","updateTeamMemberRole","EmptyMessage","IconUser","Pagination","pageLinks","p","theme","fontSizeSmall","overflowEllipsis","UserAvatar","fontSizeExtraSmall","Link","withConfig","withApi","withOrganization"],"sourceRoot":""}