{"version":3,"file":"chunks/app_views_issueDetails_groupReplays_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/useCleanQueryParamsOnRouteLeave.tsx","webpack:///./app/views/issueDetails/groupReplays/groupReplays.tsx","webpack:///./app/views/issueDetails/groupReplays/useReplaysFromIssue.tsx","webpack:///./app/views/issueDetails/groupReplays/index.tsx"],"sourcesContent":["import {useCallback, useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport type {Location} from 'history';\n\nimport {useLocation} from 'sentry/utils/useLocation';\n\ntype Opts = {\n  fieldsToClean: string[];\n};\n\nexport function handleRouteLeave<Q extends object>({\n  fieldsToClean,\n  newLocation,\n  oldPathname,\n}: {\n  fieldsToClean: string[];\n  newLocation: Location<Q>;\n  oldPathname: string;\n}) {\n  const hasSomeValues = fieldsToClean.some(\n    field => newLocation.query[field] !== undefined\n  );\n\n  if (newLocation.pathname === oldPathname || !hasSomeValues) {\n    return;\n  }\n\n  // Removes fields from the URL on route leave so that the parameters will\n  // not interfere with other pages\n  const query = fieldsToClean.reduce(\n    (newQuery, field) => {\n      newQuery[field] = undefined;\n      return newQuery;\n    },\n    {...newLocation.query}\n  );\n\n  browserHistory.replace({\n    pathname: newLocation.pathname,\n    query,\n  });\n}\n\nfunction useCleanQueryParamsOnRouteLeave({fieldsToClean}: Opts) {\n  const location = useLocation();\n\n  const onRouteLeave = useCallback(\n    newLocation => {\n      handleRouteLeave({\n        fieldsToClean,\n        newLocation,\n        oldPathname: location.pathname,\n      });\n    },\n    [location.pathname, fieldsToClean]\n  );\n\n  useEffect(() => {\n    return browserHistory.listen(onRouteLeave);\n  }, [onRouteLeave]);\n}\n\nexport default useCleanQueryParamsOnRouteLeave;\n","import {useMemo} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport type {Group, Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport useReplayList from 'sentry/utils/replays/hooks/useReplayList';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useMedia from 'sentry/utils/useMedia';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useReplaysFromIssue from 'sentry/views/issueDetails/groupReplays/useReplaysFromIssue';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport {ReplayColumns} from 'sentry/views/replays/replayTable/types';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\ntype Props = {\n  group: Group;\n};\n\nfunction GroupReplays({group}: Props) {\n  const theme = useTheme();\n  const hasRoomForColumns = useMedia(`(min-width: ${theme.breakpoints.small})`);\n  const organization = useOrganization();\n  const location = useLocation<ReplayListLocationQuery>();\n\n  const {eventView, fetchError, pageLinks} = useReplaysFromIssue({\n    group,\n    location,\n    organization,\n  });\n\n  if (!eventView) {\n    return (\n      <StyledLayoutPage withPadding>\n        <ReplayTable\n          fetchError={fetchError}\n          isFetching\n          replays={[]}\n          sort={undefined}\n          visibleColumns={[\n            ReplayColumns.session,\n            ...(hasRoomForColumns ? [ReplayColumns.startedAt] : []),\n            ReplayColumns.duration,\n            ReplayColumns.countErrors,\n            ReplayColumns.activity,\n          ]}\n        />\n      </StyledLayoutPage>\n    );\n  }\n  return (\n    <GroupReplaysTable\n      eventView={eventView}\n      organization={organization}\n      pageLinks={pageLinks}\n    />\n  );\n}\n\nconst GroupReplaysTable = ({\n  eventView,\n  organization,\n}: {\n  eventView: EventView;\n  organization: Organization;\n  pageLinks: string | null;\n}) => {\n  const location = useMemo(() => ({query: {}} as Location<ReplayListLocationQuery>), []);\n  const theme = useTheme();\n  const hasRoomForColumns = useMedia(`(min-width: ${theme.breakpoints.small})`);\n\n  const {replays, isFetching, fetchError} = useReplayList({\n    eventView,\n    location,\n    organization,\n  });\n\n  return (\n    <StyledLayoutPage withPadding>\n      <ReplayTable\n        fetchError={fetchError}\n        isFetching={isFetching}\n        replays={replays}\n        sort={undefined}\n        visibleColumns={[\n          ReplayColumns.session,\n          ...(hasRoomForColumns ? [ReplayColumns.startedAt] : []),\n          ReplayColumns.duration,\n          ReplayColumns.countErrors,\n          ReplayColumns.activity,\n        ]}\n      />\n    </StyledLayoutPage>\n  );\n};\n\nconst StyledLayoutPage = styled(Layout.Page)`\n  box-shadow: 0px 0px 1px ${p => p.theme.gray200};\n  background-color: ${p => p.theme.background};\n`;\n\nexport default GroupReplays;\n","import {useCallback, useEffect, useMemo, useState} from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport type {Group, Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {DEFAULT_SORT} from 'sentry/utils/replays/fetchReplayList';\nimport useApi from 'sentry/utils/useApi';\nimport useCleanQueryParamsOnRouteLeave from 'sentry/utils/useCleanQueryParamsOnRouteLeave';\nimport {REPLAY_LIST_FIELDS} from 'sentry/views/replays/types';\n\nfunction useReplayFromIssue({\n  group,\n  location,\n  organization,\n}: {\n  group: Group;\n  location: Location;\n  organization: Organization;\n}) {\n  const api = useApi();\n\n  const [replayIds, setReplayIds] = useState<string[]>();\n\n  const [fetchError, setFetchError] = useState();\n\n  const fetchReplayIds = useCallback(async () => {\n    try {\n      const response = await api.requestPromise(\n        `/organizations/${organization.slug}/replay-count/`,\n        {\n          query: {\n            returnIds: true,\n            query: `issue.id:[${group.id}]`,\n            statsPeriod: '14d',\n            project: group.project.id,\n          },\n        }\n      );\n      setReplayIds(response[group.id] || []);\n    } catch (error) {\n      Sentry.captureException(error);\n      setFetchError(error);\n    }\n  }, [api, organization.slug, group.id, group.project.id]);\n\n  const eventView = useMemo(() => {\n    if (!replayIds) {\n      return null;\n    }\n    return EventView.fromSavedQuery({\n      id: '',\n      name: '',\n      version: 2,\n      fields: REPLAY_LIST_FIELDS,\n      projects: [Number(group.project.id)],\n      query: `id:[${String(replayIds)}]`,\n      range: '14d',\n      orderby: decodeScalar(location.query.sort, DEFAULT_SORT),\n    });\n  }, [location.query.sort, group.project.id, replayIds]);\n\n  useCleanQueryParamsOnRouteLeave({fieldsToClean: ['cursor']});\n  useEffect(() => {\n    fetchReplayIds();\n  }, [fetchReplayIds]);\n\n  return {\n    eventView,\n    fetchError,\n    pageLinks: null,\n  };\n}\n\nexport default useReplayFromIssue;\n","import {ComponentProps} from 'react';\n\nimport Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {t} from 'sentry/locale';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport GroupReplays from './groupReplays';\n\ntype Props = ComponentProps<typeof GroupReplays>;\n\nfunction renderNoAccess() {\n  return (\n    <Layout.Page withPadding>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </Layout.Page>\n  );\n}\n\nconst GroupReplaysContainer = (props: Props) => {\n  const organization = useOrganization();\n\n  return (\n    <Feature\n      features={['session-replay']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <GroupReplays {...props} />\n    </Feature>\n  );\n};\n\nexport default GroupReplaysContainer;\n"],"names":["handleRouteLeave","_ref","fieldsToClean","newLocation","oldPathname","hasSomeValues","some","field","undefined","query","pathname","reduce","newQuery","browserHistory","_ref2","location","useLocation","onRouteLeave","useCallback","useEffect","GroupReplays","group","theme","useTheme","hasRoomForColumns","useMedia","breakpoints","small","organization","useOrganization","eventView","fetchError","pageLinks","api","useApi","replayIds","setReplayIds","useState","setFetchError","fetchReplayIds","async","response","requestPromise","slug","returnIds","id","statsPeriod","project","error","Sentry","useMemo","EventView","name","version","fields","REPLAY_LIST_FIELDS","projects","Number","String","range","orderby","decodeScalar","sort","DEFAULT_SORT","useCleanQueryParamsOnRouteLeave","useReplaysFromIssue","_jsx","GroupReplaysTable","StyledLayoutPage","withPadding","children","ReplayTable","isFetching","replays","visibleColumns","ReplayColumns","displayName","useReplayList","_styled","Layout","target","p","gray200","background","renderNoAccess","Alert","type","t","GroupReplaysContainer","props","Feature","features","renderDisabled"],"sourceRoot":""}