{"version":3,"file":"chunks/app_views_asyncView_tsx-app_views_settings_components_teamSelect_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/roleSelectControl.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/teamSelect.tsx","webpack:///./app/views/settings/organizationTeams/roleOverwriteWarning.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport SelectControl, {\n  ControlProps,\n} from 'sentry/components/forms/controls/selectControl';\nimport {MemberRole} from 'sentry/types';\n\ntype OptionType = {\n  details: React.ReactNode;\n  disabled: boolean;\n  label: string;\n  value: string;\n};\n\ntype Props = Omit<ControlProps<OptionType>, 'onChange' | 'value'> & {\n  disableUnallowed: boolean;\n  roles: MemberRole[];\n  /**\n   * Narrower type than SelectControl because there is no empty value\n   */\n  onChange?: (value: OptionType) => void;\n  value?: string | null;\n};\n\nfunction RoleSelectControl({roles, disableUnallowed, ...props}: Props) {\n  return (\n    <SelectControl\n      options={roles?.map(\n        (r: MemberRole) =>\n          ({\n            value: r.id,\n            label: r.name,\n            disabled: (disableUnallowed && !r.allowed) || r.isRetired,\n            details: <Details>{r.desc}</Details>,\n          } as OptionType)\n      )}\n      showDividers\n      {...props}\n    />\n  );\n}\n\nexport default RoleSelectControl;\n\nconst Details = styled('span')`\n  display: inline-block;\n  width: 20rem;\n`;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport {TeamBadge} from 'sentry/components/idBadge/teamBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport RoleSelectControl from 'sentry/components/roleSelectControl';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {IconSubtract} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Member, Organization, Team} from 'sentry/types';\nimport useTeams from 'sentry/utils/useTeams';\nimport {\n  hasOrgRoleOverwrite,\n  RoleOverwritePanelAlert,\n} from 'sentry/views/settings/organizationTeams/roleOverwriteWarning';\n\ntype Props = {\n  /**\n   * Should button be disabled\n   */\n  disabled: boolean;\n  /**\n   * Used when showing Teams for a Member\n   * Prevent changes to a SCIM-provisioned member\n   */\n  enforceIdpProvisioned: boolean;\n  /**\n   * callback when teams are added\n   */\n  onAddTeam: (teamSlug: string) => void;\n  /**\n   * Callback when teams are removed\n   */\n  onRemoveTeam: (teamSlug: string) => void;\n  organization: Organization;\n  /**\n   * Message to display when the last team is removed\n   * if empty no confirm will be displayed.\n   */\n  confirmLastTeamRemoveMessage?: string;\n  /**\n   * Used to determine whether we should show a loading state while waiting for teams\n   */\n  loadingTeams?: boolean;\n  /**\n   * Optional menu header.\n   */\n  menuHeader?: React.ReactElement;\n  /**\n   * Used when showing Teams for a Member\n   */\n  onChangeTeamRole?: (teamSlug: string, teamRole: string) => void;\n  /**\n   * Used when showing Teams for a Member\n   */\n  selectedOrgRole?: Member['orgRole'];\n  /**\n   * Used when showing Teams for a Member\n   */\n  selectedTeamRoles?: Member['teamRoles'];\n  /**\n   * Used when showing Teams for a Project\n   */\n  selectedTeams?: Team[];\n};\n\nfunction TeamSelect({\n  disabled,\n  loadingTeams,\n  enforceIdpProvisioned,\n  menuHeader,\n  confirmLastTeamRemoveMessage,\n  selectedOrgRole,\n  selectedTeamRoles,\n  selectedTeams,\n  organization,\n  onAddTeam,\n  onRemoveTeam,\n  onChangeTeamRole,\n}: Props) {\n  const {teams, onSearch, fetching} = useTeams();\n  const {orgRoleList, teamRoleList} = organization;\n\n  const renderBody = () => {\n    const numTeams = selectedTeams?.length || selectedTeamRoles?.length;\n    if (numTeams === 0) {\n      return <EmptyMessage>{t('No Teams assigned')}</EmptyMessage>;\n    }\n\n    const confirmMessage =\n      numTeams === 1 && confirmLastTeamRemoveMessage\n        ? confirmLastTeamRemoveMessage\n        : null;\n\n    return (\n      <React.Fragment>\n        {organization.features.includes('team-roles') && selectedOrgRole && (\n          <RoleOverwritePanelAlert\n            orgRole={selectedOrgRole}\n            orgRoleList={orgRoleList}\n            teamRoleList={teamRoleList}\n          />\n        )}\n\n        {selectedTeams &&\n          selectedTeams.map(team => (\n            <ProjectTeamRow\n              key={team.slug}\n              disabled={disabled}\n              confirmMessage={confirmMessage}\n              organization={organization}\n              team={team}\n              onRemoveTeam={slug => onRemoveTeam(slug)}\n            />\n          ))}\n\n        {selectedOrgRole &&\n          selectedTeamRoles &&\n          /**\n           * \"Map + Find\" operation is O(n * n), leaving it as it us because it is unlikely to cause performance issues because a Member is unlikely to be in 1000+ teams\n           */\n          selectedTeamRoles.map(r => {\n            const team = teams.find(tm => tm.slug === r.teamSlug);\n            if (!team) {\n              return (\n                <TeamPanelItem key={r.teamSlug}>\n                  {tct(`Cannot find #[slug]`, {slug: r.teamSlug})}\n                </TeamPanelItem>\n              );\n            }\n\n            return (\n              <MemberTeamRow\n                key={r.teamSlug}\n                disabled={disabled}\n                enforceIdpProvisioned={enforceIdpProvisioned}\n                confirmMessage={confirmMessage}\n                organization={organization}\n                team={team}\n                selectedOrgRole={selectedOrgRole}\n                selectedTeamRole={r.role}\n                onChangeTeamRole={onChangeTeamRole}\n                onRemoveTeam={slug => onRemoveTeam(slug)}\n              />\n            );\n          })}\n      </React.Fragment>\n    );\n  };\n\n  const slugsToFilter =\n    selectedTeams?.map(tm => tm.slug) || selectedTeamRoles?.map(tm => tm.teamSlug) || [];\n\n  // Only show options that aren't selected in the dropdown\n  const options = teams\n    .filter(team => !slugsToFilter.some(slug => slug === team.slug))\n    .map((team, index) => ({\n      index,\n      value: team.slug,\n      searchKey: team.slug,\n      label: () => {\n        if (enforceIdpProvisioned && team.flags['idp:provisioned']) {\n          return (\n            <Tooltip\n              title={t(\n                \"Membership to this team is managed through your organization's identity provider.\"\n              )}\n            >\n              <DropdownTeamBadgeDisabled avatarSize={18} team={team} />\n            </Tooltip>\n          );\n        }\n        return <DropdownTeamBadge avatarSize={18} team={team} />;\n      },\n      disabled: enforceIdpProvisioned && team.flags['idp:provisioned'],\n    }));\n\n  return (\n    <Panel>\n      <PanelHeader hasButtons>\n        {t('Team')}\n        <DropdownAutoComplete\n          items={options}\n          busyItemsStillVisible={fetching}\n          onChange={debounce<(e: React.ChangeEvent<HTMLInputElement>) => void>(\n            e => onSearch(e.target.value),\n            DEFAULT_DEBOUNCE_DURATION\n          )}\n          onSelect={(option: Item) => onAddTeam(option.value)}\n          emptyMessage={t('No teams')}\n          menuHeader={menuHeader}\n          disabled={disabled}\n          alignMenu=\"right\"\n        >\n          {({isOpen}) => (\n            <DropdownButton\n              aria-label={t('Add Team')}\n              isOpen={isOpen}\n              size=\"xs\"\n              disabled={disabled}\n            >\n              {t('Add Team')}\n            </DropdownButton>\n          )}\n        </DropdownAutoComplete>\n      </PanelHeader>\n\n      <PanelBody>{loadingTeams ? <LoadingIndicator /> : renderBody()}</PanelBody>\n    </Panel>\n  );\n}\n\ntype TeamRowProps = {\n  confirmMessage: string | null;\n  disabled: boolean;\n  onRemoveTeam: Props['onRemoveTeam'];\n  organization: Organization;\n  team: Team;\n};\n\ntype ProjectTeamRowProps = {} & TeamRowProps;\n\nconst ProjectTeamRow = ({\n  organization,\n  team,\n  onRemoveTeam,\n  disabled,\n  confirmMessage,\n}: ProjectTeamRowProps) => (\n  <TeamPanelItem data-test-id=\"team-row-for-project\">\n    <StyledLink to={`/settings/${organization.slug}/teams/${team.slug}/`}>\n      <TeamBadge team={team} />\n    </StyledLink>\n\n    <Confirm\n      message={confirmMessage}\n      bypass={!confirmMessage}\n      onConfirm={() => onRemoveTeam(team.slug)}\n      disabled={disabled}\n    >\n      <Button size=\"xs\" icon={<IconSubtract isCircled size=\"xs\" />} disabled={disabled}>\n        {t('Remove')}\n      </Button>\n    </Confirm>\n  </TeamPanelItem>\n);\n\ntype MemberTeamRowProps = {\n  enforceIdpProvisioned: boolean;\n  onChangeTeamRole: Props['onChangeTeamRole'];\n  selectedOrgRole: Member['orgRole'];\n  selectedTeamRole: Member['teamRoles'][0]['role'];\n} & TeamRowProps;\n\nconst MemberTeamRow = ({\n  organization,\n  team,\n  selectedOrgRole,\n  selectedTeamRole,\n  onRemoveTeam,\n  onChangeTeamRole,\n  disabled,\n  confirmMessage,\n  enforceIdpProvisioned,\n}: MemberTeamRowProps) => {\n  const {teamRoleList, orgRoleList} = organization;\n  const isRoleOverwritten = hasOrgRoleOverwrite({\n    orgRole: selectedOrgRole,\n    orgRoleList,\n    teamRoleList,\n  });\n\n  const teamRoleObj = isRoleOverwritten\n    ? teamRoleList[1] // set as team admin\n    : teamRoleList.find(r => r.id === selectedTeamRole) || teamRoleList[0];\n\n  return (\n    <TeamPanelItem data-test-id=\"team-row-for-member\">\n      <StyledLink to={`/settings/${organization.slug}/teams/${team.slug}/`}>\n        <TeamBadge team={team} />\n      </StyledLink>\n\n      {organization.features.includes('team-roles') && onChangeTeamRole && (\n        <React.Fragment>\n          <StyledRoleSelectControl\n            disabled={disabled || isRoleOverwritten}\n            disableUnallowed={false}\n            size=\"xs\"\n            roles={teamRoleList}\n            value={teamRoleObj?.id}\n            onChange={option => onChangeTeamRole(team.slug, option.value)}\n          />\n        </React.Fragment>\n      )}\n\n      <Confirm\n        message={confirmMessage}\n        bypass={!confirmMessage}\n        onConfirm={() => onRemoveTeam(team.slug)}\n        disabled={disabled || (enforceIdpProvisioned && team.flags['idp:provisioned'])}\n      >\n        <Button\n          size=\"xs\"\n          icon={<IconSubtract isCircled size=\"xs\" />}\n          disabled={disabled || (enforceIdpProvisioned && team.flags['idp:provisioned'])}\n          title={\n            enforceIdpProvisioned && team.flags['idp:provisioned']\n              ? t(\n                  \"Membership to this team is managed through your organization's identity provider.\"\n                )\n              : undefined\n          }\n        >\n          {t('Remove')}\n        </Button>\n      </Confirm>\n    </TeamPanelItem>\n  );\n};\n\nconst DropdownTeamBadge = styled(TeamBadge)`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-transform: none;\n`;\n\nconst DropdownTeamBadgeDisabled = styled(TeamBadge)`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-transform: none;\n  filter: grayscale(1);\n`;\n\nconst TeamPanelItem = styled(PanelItem)`\n  padding: ${space(2)};\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst StyledLink = styled(Link)`\n  flex-grow: 1;\n`;\n\nconst StyledRoleSelectControl = styled(RoleSelectControl)`\n  min-width: 200px;\n  margin-right: ${space(2)};\n`;\n\nexport default TeamSelect;\n","import {PanelAlert} from 'sentry/components/panels';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconInfo} from 'sentry/icons';\nimport {tct} from 'sentry/locale';\nimport {OrgRole, TeamRole} from 'sentry/types';\n\ntype Props = {\n  orgRole: OrgRole['id'] | undefined;\n  orgRoleList: OrgRole[];\n  teamRoleList: TeamRole[];\n  isSelf?: boolean;\n};\n\nexport const RoleOverwriteIcon: React.FC<Props> = props => {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <Tooltip title={getOverwriteString(props)}>\n      <IconInfo size=\"sm\" color=\"gray300\" />\n    </Tooltip>\n  );\n};\n\nexport const RoleOverwritePanelAlert: React.FC<Props> = props => {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <PanelAlert data-test-id=\"alert-role-overwrite\">\n      {getOverwriteString(props)}\n    </PanelAlert>\n  );\n};\n\n/**\n * Check that the user's org role has a minimum team role that maps to the lowest\n * possible team role\n */\nexport function hasOrgRoleOverwrite(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList} = props;\n\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  return teamRoleList.findIndex(r => r.id === orgRoleObj?.minimumTeamRole) > 0;\n}\n\n/**\n * Standardize string so situations where org-level vs team-level roles is easier to recognize\n */\nexport function getOverwriteString(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList, isSelf} = props;\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  const teamRoleObj = teamRoleList.find(r => r.id === orgRoleObj?.minimumTeamRole);\n  if (!orgRoleObj || !teamRoleObj) {\n    return '';\n  }\n\n  return tct(\n    '[selfNoun] organization role as [article] [orgRole] has granted [selfPronoun] a minimum team-level role of [teamRole]',\n    {\n      selfNoun: isSelf ? 'Your' : \"This user's\",\n      selfPronoun: isSelf ? 'you' : 'them',\n      article: 'AEIOU'.includes(orgRoleObj.name[0]) ? 'an' : 'a',\n      orgRole: <strong>{orgRoleObj.name}</strong>,\n      teamRole: <strong>{teamRoleObj.name}</strong>,\n    }\n  );\n}\n\nexport default RoleOverwriteIcon;\n"],"names":["RoleSelectControl","_ref","roles","disableUnallowed","props","_jsx","SelectControl","options","map","r","value","id","label","name","disabled","allowed","isRetired","details","Details","children","desc","showDividers","displayName","_styled","target","styles","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","TeamSelect","loadingTeams","enforceIdpProvisioned","menuHeader","confirmLastTeamRemoveMessage","selectedOrgRole","selectedTeamRoles","selectedTeams","organization","onAddTeam","onRemoveTeam","onChangeTeamRole","teams","onSearch","fetching","useTeams","orgRoleList","teamRoleList","slugsToFilter","tm","slug","teamSlug","filter","team","some","index","searchKey","flags","Tooltip","t","DropdownTeamBadgeDisabled","avatarSize","DropdownTeamBadge","_jsxs","Panel","PanelHeader","hasButtons","DropdownAutoComplete","items","busyItemsStillVisible","onChange","debounce","e","DEFAULT_DEBOUNCE_DURATION","onSelect","option","emptyMessage","alignMenu","_ref2","isOpen","DropdownButton","size","PanelBody","LoadingIndicator","renderBody","numTeams","length","EmptyMessage","confirmMessage","React","features","includes","RoleOverwritePanelAlert","orgRole","ProjectTeamRow","find","MemberTeamRow","selectedTeamRole","role","TeamPanelItem","tct","_ref3","StyledLink","to","TeamBadge","Confirm","message","bypass","onConfirm","Button","icon","IconSubtract","isCircled","_ref4","isRoleOverwritten","hasOrgRoleOverwrite","teamRoleObj","StyledRoleSelectControl","undefined","p","theme","fontSizeMedium","PanelItem","space","Link","RoleOverwriteIcon","getOverwriteString","IconInfo","color","PanelAlert","orgRoleObj","findIndex","minimumTeamRole","isSelf","selfNoun","selfPronoun","article","teamRole"],"sourceRoot":""}