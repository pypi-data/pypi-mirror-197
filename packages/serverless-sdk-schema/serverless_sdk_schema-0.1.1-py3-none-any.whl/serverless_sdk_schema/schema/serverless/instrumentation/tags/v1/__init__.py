# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: serverless/instrumentation/tags/v1/aws.proto, serverless/instrumentation/tags/v1/common.proto, serverless/instrumentation/tags/v1/error.proto, serverless/instrumentation/tags/v1/notice.proto, serverless/instrumentation/tags/v1/tags.proto, serverless/instrumentation/tags/v1/warning.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    List,
    Optional,
)

import betterproto


class AwsLambdaTagsOutcome(betterproto.Enum):
    """
    A Lambda function invocation can have one of the following outcomes upon
    completion.
    """

    OUTCOME_UNSPECIFIED = 0
    """
    No outcome was registered. Either information on the outcome was not
    disclosed (which should never be the case), or the function invocation has
    not been finalized yet
    """

    OUTCOME_SUCCESS = 1
    """Function handler returned successfully"""

    OUTCOME_ERROR_INITIALIZATION = 2
    """Function crashed at initialization"""

    OUTCOME_ERROR_UNHANDLED = 3
    """
    Function crashed in an unhandled way at invocation (a result of either
    uncaught exception or unhandled rejection)
    """

    OUTCOME_ERROR_TIMEOUT = 4
    """Function timed out"""

    OUTCOME_ERROR_HANDLED = 5
    """
    Function handler resolved with an error (either error was passed to lambda
    callback, or async handler resolved with error rejection)
    """


class ErrorTagsErrorType(betterproto.Enum):
    ERROR_TYPE_UNSPECIFIED = 0
    """
    No ErrorType was provided. This should never be the case and if it is
    received ingest will ignore it.
    """

    ERROR_TYPE_UNCAUGHT = 1
    """An unexpected error that caused the application to fail"""

    ERROR_TYPE_CAUGHT_USER = 2
    """
    An error that was reported by user explictly via the Serverless SDK or
    console.error call Error doesn't explicitly fail the application. Multiple
    errors of this type can be reported during a single application run
    """

    ERROR_TYPE_CAUGHT_SDK_USER = 3
    """
    An error that was reported by the Serverless SDK internally that reports
    user error (misuage of the SDK) Error doesn't explicitly fail the
    application. Multiple errors of this type can be reported during a single
    application run
    """

    ERROR_TYPE_CAUGHT_SDK_INTERNAL = 4
    """
    An error that was reported by the Serverless SDK internally that reports
    internal SDK error Error doesn't explicitly fail the application. Multiple
    errors of this type can be reported during a single application run
    """


class NoticeTagsNoticeType(betterproto.Enum):
    NOTICE_TYPE_UNSPECIFIED = 0
    """Notice type not set"""

    NOTICE_TYPE_SDK_INTERNAL = 1
    """
    Signals SDK noteworthy event Event that's not relevant to the user but can
    be important instruction for the Console on how to process monitoring data
    of given case
    """


class WarningTagsWarningType(betterproto.Enum):
    WARNING_TYPE_UNSPECIFIED = 0
    """Warning type not set"""

    WARNING_TYPE_USER = 1
    """Warning explicitly reported by user"""

    WARNING_TYPE_SDK_USER = 2
    """
    Warning reported internally by the SDK that signal potential misusage on
    user side
    """

    WARNING_TYPE_SDK_INTERNAL = 3
    """
    Warning reported internally by the SDK that signal non fatal SDK issue
    """


@dataclass(eq=False, repr=False)
class HttpTags(betterproto.Message):
    """
    Generic tagset intended to describe incoming or outgoing HTTP requests
    """

    method: str = betterproto.string_field(1)
    """The method of the HTTP Request"""

    protocol: str = betterproto.string_field(2)
    """The protocol of the HTTP Request"""

    host: str = betterproto.string_field(3)
    """The host of the HTTP Request"""

    path: str = betterproto.string_field(4)
    """The path of the HTTP Request"""

    query_parameter_names: List[str] = betterproto.string_field(6)
    """Names of the query parameters"""

    request_header_names: List[str] = betterproto.string_field(8)
    """Request header names"""

    status_code: Optional[int] = betterproto.uint32_field(
        9, optional=True, group="_status_code"
    )
    """The Response Status Code."""

    error_code: Optional[str] = betterproto.string_field(
        12, optional=True, group="_error_code"
    )
    """Eventual request error code"""


@dataclass(eq=False, repr=False)
class AwsTags(betterproto.Message):
    lambda_: Optional["AwsLambdaTags"] = betterproto.message_field(
        100, optional=True, group="_lambda"
    )
    """The root AWS Lambda Span tags"""

    sdk: Optional["AwsSdkTags"] = betterproto.message_field(
        101, optional=True, group="_sdk"
    )
    """
    The AWS SDK Tags. These are only added when instrumented code makes a call
    to one of the AWS SDK functions
    """

    account_id: Optional[str] = betterproto.string_field(
        102, optional=True, group="_account_id"
    )
    """
    Account Id is added to all schemas originating from aws during ingest as
    part of our data enrichment process
    """

    region: Optional[str] = betterproto.string_field(
        103, optional=True, group="_region"
    )
    """
    Region is added to all schemas originating from aws during ingest as part
    of our data enrichment process
    """

    request_id: Optional[str] = betterproto.string_field(
        104, optional=True, group="_request_id"
    )
    """
    RequestId is added to all schemas originating from aws lambda during ingest
    as part of our data enrichment process
    """

    resource_name: Optional[str] = betterproto.string_field(
        105, optional=True, group="_resource_name"
    )
    """
    ResourceName is added to all schemas originating from aws lambda during
    ingest as part of our data enrichment process
    """

    sequence_id: Optional[str] = betterproto.string_field(
        3, optional=True, group="_sequence_id"
    )
    """
    The monotonically increasing sequence id for a LogEvent originating from
    aws lambda. This is used to determine the ordering of messages in a given
    stream of logs. If this is a LogEvent coming from Cloudwatch Logs, it will
    be provided otherwise it is the responsibility of the log producer to
    generate a sequence id.
    """

    log_group: Optional[str] = betterproto.string_field(
        4, optional=True, group="_log_group"
    )
    """The Cloudwatch Log Group name for logs originating from aws lambda."""

    log_stream: Optional[str] = betterproto.string_field(
        5, optional=True, group="_log_stream"
    )
    """
    The Cloudwatch Log Group Stream id for logs originating from aws lambda.
    """


@dataclass(eq=False, repr=False)
class AwsApiGatewayTags(betterproto.Message):
    account_id: str = betterproto.string_field(1)
    """The AWS Account ID of the API GW."""

    api_id: str = betterproto.string_field(2)
    """The unique id used for the API GW."""

    api_stage: str = betterproto.string_field(3)
    """The stage of the API GW endpoint that was called."""

    request: "AwsApiGatewayTagsAwsApiGatewayRequestTags" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class AwsApiGatewayTagsAwsApiGatewayRequestTags(betterproto.Message):
    id: str = betterproto.string_field(1)
    """The unique API GW Request ID."""

    time_epoch: int = betterproto.uint64_field(2)
    """The request time in milliseconds from epoch."""

    path_parameter_names: List[str] = betterproto.string_field(4)
    """JSON string containing Request Path Parameters"""


@dataclass(eq=False, repr=False)
class AwsLambdaTags(betterproto.Message):
    arch: str = betterproto.string_field(1)
    """
    The architecture of the Lambda function, currently either amd64 or arm64.
    """

    is_coldstart: bool = betterproto.bool_field(2)
    """Was the invocation a cold start?"""

    event_type: Optional[str] = betterproto.string_field(
        3, optional=True, group="_event_type"
    )
    """The event type for the invocation."""

    event_source: Optional[str] = betterproto.string_field(
        4, optional=True, group="_event_source"
    )
    """The event source for the invocation."""

    log_group: Optional[str] = betterproto.string_field(
        5, optional=True, group="_log_group"
    )
    """The Log Group for the Lambda Function."""

    log_stream_name: Optional[str] = betterproto.string_field(
        6, optional=True, group="_log_stream_name"
    )
    """The Log Stream for the invocation."""

    max_memory: Optional[int] = betterproto.uint32_field(
        7, optional=True, group="_max_memory"
    )
    """The Max Memory that is configured for the Lambda Function."""

    name: str = betterproto.string_field(8)
    """The Lambda Function name."""

    request_id: str = betterproto.string_field(9)
    """The Request ID for the invocation."""

    version: str = betterproto.string_field(11)
    """The Lambda Function version."""

    account_id: Optional[str] = betterproto.string_field(
        12, optional=True, group="_account_id"
    )
    """The AWS Account ID of the Lambda Function"""

    outcome: "AwsLambdaTagsOutcome" = betterproto.enum_field(14)
    """The Outcome of the Lambda invocation"""

    error_exception_message: Optional[str] = betterproto.string_field(
        15, optional=True, group="_error_exception_message"
    )
    """Optional error exception message."""

    error_exception_stacktrace: Optional[str] = betterproto.string_field(
        16, optional=True, group="_error_exception_stacktrace"
    )
    """Optional error exception stacktrace."""

    duration: Optional[int] = betterproto.uint32_field(
        17, optional=True, group="_duration"
    )
    """
    The billed duration of the invocation in milliseconds. This will not be
    available when instrumented, this will be upserted into this tag set after
    the report log from Cloudwatch is available.
    """

    request_body: Optional[str] = betterproto.string_field(
        18, optional=True, group="_request_body"
    )
    """Request body"""

    response_body: Optional[str] = betterproto.string_field(
        19, optional=True, group="_response_body"
    )
    """Response body"""

    sqs: Optional["AwsSqsEventTags"] = betterproto.message_field(
        100, optional=True, group="_sqs"
    )
    """Will be set if the function is handling a SQS event"""

    sns: Optional["AwsSnsEventTags"] = betterproto.message_field(
        101, optional=True, group="_sns"
    )
    """Will be set if the function is handling a SNS event"""

    http: Optional["HttpTags"] = betterproto.message_field(
        102, optional=True, group="_http"
    )
    """
    Will be set if the function is handling HTTP requests via any method, API
    GW, Function URLs, etc.
    """

    api_gateway: Optional["AwsApiGatewayTags"] = betterproto.message_field(
        103, optional=True, group="_api_gateway"
    )
    """Will be set if the function is handling HTTP requests via AWS API GW"""

    http_router: Optional["HttpRouterTags"] = betterproto.message_field(
        106, optional=True, group="_http_router"
    )
    """
    Will be set if function is handling HTTP requests and there's routing
    functionality setup
    """

    initialization: Optional["AwsLambdaInitializationTags"] = betterproto.message_field(
        104, optional=True, group="_initialization"
    )
    """The root AWS Lambda Span tags."""

    invocation: Optional["AwsLambdaInvocationTags"] = betterproto.message_field(
        105, optional=True, group="_invocation"
    )
    """The AWS Lambda Invocation tags."""


@dataclass(eq=False, repr=False)
class HttpRouterTags(betterproto.Message):
    """
    Describe routing of incoming HTTP requests. Reflects configuration of a
    router used to route the request It can be Express.js, or API Gateway if
    Express.js is not detected to be used
    """

    path: str = betterproto.string_field(1)
    """
    The HTTP Path defined by the route handler (either express or API Gateway)
    """


@dataclass(eq=False, repr=False)
class AwsSqsEventTags(betterproto.Message):
    queue_name: str = betterproto.string_field(1)
    """Taken from the eventSourceARN"""

    message_ids: List[str] = betterproto.string_field(2)
    """Introspected from the events records"""


@dataclass(eq=False, repr=False)
class AwsSnsEventTags(betterproto.Message):
    topic_name: str = betterproto.string_field(1)
    """Taken from the TopicARN"""

    message_ids: List[str] = betterproto.string_field(2)
    """Introspected from the events records"""


@dataclass(eq=False, repr=False)
class AwsLambdaInitializationTags(betterproto.Message):
    initialization_duration: int = betterproto.uint32_field(1)
    """
    The Initialization Duration of the Lambda Function. This is one part of the
    billed duration. Maps to the Cloudwatch Logs Report "Init Duration"
    """


@dataclass(eq=False, repr=False)
class AwsLambdaInvocationTags(betterproto.Message):
    invocation_duration: int = betterproto.uint32_field(1)
    """
    The Invocation Duration of the Lambda Function. This is one part of the
    billed duration. Maps to the Cloudwatch Logs Report "Duration"
    """


@dataclass(eq=False, repr=False)
class AwsSdkTags(betterproto.Message):
    region: Optional[str] = betterproto.string_field(2, optional=True, group="_region")
    """The AWS Region this SDK call is being made against."""

    signature_version: Optional[str] = betterproto.string_field(
        3, optional=True, group="_signature_version"
    )
    """AWS Authentication signature version of the request."""

    service: str = betterproto.string_field(4)
    """The name of the service to which a request is made."""

    operation: str = betterproto.string_field(5)
    """The name of the operation corresponding to the request."""

    request_id: Optional[str] = betterproto.string_field(
        6, optional=True, group="_request_id"
    )
    """The unique ID of the request."""

    error: Optional[str] = betterproto.string_field(7, optional=True, group="_error")
    """An optional error returned from the AWS APIs."""

    dynamodb: Optional["AwsSdkDynamodbTags"] = betterproto.message_field(
        100, optional=True, group="_dynamodb"
    )
    sqs: Optional["AwsSdkSqsTags"] = betterproto.message_field(
        101, optional=True, group="_sqs"
    )
    sns: Optional["AwsSdkSnsTags"] = betterproto.message_field(
        102, optional=True, group="_sns"
    )


@dataclass(eq=False, repr=False)
class AwsSdkDynamodbTags(betterproto.Message):
    table_name: Optional[str] = betterproto.string_field(
        1, optional=True, group="_table_name"
    )
    """The DynamoDB table name"""

    projection: Optional[str] = betterproto.string_field(
        2, optional=True, group="_projection"
    )
    """The value of the ProjectionExpression request parameter."""

    scan_forward: Optional[bool] = betterproto.bool_field(
        3, optional=True, group="_scan_forward"
    )
    """The value of the ScanIndexForward request parameter."""

    attributes_to_get: List[str] = betterproto.string_field(4)
    """The value of the AttributesToGet request parameter."""

    consistent_read: Optional[bool] = betterproto.bool_field(
        5, optional=True, group="_consistent_read"
    )
    """The value of the ConsistentRead request parameter."""

    index_name: Optional[str] = betterproto.string_field(
        6, optional=True, group="_index_name"
    )
    """The value of the IndexName request parameter."""

    limit: Optional[int] = betterproto.uint32_field(7, optional=True, group="_limit")
    """The value of the Limit request parameter."""

    select: Optional[str] = betterproto.string_field(8, optional=True, group="_select")
    """The value of the Select request parameter."""

    segment: Optional[int] = betterproto.uint32_field(
        9, optional=True, group="_segment"
    )
    """The value of the Segment request parameter."""

    total_segments: Optional[int] = betterproto.uint64_field(
        10, optional=True, group="_total_segments"
    )
    """The value of the TotalSegments request parameter."""

    filter: Optional[str] = betterproto.string_field(11, optional=True, group="_filter")
    """The value of the FilterExpression request parameter."""

    key_condition: Optional[str] = betterproto.string_field(
        12, optional=True, group="_key_condition"
    )
    """The value of the KeyConditionExpression request parameter."""

    exclusive_start_key: Optional[str] = betterproto.string_field(
        13, optional=True, group="_exclusive_start_key"
    )
    """JSON string of the ExclusiveStartKey request parameter."""

    attribute_values: Optional[str] = betterproto.string_field(
        14, optional=True, group="_attribute_values"
    )
    """JSON string of the ExpressionAttributeValues request parameter."""

    count: Optional[int] = betterproto.uint64_field(100, optional=True, group="_count")
    """The value of the Count response parameter."""

    scanned_count: Optional[int] = betterproto.uint64_field(
        101, optional=True, group="_scanned_count"
    )
    """The value of the ScannedCount response parameter."""


@dataclass(eq=False, repr=False)
class AwsSdkSqsTags(betterproto.Message):
    queue_name: Optional[str] = betterproto.string_field(
        1, optional=True, group="_queue_name"
    )
    """The SQS queue name"""

    message_ids: List[str] = betterproto.string_field(2)
    """The message IDs provided in the SDK operation response."""


@dataclass(eq=False, repr=False)
class AwsSdkSnsTags(betterproto.Message):
    topic_name: Optional[str] = betterproto.string_field(
        1, optional=True, group="_topic_name"
    )
    """The SNS Topic name taken from the TopicArn request parameter."""

    message_ids: List[str] = betterproto.string_field(2)
    """The message IDs provided in the SDK operation response."""


@dataclass(eq=False, repr=False)
class ErrorTags(betterproto.Message):
    name: str = betterproto.string_field(1)
    """The Error Name"""

    message: Optional[str] = betterproto.string_field(
        2, optional=True, group="_message"
    )
    """The Error Message - Depending on runtime this is defined or not."""

    stacktrace: Optional[str] = betterproto.string_field(
        3, optional=True, group="_stacktrace"
    )
    """The Error stacktrace if applicable"""

    type: "ErrorTagsErrorType" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class NoticeTags(betterproto.Message):
    message: str = betterproto.string_field(1)
    """Notice Message"""

    type: Optional["NoticeTagsNoticeType"] = betterproto.enum_field(
        2, optional=True, group="_type"
    )


@dataclass(eq=False, repr=False)
class WarningTags(betterproto.Message):
    message: str = betterproto.string_field(1)
    """The Warning Message"""

    stacktrace: Optional[str] = betterproto.string_field(
        3, optional=True, group="_stacktrace"
    )
    """Stack trace listing where the warning was reported"""

    type: Optional["WarningTagsWarningType"] = betterproto.enum_field(
        2, optional=True, group="_type"
    )


@dataclass(eq=False, repr=False)
class Tags(betterproto.Message):
    """@validation_root"""

    aws: Optional["AwsTags"] = betterproto.message_field(
        100, optional=True, group="_aws"
    )
    """These tags are used an AWS resource/sdk is the producer of the span"""

    http: Optional["HttpTags"] = betterproto.message_field(
        106, optional=True, group="_http"
    )
    """These tags are used when an http library is making an http request"""

    https: Optional["HttpTags"] = betterproto.message_field(
        107, optional=True, group="_https"
    )
    """These tags are used when an http library is making a https request"""

    sdk: Optional["SdkTags"] = betterproto.message_field(
        112, optional=True, group="_sdk"
    )
    """
    These sdk tags are added at ingest time so we know where the data was
    generated from
    """

    environment: Optional[str] = betterproto.string_field(
        109, optional=True, group="_environment"
    )
    """
    Environment is added to all schemas during ingest as part of our data
    enrichment process @validation_top_level
    """

    namespace: Optional[str] = betterproto.string_field(
        110, optional=True, group="_namespace"
    )
    """
    Namespace is added to all schemas during ingest as part of our data
    enrichment process @validation_top_level
    """

    org_id: Optional[str] = betterproto.string_field(
        111, optional=True, group="_org_id"
    )
    """
    OrgId is added to all schemas during ingest as part of our data enrichment
    process @validation_top_level @validation_single_string
    """

    error: Optional["ErrorTags"] = betterproto.message_field(
        113, optional=True, group="_error"
    )
    """
    These tags are used when an error has occured and is reported on the event.
    """

    warning: Optional["WarningTags"] = betterproto.message_field(
        114, optional=True, group="_warning"
    )
    """
    These tags are used when a warning has occured and is reported on the
    event.
    """

    notice: Optional["NoticeTags"] = betterproto.message_field(
        115, optional=True, group="_notice"
    )
    """
    These tags are used when noteworthy situation occurs and is reported on the
    event.
    """


@dataclass(eq=False, repr=False)
class SlsTags(betterproto.Message):
    org_id: str = betterproto.string_field(1)
    """A Serverless Platform OrgId."""

    platform: Optional[str] = betterproto.string_field(
        2, optional=True, group="_platform"
    )
    """
    The platform that was instrumented. Currently Lambda is the only supported
    platform.
    """

    service: str = betterproto.string_field(3)
    """
    The service that was instrumented. For Lambda this will be the function
    name by default.
    """

    region: Optional[str] = betterproto.string_field(4, optional=True, group="_region")
    """
    The region that instrumentation was performed in. This is used to determine
    which Serverless Ingest API to use.
    """

    sdk: "SdkTags" = betterproto.message_field(5)
    environment: Optional[str] = betterproto.string_field(
        16, optional=True, group="_environment"
    )
    """
    An optional environment that can be attached. If there is an applicable
    environment tag this will be attached in a data enrichment process during
    ingestion.
    """

    namespace: Optional[str] = betterproto.string_field(
        17, optional=True, group="_namespace"
    )
    """
    An optional namespace that can be attached. If there is an applicable
    namespace tag this will be attached in a data enrichment process during
    ingestion.
    """


@dataclass(eq=False, repr=False)
class SdkTags(betterproto.Message):
    name: str = betterproto.string_field(1)
    """The Name of the Serverless SDK used to instrument."""

    version: str = betterproto.string_field(2)
    """The version of the Serverless SDK used to instrument."""
