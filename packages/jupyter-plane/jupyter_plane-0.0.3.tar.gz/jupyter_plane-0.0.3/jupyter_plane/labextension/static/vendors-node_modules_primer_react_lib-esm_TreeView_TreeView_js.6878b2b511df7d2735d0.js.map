{"version":3,"file":"vendors-node_modules_primer_react_lib-esm_TreeView_TreeView_js.6878b2b511df7d2735d0.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA6H;AACzF;AACD;AACmB;AAChB;AAC+B;AACG;AAChB;AACd;AACN;AACV;AACI;AACqB;AACA;AACH;AACiC;AAChC;;AAEjD;AACA;;AAEA,iCAAiC,0DAA4B;AAC7D,0BAA0B;AAC1B;AACA;AACA;AACA,CAAC;AACD,iCAAiC,0DAA4B;AAC7D;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,yBAAyB;AACzB;AACA;AACA,CAAC;;AAED;AACA;;AAEA,cAAc,sEAAoB;AAClC;AACA;AACA,CAAC,oBAAoB,UAAU,SAAS,uBAAuB,aAAa,4CAA4C,gCAAgC,8BAA8B,gCAAgC,qBAAqB,iCAAiC,UAAU,oBAAoB,kBAAkB,aAAa,uGAAuG,4CAA4C,WAAW,gBAAgB,eAAe,WAAW,mBAAmB,eAAe,QAAQ,sBAAsB,8BAA8B,8BAA8B,sBAAsB,wBAAwB,sBAAsB,oBAAoB,6CAA6C,6BAA6B,eAAe,8BAA8B,gBAAgB,+EAA+E,sBAAsB,SAAS,WAAW,kBAAkB,wBAAwB,WAAW,cAAc,cAAc,sBAAsB,mBAAmB,8BAA8B,kCAAkC,8BAA8B,iBAAiB,aAAa,mBAAmB,uBAAuB,YAAY,YAAY,2CAA2C,uBAAuB,mCAAmC,4BAA4B,gCAAgC,+BAA+B,kBAAkB,aAAa,mBAAmB,YAAY,eAAe,UAAU,oCAAoC,cAAc,QAAQ,gBAAgB,mBAAmB,wBAAwB,8BAA8B,aAAa,YAAY,kCAAkC,WAAW,YAAY,uBAAuB,mBAAmB,qBAAqB,kCAAkC,0BAA0B,2FAA2F,oBAAoB,iCAAiC,aAAa,YAAY,wBAAwB,kBAAkB,UAAU,WAAW,UAAU,YAAY,gBAAgB,mBAAmB,mBAAmB,gBAAgB,QAAQ,kDAAG,sBAAsB,kDAAG,iBAAiB,kDAAG,uBAAuB,kDAAG,aAAa,kDAAG,2CAA2C,kDAAG,8CAA8C,kDAAG,aAAa,kDAAG,sBAAsB,kDAAG,aAAa,kDAAG,qBAAqB,kDAAG,yCAAyC,kDAAG,aAAa,kDAAG,aAAa,kDAAG,aAAa,kDAAG,aAAa,kDAAG,qBAAqB,kDAAG,0BAA0B,kDAAG,0BAA0B,kDAAG,wCAAwC,8CAAE;AACltF;AACA;AACA;AACA;AACA,CAAC;AACD,uBAAuB,mDAAqB;AAC5C,gDAAgD,qDAAuB;AACvE,yBAAyB,wDAA0B;AACnD;AACA,GAAG;AACH,EAAE,wEAAiB;AACnB;AACA,GAAG;AACH,EAAE,8DAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,6BAA6B,mDAAqB;AAClD;AACA;AACA;AACA,sBAAsB,0DAA4B;AAClD;AACA;AACA;AACA;AACA,GAAG,eAAe,0DAA4B,CAAC,uDAAuB,qBAAqB,0DAA4B,CAAC,0DAAc;AACtI;AACA;AACA;AACA,GAAG,iCAAiC,0DAA4B;AAChE;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE,EAAE,kEAAW;AACf,0BAA0B,uDAAyB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,IAAI,EAAE,uDAAyB;AAC/B,kBAAkB,uDAAK;AACvB,0BAA0B,uDAAK;AAC/B,2BAA2B,uDAAK;AAChC,sCAAsC,qFAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI,EAAE,uDAAyB;AAC/B;AACA;AACA;AACA;AACA,IAAI;AACJ,8CAA8C,qDAAuB;;AAErE;AACA,iCAAiC,wDAA0B;AAC3D;AACA;AACA;AACA,GAAG;;AAEH;AACA,iBAAiB,wDAA0B;AAC3C;AACA;AACA,GAAG;AACH,wBAAwB,wDAA0B;AAClD;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,sBAAsB,0DAA4B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,eAAe,0DAA4B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE,iBAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,GAAG,eAAe,0DAA4B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG,eAAe,0DAA4B;AAC9C;AACA;AACA;AACA;AACA,GAAG,eAAe,0DAA4B;AAC9C;AACA,GAAG;AACH;AACA;AACA,EAAE,0DAA4B;AAC9B,eAAe,iDAAU;AACzB;AACA;AACA;AACA;AACA;AACA,GAAG,4BAA4B,0DAA4B,CAAC,mEAAe;AAC3E;AACA,GAAG,iBAAiB,0DAA4B,CAAC,oEAAgB;AACjE;AACA,GAAG,wBAAwB,0DAA4B;AACvD;AACA;AACA,GAAG,eAAe,0DAA4B,oCAAoC,0DAA4B,CAAC,uDAAuB,0CAA0C,0DAA4B;AAC5M;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD,sBAAsB,0DAA4B;AAClD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG,iCAAiC,0DAA4B;AAChE;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,IAAI,EAAE,uDAAyB;AAC/B;AACA;AACA;AACA;AACA;AACA,IAAI,EAAE,uDAAyB;AAC/B,0DAA0D,qDAAuB;AACjF;AACA;AACA,IAAI,EAAE,qEAAc;AACpB,yBAAyB,mDAAqB;AAC9C,cAAc,mDAAqB;AACnC,kCAAkC,qDAAuB;AACzD,EAAE,sDAAwB;AAC1B;AACA;AACA;AACA,GAAG;AACH,EAAE,sDAAwB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,EAAE,sDAAwB;AAC1B;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,yBAAyB,8DAAiB;AAC1C;AACA;AACA,4BAA4B,YAAY;AACxC,UAAU;AACV,4BAA4B,YAAY;AACxC;AACA,OAAO;AACP;AACA;AACA,GAAG;;AAEH;AACA,EAAE,sDAAwB;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2EAAoB;AACjD;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,sBAAsB,0DAA4B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,sCAAsC,0DAA4B;AACrE;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,gBAAgB,4DAAS,QAAQ,oBAAoB,GAAG,kBAAkB;AAC1E,qBAAqB,mEAAiB;AACtC;AACA,CAAC;AACD;AACA;AACA,CAAC,iBAAiB,mBAAmB,kBAAkB,YAAY,wBAAwB,gBAAgB,8CAA8C,gEAAgE,eAAe,eAAe,sBAAsB,oCAAoC,UAAU,WAAW,cAAc,WAAW,YAAY,sBAAsB,kBAAkB,8BAA8B,8BAA8B,sBAAsB,SAAS,WAAW,cAAc,yCAAyC,YAAY,sBAAsB,kBAAkB,8BAA8B,8BAA8B,sBAAsB,sBAAsB,+BAA+B,sBAAsB,+BAA+B,sBAAsB,+BAA+B,sBAAsB,+BAA+B,sBAAsB,+BAA+B,aAAa,kDAAG,2BAA2B,kDAAG;AAC7+B,iCAAiC,uDAAyB;AAC1D;AACA,CAAC;AACD,iBAAiB,uDAAK;AACtB;AACA,wBAAwB,0DAA4B;AACpD;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL,0BAA0B,0DAA4B;AACtD;AACA;AACA,OAAO;AACP,KAAK,gBAAgB,0DAA4B;AACjD;AACA,KAAK;AACL;AACA,sBAAsB,0DAA4B;AAClD;AACA;AACA,GAAG,eAAe,0DAA4B,mCAAmC,0DAA4B,CAAC,oDAAO;AACrH;AACA,GAAG,iBAAiB,0DAA4B,CAAC,iDAAI;AACrD;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA,SAAS,oDAAsB;AAC/B,oBAAoB,6DAA+B,sCAAsC,2DAA6B;AACtH,mCAAmC,6DAA+B,2CAA2C,2DAA6B;AAC1I;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,EAAE,uDAAyB;AAC/B;AACA;AACA,GAAG;AACH,sBAAsB,0DAA4B;AAClD;AACA,GAAG,eAAe,0DAA4B;AAC9C;AACA;AACA;AACA,GAAG,6BAA6B,0DAA4B;AAC5D;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,EAAE,uDAAyB;AAC/B;AACA;AACA,GAAG;AACH,sBAAsB,0DAA4B;AAClD;AACA,GAAG,eAAe,0DAA4B;AAC9C;AACA;AACA;AACA,GAAG,6BAA6B,0DAA4B;AAC5D;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI,EAAE,uDAAyB;AAC/B,4BAA4B,6EAAyB,GAAG,yEAAqB;AAC7E,sBAAsB,0DAA4B;AAClD;AACA,GAAG,eAAe,0DAA4B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,IAAI,EAAE,uDAAyB;AAC/B;AACA;AACA;AACA,IAAI,0DAA4B;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,eAAe,0DAA4B,CAAC,8EAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAEmB;;;;;;;;;;;;;;;ACliBpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE6B;;;;;;;;;;;;;;;;;;;;;;;;;ACZ2B;AACA;AACV;;AAE9C;AACA;AACA,CAAC;AACD;AACA,EAAE,oEAAY;AACd;AACA,cAAc,sEAAuB,GAAG,wEAAyB,GAAG,mEAAoB,GAAG,kEAAmB,GAAG,mEAAoB;AACrI;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;;AAEA;AACA,aAAa,cAAc,EAAE,UAAU;AACvC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oEAAkB;AAC5C;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEmK;;;;;;;;;;;;;;;;;;;ACvLhI;AACqB;AACR;;AAEhD;AACA;AACA;AACA,CAAC;AACD,sBAAsB,mDAAqB;AAC3C,qBAAqB,mDAAqB;AAC1C,2BAA2B,mDAAqB;AAChD;AACA;AACA;AACA,IAAI,EAAE,oEAAc;;AAEpB;AACA,EAAE,sDAAwB;AAC1B;AACA,GAAG;;AAEH;AACA,2BAA2B,wDAA0B;AACrD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,6DAAiB;AACpC;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,EAAE,sDAAwB;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEwB;;;;;;;;;;;;;;;;;AC7FW;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,oCAAoC,qDAAuB;AAC3D,qBAAqB,mDAAqB;AAC1C,yBAAyB,mDAAqB;AAC9C,EAAE,sDAAwB;AAC1B;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,wDAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE,sDAAwB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,KAAqC;AAClD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,2BAA2B,QAAQ;AACnC,EAAE,EAAE,CAA2B;;AAEC","sources":["webpack://@datalayer/jupyter-plane/../../../node_modules/@primer/react/lib-esm/TreeView/TreeView.js","webpack://@datalayer/jupyter-plane/../../../node_modules/@primer/react/lib-esm/TreeView/shared.js","webpack://@datalayer/jupyter-plane/../../../node_modules/@primer/react/lib-esm/TreeView/useRovingTabIndex.js","webpack://@datalayer/jupyter-plane/../../../node_modules/@primer/react/lib-esm/TreeView/useTypeahead.js","webpack://@datalayer/jupyter-plane/../../../node_modules/@primer/react/lib-esm/hooks/useControllableState.js"],"sourcesContent":["import { ChevronDownIcon, ChevronRightIcon, FileDirectoryOpenFillIcon, FileDirectoryFillIcon } from '@primer/octicons-react';\nimport classnames from 'classnames';\nimport React__default from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { get } from '../constants.js';\nimport { ConfirmationDialog } from '../Dialog/ConfirmationDialog.js';\nimport { useControllableState } from '../hooks/useControllableState.js';\nimport useSafeTimeout from '../hooks/useSafeTimeout.js';\nimport { useId } from '../hooks/useId.js';\nimport Spinner from '../Spinner.js';\nimport sx from '../sx.js';\nimport Text from '../Text.js';\nimport createSlots from '../utils/create-slots.js';\nimport VisuallyHidden from '../_VisuallyHidden.js';\nimport { getAccessibleName } from './shared.js';\nimport { useRovingTabIndex, getFirstChildElement } from './useRovingTabIndex.js';\nimport { useTypeahead } from './useTypeahead.js';\n\n// ----------------------------------------------------------------------------\n// Context\n\nconst RootContext = /*#__PURE__*/React__default.createContext({\n  announceUpdate: () => {},\n  expandedStateCache: {\n    current: new Map()\n  }\n});\nconst ItemContext = /*#__PURE__*/React__default.createContext({\n  itemId: '',\n  level: 1,\n  isSubTreeEmpty: false,\n  setIsSubTreeEmpty: () => {},\n  isExpanded: false,\n  setIsExpanded: () => {},\n  leadingVisualId: '',\n  trailingVisualId: ''\n});\n\n// ----------------------------------------------------------------------------\n// TreeView\n\nconst UlBox = styled.ul.withConfig({\n  displayName: \"TreeView__UlBox\",\n  componentId: \"sc-4ex6b6-0\"\n})([\"list-style:none;padding:0;margin:0;.PRIVATE_TreeView-item{outline:none;&:focus-visible > div,&.focus-visible > div{box-shadow:inset 0 0 0 2px \", \";@media (forced-colors:active){outline:2px solid HighlightText;outline-offset:-2;}}}.PRIVATE_TreeView-item-container{--level:1;--toggle-width:1rem;position:relative;display:grid;grid-template-columns:calc(calc(var(--level) - 1) * (var(--toggle-width) / 2)) var(--toggle-width) 1fr;grid-template-areas:'spacer toggle content';width:100%;min-height:2rem;font-size:\", \";color:\", \";border-radius:\", \";cursor:pointer;&:hover{background-color:\", \";@media (forced-colors:active){outline:2px solid transparent;outline-offset:-2px;}}@media (pointer:coarse){--toggle-width:1.5rem;min-height:2.75rem;}&:has(.PRIVATE_TreeView-item-skeleton):hover{background-color:transparent;cursor:default;@media (forced-colors:active){outline:none;}}}.PRIVATE_TreeView-item[aria-current='true'] > .PRIVATE_TreeView-item-container{background-color:\", \";&::after{content:'';position:absolute;top:calc(50% - 0.75rem);left:-\", \";width:0.25rem;height:1.5rem;background-color:\", \";border-radius:\", \";@media (forced-colors:active){background-color:HighlightText;}}}.PRIVATE_TreeView-item-toggle{grid-area:toggle;display:flex;align-items:center;justify-content:center;height:100%;color:\", \";}.PRIVATE_TreeView-item-toggle--hover:hover{background-color:\", \";}.PRIVATE_TreeView-item-toggle--end{border-top-left-radius:\", \";border-bottom-left-radius:\", \";}.PRIVATE_TreeView-item-content{grid-area:content;display:flex;align-items:center;height:100%;padding:0 \", \";gap:\", \";}.PRIVATE_TreeView-item-content-text{flex:1 1 auto;width:0;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;}.PRIVATE_TreeView-item-visual{display:flex;color:\", \";}.PRIVATE_TreeView-item-level-line{width:100%;height:100%;border-right:1px solid;border-color:\", \";}@media (hover:hover){.PRIVATE_TreeView-item-level-line{border-color:transparent;}&:hover .PRIVATE_TreeView-item-level-line,&:focus-within .PRIVATE_TreeView-item-level-line{border-color:\", \";}}.PRIVATE_TreeView-directory-icon{display:grid;color:\", \";}.PRIVATE_VisuallyHidden{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0;}\", \"\"], get(`colors.accent.fg`), get('fontSizes.1'), get('colors.fg.default'), get('radii.2'), get('colors.actionListItem.default.hoverBg'), get('colors.actionListItem.default.selectedBg'), get('space.2'), get('colors.accent.fg'), get('radii.2'), get('colors.fg.muted'), get('colors.treeViewItem.chevron.hoverBg'), get('radii.2'), get('radii.2'), get('space.2'), get('space.2'), get('colors.fg.muted'), get('colors.border.subtle'), get('colors.border.subtle'), get('colors.treeViewItem.directory.fill'), sx);\nconst Root = ({\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledby,\n  children\n}) => {\n  const containerRef = React__default.useRef(null);\n  const [ariaLiveMessage, setAriaLiveMessage] = React__default.useState('');\n  const announceUpdate = React__default.useCallback(message => {\n    setAriaLiveMessage(message);\n  }, []);\n  useRovingTabIndex({\n    containerRef\n  });\n  useTypeahead({\n    containerRef,\n    onFocusChange: element => {\n      if (element instanceof HTMLElement) {\n        element.focus();\n      }\n    }\n  });\n  const expandedStateCache = React__default.useRef(null);\n  if (expandedStateCache.current === null) {\n    expandedStateCache.current = new Map();\n  }\n  return /*#__PURE__*/React__default.createElement(RootContext.Provider, {\n    value: {\n      announceUpdate,\n      expandedStateCache\n    }\n  }, /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(VisuallyHidden, {\n    role: \"status\",\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\"\n  }, ariaLiveMessage), /*#__PURE__*/React__default.createElement(UlBox, {\n    ref: containerRef,\n    role: \"tree\",\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby\n  }, children)));\n};\nRoot.displayName = \"Root\";\nRoot.displayName = 'TreeView';\n\n// ----------------------------------------------------------------------------\n// TreeView.Item\n\nconst {\n  Slots,\n  Slot\n} = createSlots(['LeadingVisual', 'TrailingVisual']);\nconst Item = /*#__PURE__*/React__default.forwardRef(({\n  id: itemId,\n  containIntrinsicSize,\n  current: isCurrentItem = false,\n  defaultExpanded,\n  expanded,\n  onExpandedChange,\n  onSelect,\n  children\n}, ref) => {\n  const {\n    expandedStateCache\n  } = React__default.useContext(RootContext);\n  const labelId = useId();\n  const leadingVisualId = useId();\n  const trailingVisualId = useId();\n  const [isExpanded, setIsExpanded] = useControllableState({\n    name: itemId,\n    // If the item was previously mounted, it's expanded state might be cached.\n    // We check the cache first, and then fall back to the defaultExpanded prop.\n    // If defaultExpanded is not provided, we default to false unless the item\n    // is the current item, in which case we default to true.\n    defaultValue: () => {\n      var _ref, _expandedStateCache$c, _expandedStateCache$c2;\n      return (_ref = (_expandedStateCache$c = (_expandedStateCache$c2 = expandedStateCache.current) === null || _expandedStateCache$c2 === void 0 ? void 0 : _expandedStateCache$c2.get(itemId)) !== null && _expandedStateCache$c !== void 0 ? _expandedStateCache$c : defaultExpanded) !== null && _ref !== void 0 ? _ref : isCurrentItem;\n    },\n    value: expanded,\n    onChange: onExpandedChange\n  });\n  const {\n    level\n  } = React__default.useContext(ItemContext);\n  const {\n    hasSubTree,\n    subTree,\n    childrenWithoutSubTree\n  } = useSubTree(children);\n  const [isSubTreeEmpty, setIsSubTreeEmpty] = React__default.useState(!hasSubTree);\n\n  // Set the expanded state and cache it\n  const setIsExpandedWithCache = React__default.useCallback(newIsExpanded => {\n    var _expandedStateCache$c3;\n    setIsExpanded(newIsExpanded);\n    (_expandedStateCache$c3 = expandedStateCache.current) === null || _expandedStateCache$c3 === void 0 ? void 0 : _expandedStateCache$c3.set(itemId, newIsExpanded);\n  }, [itemId, setIsExpanded, expandedStateCache]);\n\n  // Expand or collapse the subtree\n  const toggle = React__default.useCallback(event => {\n    setIsExpandedWithCache(!isExpanded);\n    event === null || event === void 0 ? void 0 : event.stopPropagation();\n  }, [isExpanded, setIsExpandedWithCache]);\n  const handleKeyDown = React__default.useCallback(event => {\n    switch (event.key) {\n      case 'Enter':\n        if (onSelect) {\n          onSelect(event);\n        } else {\n          toggle(event);\n        }\n        break;\n      case 'ArrowRight':\n        event.preventDefault();\n        event.stopPropagation();\n        setIsExpandedWithCache(true);\n        break;\n      case 'ArrowLeft':\n        event.preventDefault();\n        event.stopPropagation();\n        setIsExpandedWithCache(false);\n        break;\n    }\n  }, [onSelect, setIsExpandedWithCache, toggle]);\n  return /*#__PURE__*/React__default.createElement(ItemContext.Provider, {\n    value: {\n      itemId,\n      level: level + 1,\n      isSubTreeEmpty,\n      setIsSubTreeEmpty,\n      isExpanded,\n      setIsExpanded: setIsExpandedWithCache,\n      leadingVisualId,\n      trailingVisualId\n    }\n  }, /*#__PURE__*/React__default.createElement(\"li\", {\n    className: \"PRIVATE_TreeView-item\",\n    ref: ref,\n    tabIndex: 0,\n    id: itemId,\n    role: \"treeitem\",\n    \"aria-labelledby\": labelId,\n    \"aria-describedby\": `${leadingVisualId} ${trailingVisualId}`,\n    \"aria-level\": level,\n    \"aria-expanded\": isSubTreeEmpty ? undefined : isExpanded,\n    \"aria-current\": isCurrentItem ? 'true' : undefined,\n    onKeyDown: handleKeyDown,\n    onFocus: event => {\n      var _event$currentTarget$;\n      // Scroll the first child into view when the item receives focus\n      (_event$currentTarget$ = event.currentTarget.firstElementChild) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.scrollIntoView({\n        block: 'nearest',\n        inline: 'nearest'\n      });\n\n      // Prevent focus event from bubbling up to parent items\n      event.stopPropagation();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"PRIVATE_TreeView-item-container\",\n    style: {\n      // @ts-ignore CSS custom property\n      '--level': level,\n      contentVisibility: containIntrinsicSize ? 'auto' : undefined,\n      containIntrinsicSize\n    },\n    onClick: event => {\n      if (onSelect) {\n        onSelect(event);\n      } else {\n        toggle(event);\n      }\n    },\n    onAuxClick: event => {\n      if (onSelect && event.button === 1) {\n        onSelect(event);\n      }\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    style: {\n      gridArea: 'spacer',\n      display: 'flex'\n    }\n  }, /*#__PURE__*/React__default.createElement(LevelIndicatorLines, {\n    level: level\n  })), hasSubTree ?\n  /*#__PURE__*/\n  // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n  React__default.createElement(\"div\", {\n    className: classnames('PRIVATE_TreeView-item-toggle', onSelect && 'PRIVATE_TreeView-item-toggle--hover', level === 1 && 'PRIVATE_TreeView-item-toggle--end'),\n    onClick: event => {\n      if (onSelect) {\n        toggle(event);\n      }\n    }\n  }, isExpanded ? /*#__PURE__*/React__default.createElement(ChevronDownIcon, {\n    size: 12\n  }) : /*#__PURE__*/React__default.createElement(ChevronRightIcon, {\n    size: 12\n  })) : null, /*#__PURE__*/React__default.createElement(\"div\", {\n    id: labelId,\n    className: \"PRIVATE_TreeView-item-content\"\n  }, /*#__PURE__*/React__default.createElement(Slots, null, slots => /*#__PURE__*/React__default.createElement(React__default.Fragment, null, slots.LeadingVisual, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: \"PRIVATE_TreeView-item-content-text\"\n  }, childrenWithoutSubTree), slots.TrailingVisual)))), subTree));\n});\n\n/** Lines to indicate the depth of an item in a TreeView */\nconst LevelIndicatorLines = ({\n  level\n}) => {\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    style: {\n      width: '100%',\n      display: 'flex'\n    }\n  }, Array.from({\n    length: level - 1\n  }).map((_, index) => /*#__PURE__*/React__default.createElement(\"div\", {\n    key: index,\n    className: \"PRIVATE_TreeView-item-level-line\"\n  })));\n};\nLevelIndicatorLines.displayName = \"LevelIndicatorLines\";\nItem.displayName = 'TreeView.Item';\n\n// ----------------------------------------------------------------------------\n// TreeView.SubTree\n\nconst SubTree = ({\n  count,\n  state,\n  children\n}) => {\n  const {\n    announceUpdate\n  } = React__default.useContext(RootContext);\n  const {\n    itemId,\n    isExpanded,\n    isSubTreeEmpty,\n    setIsSubTreeEmpty\n  } = React__default.useContext(ItemContext);\n  const [isLoadingItemVisible, setIsLoadingItemVisible] = React__default.useState(false);\n  const {\n    safeSetTimeout\n  } = useSafeTimeout();\n  const loadingItemRef = React__default.useRef(null);\n  const ref = React__default.useRef(null);\n  const [isPending, setPending] = React__default.useState(state === 'loading');\n  React__default.useEffect(() => {\n    if (state === 'loading') {\n      setPending(true);\n    }\n  }, [state]);\n  React__default.useEffect(() => {\n    // If `state` is undefined, we're working in a synchronous context and need\n    // to detect if the sub-tree has content. If `state === 'done` then we're\n    // working in an asynchronous context and need to see if there is content\n    // that has been loaded in.\n    if (state === undefined || state === 'done') {\n      if (!isSubTreeEmpty && !children) {\n        setIsSubTreeEmpty(true);\n      } else if (isSubTreeEmpty && children) {\n        setIsSubTreeEmpty(false);\n      }\n    }\n  }, [state, isSubTreeEmpty, setIsSubTreeEmpty, children]);\n\n  // If a consumer sets state=\"done\" without having a previous state (like `loading`),\n  // then it would announce on the first render. Using isPending is to only\n  // announce being \"loaded\" when the state has changed from `loading` --> `done`.\n  React__default.useEffect(() => {\n    if (isPending && state === 'done') {\n      const parentItem = document.getElementById(itemId);\n      if (!parentItem) return;\n      const {\n        current: node\n      } = ref;\n      const parentName = getAccessibleName(parentItem);\n      safeSetTimeout(() => {\n        if (node && node.childElementCount > 0) {\n          announceUpdate(`${parentName} content loaded`);\n        } else {\n          announceUpdate(`${parentName} is empty`);\n        }\n      });\n      setPending(false);\n    }\n  }, [state, itemId, announceUpdate, safeSetTimeout, isPending]);\n\n  // Manage loading indicator state\n  React__default.useEffect(() => {\n    // If we're in the loading state, but not showing the loading indicator yet,\n    // show the loading indicator\n    if (state === 'loading' && !isLoadingItemVisible) {\n      setIsLoadingItemVisible(true);\n    }\n\n    // If we're not in the loading state, but we're still showing a loading indicator,\n    // hide the loading indicator and move focus if necessary\n    if (state !== 'loading' && isLoadingItemVisible) {\n      const isLoadingItemFocused = document.activeElement === loadingItemRef.current;\n      setIsLoadingItemVisible(false);\n      if (isLoadingItemFocused) {\n        safeSetTimeout(() => {\n          const parentElement = document.getElementById(itemId);\n          if (!parentElement) return;\n          const firstChild = getFirstChildElement(parentElement);\n          if (firstChild) {\n            firstChild.focus();\n          } else {\n            parentElement.focus();\n          }\n        });\n      }\n    }\n  }, [state, safeSetTimeout, isLoadingItemVisible, itemId]);\n  if (!isExpanded) {\n    return null;\n  }\n  return /*#__PURE__*/React__default.createElement(\"ul\", {\n    role: \"group\",\n    style: {\n      listStyle: 'none',\n      padding: 0,\n      margin: 0\n    }\n    // @ts-ignore Box doesn't have type support for `ref` used in combination with `as`\n    ,\n    ref: ref\n  }, isLoadingItemVisible ? /*#__PURE__*/React__default.createElement(LoadingItem, {\n    ref: loadingItemRef,\n    count: count\n  }) : children);\n};\nSubTree.displayName = \"SubTree\";\nSubTree.displayName = 'TreeView.SubTree';\nconst shimmer = keyframes([\"from{mask-position:200%;}to{mask-position:0%;}\"]);\nconst SkeletonItem = styled.span.attrs({\n  className: 'PRIVATE_TreeView-item-skeleton'\n}).withConfig({\n  displayName: \"TreeView__SkeletonItem\",\n  componentId: \"sc-4ex6b6-1\"\n})([\"display:flex;align-items:center;column-gap:0.5rem;height:2rem;@media (pointer:coarse){height:2.75rem;}@media (prefers-reduced-motion:no-preference){mask-image:linear-gradient(75deg,#000 30%,rgba(0,0,0,0.65) 80%);mask-size:200%;animation:\", \";animation-duration:1s;animation-iteration-count:infinite;}&::before{content:'';display:block;width:1rem;height:1rem;background-color:\", \";border-radius:3px;@media (forced-colors:active){outline:1px solid transparent;outline-offset:-1px;}}&::after{content:'';display:block;width:var(--tree-item-loading-width,67%);height:1rem;background-color:\", \";border-radius:3px;@media (forced-colors:active){outline:1px solid transparent;outline-offset:-1px;}}&:nth-of-type(5n + 1){--tree-item-loading-width:67%;}&:nth-of-type(5n + 2){--tree-item-loading-width:47%;}&:nth-of-type(5n + 3){--tree-item-loading-width:73%;}&:nth-of-type(5n + 4){--tree-item-loading-width:64%;}&:nth-of-type(5n + 5){--tree-item-loading-width:50%;}\"], shimmer, get('colors.neutral.subtle'), get('colors.neutral.subtle'));\nconst LoadingItem = /*#__PURE__*/React__default.forwardRef(({\n  count\n}, ref) => {\n  const itemId = useId();\n  if (count) {\n    return /*#__PURE__*/React__default.createElement(Item, {\n      id: itemId,\n      ref: ref\n    }, Array.from({\n      length: count\n    }).map((_, i) => {\n      return /*#__PURE__*/React__default.createElement(SkeletonItem, {\n        \"aria-hidden\": true,\n        key: i\n      });\n    }), /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"PRIVATE_VisuallyHidden\"\n    }, \"Loading \", count, \" items\"));\n  }\n  return /*#__PURE__*/React__default.createElement(Item, {\n    id: itemId,\n    ref: ref\n  }, /*#__PURE__*/React__default.createElement(LeadingVisual, null, /*#__PURE__*/React__default.createElement(Spinner, {\n    size: \"small\"\n  })), /*#__PURE__*/React__default.createElement(Text, {\n    sx: {\n      color: 'fg.muted'\n    }\n  }, \"Loading...\"));\n});\nfunction useSubTree(children) {\n  return React__default.useMemo(() => {\n    const subTree = React__default.Children.toArray(children).find(child => /*#__PURE__*/React__default.isValidElement(child) && child.type === SubTree);\n    const childrenWithoutSubTree = React__default.Children.toArray(children).filter(child => !( /*#__PURE__*/React__default.isValidElement(child) && child.type === SubTree));\n    return {\n      subTree,\n      childrenWithoutSubTree,\n      hasSubTree: Boolean(subTree)\n    };\n  }, [children]);\n}\n\n// ----------------------------------------------------------------------------\n// TreeView.LeadingVisual and TreeView.TrailingVisual\n\nconst LeadingVisual = props => {\n  const {\n    isExpanded,\n    leadingVisualId\n  } = React__default.useContext(ItemContext);\n  const children = typeof props.children === 'function' ? props.children({\n    isExpanded\n  }) : props.children;\n  return /*#__PURE__*/React__default.createElement(Slot, {\n    name: \"LeadingVisual\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"PRIVATE_VisuallyHidden\",\n    \"aria-hidden\": true,\n    id: leadingVisualId\n  }, props.label), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"PRIVATE_TreeView-item-visual\",\n    \"aria-hidden\": true\n  }, children));\n};\nLeadingVisual.displayName = \"LeadingVisual\";\nLeadingVisual.displayName = 'TreeView.LeadingVisual';\nconst TrailingVisual = props => {\n  const {\n    isExpanded,\n    trailingVisualId\n  } = React__default.useContext(ItemContext);\n  const children = typeof props.children === 'function' ? props.children({\n    isExpanded\n  }) : props.children;\n  return /*#__PURE__*/React__default.createElement(Slot, {\n    name: \"TrailingVisual\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"PRIVATE_VisuallyHidden\",\n    \"aria-hidden\": true,\n    id: trailingVisualId\n  }, props.label), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"PRIVATE_TreeView-item-visual\",\n    \"aria-hidden\": true\n  }, children));\n};\nTrailingVisual.displayName = \"TrailingVisual\";\nTrailingVisual.displayName = 'TreeView.TrailingVisual';\n\n// ----------------------------------------------------------------------------\n// TreeView.DirectoryIcon\n\nconst DirectoryIcon = () => {\n  const {\n    isExpanded\n  } = React__default.useContext(ItemContext);\n  const Icon = isExpanded ? FileDirectoryOpenFillIcon : FileDirectoryFillIcon;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"PRIVATE_TreeView-directory-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, null));\n};\nDirectoryIcon.displayName = \"DirectoryIcon\";\nconst ErrorDialog = ({\n  title = 'Error',\n  children,\n  onRetry,\n  onDismiss\n}) => {\n  const {\n    itemId,\n    setIsExpanded\n  } = React__default.useContext(ItemContext);\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    React__default.createElement(\"div\", {\n      onKeyDown: event => {\n        if (['Backspace', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Enter'].includes(event.key)) {\n          // Prevent keyboard events from bubbling up to the TreeView\n          // and interfering with keyboard navigation\n          event.stopPropagation();\n        }\n      }\n    }, /*#__PURE__*/React__default.createElement(ConfirmationDialog, {\n      title: title,\n      onClose: gesture => {\n        // Focus parent item after the dialog is closed\n        setTimeout(() => {\n          const parentElement = document.getElementById(itemId);\n          parentElement === null || parentElement === void 0 ? void 0 : parentElement.focus();\n        });\n        if (gesture === 'confirm') {\n          onRetry === null || onRetry === void 0 ? void 0 : onRetry();\n        } else {\n          setIsExpanded(false);\n          onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss();\n        }\n      },\n      confirmButtonContent: \"Retry\",\n      cancelButtonContent: \"Dismiss\"\n    }, children))\n  );\n};\nErrorDialog.displayName = \"ErrorDialog\";\nErrorDialog.displayName = 'TreeView.ErrorDialog';\n\n// ----------------------------------------------------------------------------\n// Export\n\nconst TreeView = Object.assign(Root, {\n  Item,\n  SubTree,\n  LeadingVisual,\n  TrailingVisual,\n  DirectoryIcon,\n  ErrorDialog\n});\n\nexport { TreeView };\n","/**\n * Returns the accessible name of an element\n */\nfunction getAccessibleName(element) {\n  var _document$getElementB, _document$getElementB2, _element$textContent;\n  const label = element.getAttribute('aria-label');\n  const labelledby = element.getAttribute('aria-labelledby');\n  if (label) return label;\n  if (labelledby) return (_document$getElementB = (_document$getElementB2 = document.getElementById(labelledby)) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.textContent) !== null && _document$getElementB !== void 0 ? _document$getElementB : '';\n  return (_element$textContent = element.textContent) !== null && _element$textContent !== void 0 ? _element$textContent : '';\n}\n\nexport { getAccessibleName };\n","import { useFocusZone } from '../hooks/useFocusZone.js';\nimport { getScrollContainer } from '../utils/scroll.js';\nimport { FocusKeys } from '@primer/behaviors';\n\nfunction useRovingTabIndex({\n  containerRef\n}) {\n  // TODO: Initialize focus to the aria-current item if it exists\n  useFocusZone({\n    containerRef,\n    bindKeys: FocusKeys.ArrowVertical | FocusKeys.ArrowHorizontal | FocusKeys.HomeAndEnd | FocusKeys.Backspace | FocusKeys.PageUpDown,\n    preventScroll: true,\n    getNextFocusable: (direction, from, event) => {\n      var _getNextFocusableElem;\n      if (!(from instanceof HTMLElement)) return;\n      return (_getNextFocusableElem = getNextFocusableElement(from, event)) !== null && _getNextFocusableElem !== void 0 ? _getNextFocusableElem : from;\n    }\n  });\n}\n\n// DOM utilities used for focus management\n\nfunction getNextFocusableElement(activeElement, event) {\n  const elementState = getElementState(activeElement);\n\n  // Reference: https://www.w3.org/WAI/ARIA/apg/patterns/treeview/#keyboard-interaction-24\n  switch (`${elementState} ${event.key}`) {\n    case 'open ArrowRight':\n      // Focus first child node\n      return getFirstChildElement(activeElement);\n    case 'open ArrowLeft':\n      // Close node; don't change focus\n      return;\n    case 'closed ArrowRight':\n      // Open node; don't change focus\n      return;\n    case 'closed ArrowLeft':\n      // Focus parent element\n      return getParentElement(activeElement);\n    case 'end ArrowRight':\n      // Do nothing\n      return;\n    case 'end ArrowLeft':\n      // Focus parent element\n      return getParentElement(activeElement);\n  }\n\n  // ArrowUp, ArrowDown, Home, and End behavior are the same regarless of element state\n  switch (event.key) {\n    case 'ArrowUp':\n      // Focus previous visible element\n      return getVisibleElement(activeElement, 'previous');\n    case 'ArrowDown':\n      // Focus next visible element\n      return getVisibleElement(activeElement, 'next');\n    case 'Backspace':\n      return getParentElement(activeElement);\n    case 'Home':\n      // Focus first visible element\n      return getFirstElement(activeElement);\n    case 'End':\n      // Focus last visible element\n      return getLastElement(activeElement);\n    case 'PageUp':\n      return getPreviousPageElement(activeElement);\n    case 'PageDown':\n      return getNextPageElement(activeElement);\n  }\n}\nfunction getElementState(element) {\n  if (element.getAttribute('role') !== 'treeitem') {\n    throw new Error('Element is not a treeitem');\n  }\n  switch (element.getAttribute('aria-expanded')) {\n    case 'true':\n      return 'open';\n    case 'false':\n      return 'closed';\n    default:\n      return 'end';\n  }\n}\nfunction getVisibleElement(element, direction) {\n  const root = element.closest('[role=tree]');\n  if (!root) return;\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, node => {\n    if (!(node instanceof HTMLElement)) return NodeFilter.FILTER_SKIP;\n    return node.getAttribute('role') === 'treeitem' ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n  });\n  let current = walker.firstChild();\n  while (current !== element) {\n    current = walker.nextNode();\n  }\n  let next = direction === 'next' ? walker.nextNode() : walker.previousNode();\n\n  // If next element is nested inside a collapsed subtree, continue iterating\n  while (next instanceof HTMLElement && (_next$parentElement = next.parentElement) !== null && _next$parentElement !== void 0 && _next$parentElement.closest('[role=treeitem][aria-expanded=false]')) {\n    var _next$parentElement;\n    next = direction === 'next' ? walker.nextNode() : walker.previousNode();\n  }\n  return next instanceof HTMLElement ? next : undefined;\n}\nfunction getFirstChildElement(element) {\n  const firstChild = element.querySelector('[role=treeitem]');\n  return firstChild instanceof HTMLElement ? firstChild : undefined;\n}\nfunction getParentElement(element) {\n  const group = element.closest('[role=group]');\n  const parent = group === null || group === void 0 ? void 0 : group.closest('[role=treeitem]');\n  return parent instanceof HTMLElement ? parent : undefined;\n}\nfunction getFirstElement(element) {\n  const root = element.closest('[role=tree]');\n  const first = root === null || root === void 0 ? void 0 : root.querySelector('[role=treeitem]');\n  return first instanceof HTMLElement ? first : undefined;\n}\nfunction getLastElement(element) {\n  const root = element.closest('[role=tree]');\n  const items = Array.from((root === null || root === void 0 ? void 0 : root.querySelectorAll('[role=treeitem]')) || []);\n\n  // If there are no items, return undefined\n  if (items.length === 0) return;\n  let index = items.length - 1;\n  let last = items[index];\n\n  // If last element is nested inside a collapsed subtree, continue iterating\n  while (index > 0 && last instanceof HTMLElement && (_last$parentElement = last.parentElement) !== null && _last$parentElement !== void 0 && _last$parentElement.closest('[role=treeitem][aria-expanded=false]')) {\n    var _last$parentElement;\n    index -= 1;\n    last = items[index];\n  }\n  return last instanceof HTMLElement ? last : undefined;\n}\nconst defaultSize = {\n  height: 32\n};\n\n/**\n * Determine the page size for the given tree based on an item in the tree. We\n * estimate this size by trying to see how many items will fit in the given\n * tree. If the tree is within a scroll container, we will use the height of\n * that container. Otherwise, we'll use the current window height\n */\nfunction getPageSize(root, item) {\n  var _item$getBoundingClie, _scrollContainer$clie;\n  const scrollContainer = getScrollContainer(root);\n  const {\n    height: itemHeight\n  } = (_item$getBoundingClie = item === null || item === void 0 ? void 0 : item.getBoundingClientRect()) !== null && _item$getBoundingClie !== void 0 ? _item$getBoundingClie : defaultSize;\n  const availableHeight = (_scrollContainer$clie = scrollContainer === null || scrollContainer === void 0 ? void 0 : scrollContainer.clientHeight) !== null && _scrollContainer$clie !== void 0 ? _scrollContainer$clie : window.innerHeight;\n  return Math.floor(availableHeight / itemHeight);\n}\nfunction getNextPageElement(element) {\n  const root = element.closest('[role=\"tree\"]');\n  if (!root) {\n    return;\n  }\n  const items = Array.from(root.querySelectorAll('[role=\"treeitem\"]'));\n  if (items.length === 0) {\n    return;\n  }\n  const itemLabel = items[0].firstElementChild;\n  const pageSize = getPageSize(root, itemLabel);\n  const page = Math.floor(items.indexOf(element) / pageSize);\n  const offset = items.indexOf(element) - pageSize * page;\n  return items[Math.min(items.length - 1, (page + 1) * pageSize + offset)];\n}\nfunction getPreviousPageElement(element) {\n  const root = element.closest('[role=\"tree\"]');\n  if (!root) {\n    return;\n  }\n  const items = Array.from(root.querySelectorAll('[role=\"treeitem\"]'));\n  if (items.length === 0) {\n    return;\n  }\n  const itemLabel = items[0].firstElementChild;\n  const pageSize = getPageSize(root, itemLabel);\n  const page = Math.floor(items.indexOf(element) / pageSize);\n  const offset = items.indexOf(element) - pageSize * page;\n  return items[Math.max(0, (page - 1) * pageSize + offset)];\n}\n\nexport { getElementState, getFirstChildElement, getFirstElement, getLastElement, getNextFocusableElement, getParentElement, getVisibleElement, useRovingTabIndex };\n","import React__default from 'react';\nimport useSafeTimeout from '../hooks/useSafeTimeout.js';\nimport { getAccessibleName } from './shared.js';\n\nfunction useTypeahead({\n  containerRef,\n  onFocusChange\n}) {\n  const searchValue = React__default.useRef('');\n  const timeoutRef = React__default.useRef(0);\n  const onFocusChangeRef = React__default.useRef(onFocusChange);\n  const {\n    safeSetTimeout,\n    safeClearTimeout\n  } = useSafeTimeout();\n\n  // Update the ref when the callback changes\n  React__default.useEffect(() => {\n    onFocusChangeRef.current = onFocusChange;\n  }, [onFocusChange]);\n\n  // Focus the closest element that matches the search value\n  const focusSearchValue = React__default.useCallback(searchValue => {\n    // Don't change focus if the search value is empty\n    if (!searchValue) return;\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n\n    // Get focusable elements\n    const elements = Array.from(container.querySelectorAll('[role=\"treeitem\"]'));\n\n    // Get the index of active element\n    const activeIndex = elements.findIndex(element => element === document.activeElement);\n\n    // Wrap the array elements such that the active descendant is at the beginning\n    let sortedElements = wrapArray(elements, activeIndex);\n\n    // Remove the active descendant from the beginning of the array\n    // when the user initiates a new search\n    if (searchValue.length === 1) {\n      sortedElements = sortedElements.slice(1);\n    }\n\n    // Find the first element that matches the search value\n    const nextElement = sortedElements.find(element => {\n      const name = getAccessibleName(element).toLowerCase();\n      return name.startsWith(searchValue.toLowerCase());\n    });\n\n    // If a match is found, focus it\n    if (nextElement) {\n      onFocusChangeRef.current(nextElement);\n    }\n  }, [containerRef]);\n\n  // Update the search value when the user types\n  React__default.useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    function onKeyDown(event) {\n      // Ignore key presses that don't produce a character value\n      if (!event.key || event.key.length > 1) return;\n\n      // Ignore key presses that occur with a modifier\n      if (event.ctrlKey || event.altKey || event.metaKey) return;\n\n      // Update the existing search value with the new key press\n      searchValue.current += event.key;\n      focusSearchValue(searchValue.current);\n\n      // Reset the timeout\n      safeClearTimeout(timeoutRef.current);\n      timeoutRef.current = safeSetTimeout(() => searchValue.current = '', 300);\n\n      // Prevent default behavior\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    container.addEventListener('keydown', onKeyDown);\n    return () => container.removeEventListener('keydown', onKeyDown);\n  }, [containerRef, focusSearchValue, safeClearTimeout, safeSetTimeout]);\n}\n\n/**\n * Wraps an array around itself at a given start index\n *\n * @example\n * wrapArray(['a', 'b', 'c', 'd'], 2) // ['c', 'd', 'a', 'b']\n */\nfunction wrapArray(array, startIndex) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\n\nexport { useTypeahead };\n","import React__default from 'react';\n\n/**\n * This custom hook simplifies the behavior of a component if it has state that\n * can be both controlled and uncontrolled. It functions identical to a\n * useState() hook and provides [state, setState] for you to use. You can use\n * the `onChange` argument to allow updates to the `state` to be communicated to\n * owners of controlled components.\n *\n * Note: This hook will warn if a component is switching from controlled to\n * uncontrolled, or vice-versa.\n */\nfunction useControllableState({\n  name = 'custom',\n  defaultValue,\n  value,\n  onChange\n}) {\n  const [state, internalSetState] = React__default.useState(value !== null && value !== void 0 ? value : defaultValue);\n  const controlled = React__default.useRef(null);\n  const stableOnChange = React__default.useRef(onChange);\n  React__default.useEffect(() => {\n    stableOnChange.current = onChange;\n  });\n  if (controlled.current === null) {\n    controlled.current = value !== undefined;\n  }\n  const setState = React__default.useCallback(stateOrUpdater => {\n    var _stableOnChange$curre;\n    const value = typeof stateOrUpdater === 'function' ?\n    // @ts-ignore stateOrUpdater is a function\n    stateOrUpdater(state) : stateOrUpdater;\n    if (controlled.current === false) {\n      internalSetState(value);\n    }\n    (_stableOnChange$curre = stableOnChange.current) === null || _stableOnChange$curre === void 0 ? void 0 : _stableOnChange$curre.call(stableOnChange, value);\n  }, [state]);\n  React__default.useEffect(() => {\n    const controlledValue = value !== undefined;\n\n    // Uncontrolled -> Controlled\n    // If the component prop is uncontrolled, the prop value should be undefined\n    if (controlled.current === false && controlledValue) {\n      warn('A component is changing an uncontrolled %s component to be controlled. ' + 'This is likely caused by the value changing to a defined value ' + 'from undefined. Decide between using a controlled or uncontrolled ' + 'value for the lifetime of the component. ' + 'More info: https://reactjs.org/link/controlled-components', name);\n    }\n\n    // Controlled -> Uncontrolled\n    // If the component prop is controlled, the prop value should be defined\n    if (controlled.current === true && !controlledValue) {\n      warn('A component is changing a controlled %s component to be uncontrolled. ' + 'This is likely caused by the value changing to an undefined value ' + 'from a defined one. Decide between using a controlled or ' + 'uncontrolled value for the lifetime of the component. ' + 'More info: https://reactjs.org/link/controlled-components', name);\n    }\n  }, [name, value]);\n  if (controlled.current === true) {\n    return [value, setState];\n  }\n  return [state, setState];\n}\n\n/** Warn when running in a development environment */\nconst warn = process.env.NODE_ENV !== 'production' ?\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction warn(format, ...args) {\n  let index = 0;\n  const message = format.replace(/%s/g, () => {\n    return args[index++];\n  });\n  // eslint-disable-next-line no-console\n  console.warn(`Warning: ${message}`);\n} : function emptyFunction() {};\n\nexport { useControllableState };\n"],"names":[],"sourceRoot":""}