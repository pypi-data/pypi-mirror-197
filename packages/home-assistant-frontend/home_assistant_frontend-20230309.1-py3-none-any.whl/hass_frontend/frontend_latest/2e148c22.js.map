{"version":3,"file":"2e148c22.js","mappings":";;;;;;;;;;;;;;;;;;AAucA;AC7XA;;;;;AAiCA;;;;;;AC7CA","sources":["webpack://home-assistant-frontend/./src/components/ha-control-slider.ts","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-grid-card.ts","webpack://home-assistant-frontend/./src/components/tile/ha-tile-slider.ts"],"sourcesContent":["import { DIRECTION_ALL, Manager, Pan, Tap } from \"@egjs/hammerjs\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"slider-moved\": { value?: number };\n  }\n}\n\nconst A11Y_KEY_CODES = new Set([\n  \"ArrowRight\",\n  \"ArrowUp\",\n  \"ArrowLeft\",\n  \"ArrowDown\",\n  \"PageUp\",\n  \"PageDown\",\n  \"Home\",\n  \"End\",\n]);\n\nconst getPercentageFromEvent = (e: HammerInput, vertical: boolean) => {\n  if (vertical) {\n    const y = e.center.y;\n    const offset = e.target.getBoundingClientRect().top;\n    const total = e.target.clientHeight;\n    return Math.max(Math.min(1, 1 - (y - offset) / total), 0);\n  }\n  const x = e.center.x;\n  const offset = e.target.getBoundingClientRect().left;\n  const total = e.target.clientWidth;\n  return Math.max(Math.min(1, (x - offset) / total), 0);\n};\n\n@customElement(\"ha-control-slider\")\nexport class HaControlSlider extends LitElement {\n  @property({ type: Boolean, reflect: true })\n  public disabled = false;\n\n  @property()\n  public mode?: \"start\" | \"end\" | \"cursor\" = \"start\";\n\n  @property({ type: Boolean, reflect: true })\n  public vertical = false;\n\n  @property({ type: Boolean, attribute: \"show-handle\" })\n  public showHandle = false;\n\n  @property({ type: Number })\n  public value?: number;\n\n  @property({ type: Number })\n  public step = 1;\n\n  @property({ type: Number })\n  public min = 0;\n\n  @property({ type: Number })\n  public max = 100;\n\n  private _mc?: HammerManager;\n\n  @property({ type: Boolean, reflect: true })\n  public pressed = false;\n\n  valueToPercentage(value: number) {\n    return (this.boundedValue(value) - this.min) / (this.max - this.min);\n  }\n\n  percentageToValue(value: number) {\n    return (this.max - this.min) * value + this.min;\n  }\n\n  steppedValue(value: number) {\n    return Math.round(value / this.step) * this.step;\n  }\n\n  boundedValue(value: number) {\n    return Math.min(Math.max(value, this.min), this.max);\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n    this.setupListeners();\n    this.setAttribute(\"role\", \"slider\");\n    if (!this.hasAttribute(\"tabindex\")) {\n      this.setAttribute(\"tabindex\", \"0\");\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (changedProps.has(\"value\")) {\n      const valuenow = this.steppedValue(this.value ?? 0);\n      this.setAttribute(\"aria-valuenow\", valuenow.toString());\n    }\n    if (changedProps.has(\"min\")) {\n      this.setAttribute(\"aria-valuemin\", this.min.toString());\n    }\n    if (changedProps.has(\"max\")) {\n      this.setAttribute(\"aria-valuemax\", this.max.toString());\n    }\n    if (changedProps.has(\"vertical\")) {\n      const orientation = this.vertical ? \"vertical\" : \"horizontal\";\n      this.setAttribute(\"aria-orientation\", orientation);\n    }\n  }\n\n  connectedCallback(): void {\n    super.connectedCallback();\n    this.setupListeners();\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.destroyListeners();\n  }\n\n  @query(\"#slider\")\n  private slider;\n\n  setupListeners() {\n    if (this.slider && !this._mc) {\n      this._mc = new Manager(this.slider, {\n        touchAction: this.vertical ? \"pan-x\" : \"pan-y\",\n      });\n      this._mc.add(\n        new Pan({\n          threshold: 10,\n          direction: DIRECTION_ALL,\n          enable: true,\n        })\n      );\n\n      this._mc.add(new Tap({ event: \"singletap\" }));\n\n      let savedValue;\n      this._mc.on(\"panstart\", () => {\n        if (this.disabled) return;\n        this.pressed = true;\n        savedValue = this.value;\n      });\n      this._mc.on(\"pancancel\", () => {\n        if (this.disabled) return;\n        this.pressed = false;\n        this.value = savedValue;\n      });\n      this._mc.on(\"panmove\", (e) => {\n        if (this.disabled) return;\n        const percentage = getPercentageFromEvent(e, this.vertical);\n        this.value = this.percentageToValue(percentage);\n        const value = this.steppedValue(this.value);\n        fireEvent(this, \"slider-moved\", { value });\n      });\n      this._mc.on(\"panend\", (e) => {\n        if (this.disabled) return;\n        this.pressed = false;\n        const percentage = getPercentageFromEvent(e, this.vertical);\n        this.value = this.steppedValue(this.percentageToValue(percentage));\n        fireEvent(this, \"slider-moved\", { value: undefined });\n        fireEvent(this, \"value-changed\", { value: this.value });\n      });\n\n      this._mc.on(\"singletap\", (e) => {\n        if (this.disabled) return;\n        const percentage = getPercentageFromEvent(e, this.vertical);\n        this.value = this.steppedValue(this.percentageToValue(percentage));\n        fireEvent(this, \"value-changed\", { value: this.value });\n      });\n\n      this.addEventListener(\"keydown\", this._handleKeyDown);\n      this.addEventListener(\"keyup\", this._handleKeyUp);\n    }\n  }\n\n  destroyListeners() {\n    if (this._mc) {\n      this._mc.destroy();\n      this._mc = undefined;\n    }\n    this.removeEventListener(\"keydown\", this._handleKeyDown);\n    this.removeEventListener(\"keyup\", this._handleKeyDown);\n  }\n\n  private get _tenPercentStep() {\n    return Math.max(this.step, (this.max - this.min) / 10);\n  }\n\n  _handleKeyDown(e: KeyboardEvent) {\n    if (!A11Y_KEY_CODES.has(e.code)) return;\n    e.preventDefault();\n    switch (e.code) {\n      case \"ArrowRight\":\n      case \"ArrowUp\":\n        this.value = this.boundedValue((this.value ?? 0) + this.step);\n        break;\n      case \"ArrowLeft\":\n      case \"ArrowDown\":\n        this.value = this.boundedValue((this.value ?? 0) - this.step);\n        break;\n      case \"PageUp\":\n        this.value = this.steppedValue(\n          this.boundedValue((this.value ?? 0) + this._tenPercentStep)\n        );\n        break;\n      case \"PageDown\":\n        this.value = this.steppedValue(\n          this.boundedValue((this.value ?? 0) - this._tenPercentStep)\n        );\n        break;\n      case \"Home\":\n        this.value = this.min;\n        break;\n      case \"End\":\n        this.value = this.max;\n        break;\n    }\n    fireEvent(this, \"slider-moved\", { value: this.value });\n  }\n\n  _handleKeyUp(e: KeyboardEvent) {\n    if (!A11Y_KEY_CODES.has(e.code)) return;\n    e.preventDefault();\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div\n        id=\"slider\"\n        class=\"slider\"\n        style=${styleMap({\n          \"--value\": `${this.valueToPercentage(this.value ?? 0)}`,\n        })}\n      >\n        <div class=\"slider-track-background\"></div>\n        ${this.mode === \"cursor\"\n          ? this.value != null\n            ? html`\n                <div\n                  class=${classMap({\n                    \"slider-track-cursor\": true,\n                    vertical: this.vertical,\n                  })}\n                ></div>\n              `\n            : null\n          : html`\n              <div\n                class=${classMap({\n                  \"slider-track-bar\": true,\n                  vertical: this.vertical,\n                  [this.mode ?? \"start\"]: true,\n                  \"show-handle\": this.showHandle,\n                })}\n              ></div>\n            `}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        --control-slider-color: var(--primary-color);\n        --control-slider-background: var(--disabled-color);\n        --control-slider-background-opacity: 0.2;\n        --control-slider-thickness: 40px;\n        --control-slider-border-radius: 10px;\n        height: var(--control-slider-thickness);\n        width: 100%;\n        border-radius: var(--control-slider-border-radius);\n        outline: none;\n        transition: box-shadow 180ms ease-in-out;\n      }\n      :host(:focus-visible) {\n        box-shadow: 0 0 0 2px var(--control-slider-color);\n      }\n      :host([vertical]) {\n        width: var(--control-slider-thickness);\n        height: 100%;\n      }\n      .slider {\n        position: relative;\n        height: 100%;\n        width: 100%;\n        border-radius: var(--control-slider-border-radius);\n        transform: translateZ(0);\n        overflow: hidden;\n        cursor: pointer;\n      }\n      .slider * {\n        pointer-events: none;\n      }\n      .slider .slider-track-background {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        width: 100%;\n        background: var(--control-slider-background);\n        opacity: var(--control-slider-background-opacity);\n      }\n      .slider .slider-track-bar {\n        --border-radius: var(--control-slider-border-radius);\n        --handle-size: 4px;\n        --handle-margin: calc(var(--control-slider-thickness) / 8);\n        --slider-size: 100%;\n        position: absolute;\n        height: 100%;\n        width: 100%;\n        background-color: var(--control-slider-color);\n        transition: transform 180ms ease-in-out,\n          background-color 180ms ease-in-out;\n      }\n      .slider .slider-track-bar.show-handle {\n        --slider-size: calc(\n          100% - 2 * var(--handle-margin) - var(--handle-size)\n        );\n      }\n      .slider .slider-track-bar::after {\n        display: block;\n        content: \"\";\n        position: absolute;\n        margin: auto;\n        border-radius: var(--handle-size);\n        background-color: white;\n      }\n      .slider .slider-track-bar {\n        top: 0;\n        left: 0;\n        transform: translate3d(\n          calc((var(--value, 0) - 1) * var(--slider-size)),\n          0,\n          0\n        );\n        border-radius: 0 var(--border-radius) var(--border-radius) 0;\n      }\n      .slider .slider-track-bar:after {\n        top: 0;\n        bottom: 0;\n        right: var(--handle-margin);\n        height: 50%;\n        width: var(--handle-size);\n      }\n      .slider .slider-track-bar.end {\n        right: 0;\n        left: initial;\n        transform: translate3d(\n          calc(var(--value, 0) * var(--slider-size)),\n          0,\n          0\n        );\n        border-radius: var(--border-radius) 0 0 var(--border-radius);\n      }\n      .slider .slider-track-bar.end::after {\n        right: initial;\n        left: var(--handle-margin);\n      }\n\n      .slider .slider-track-bar.vertical {\n        bottom: 0;\n        left: 0;\n        transform: translate3d(\n          0,\n          calc((1 - var(--value, 0)) * var(--slider-size)),\n          0\n        );\n        border-radius: var(--border-radius) var(--border-radius) 0 0;\n      }\n      .slider .slider-track-bar.vertical:after {\n        top: var(--handle-margin);\n        right: 0;\n        left: 0;\n        bottom: initial;\n        width: 50%;\n        height: var(--handle-size);\n      }\n      .slider .slider-track-bar.vertical.end {\n        top: 0;\n        bottom: initial;\n        transform: translate3d(\n          0,\n          calc((0 - var(--value, 0)) * var(--slider-size)),\n          0\n        );\n        border-radius: 0 0 var(--border-radius) var(--border-radius);\n      }\n      .slider .slider-track-bar.vertical.end::after {\n        top: initial;\n        bottom: var(--handle-margin);\n      }\n\n      .slider .slider-track-cursor:after {\n        display: block;\n        content: \"\";\n        background-color: var(--secondary-text-color);\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n        margin: auto;\n        border-radius: var(--handle-size);\n      }\n\n      .slider .slider-track-cursor {\n        --cursor-size: calc(var(--control-slider-thickness) / 4);\n        --handle-size: 4px;\n        position: absolute;\n        background-color: white;\n        border-radius: var(--handle-size);\n        transition: left 180ms ease-in-out, bottom 180ms ease-in-out;\n        top: 0;\n        bottom: 0;\n        left: calc(var(--value, 0) * (100% - var(--cursor-size)));\n        width: var(--cursor-size);\n      }\n      .slider .slider-track-cursor:after {\n        height: 50%;\n        width: var(--handle-size);\n      }\n\n      .slider .slider-track-cursor.vertical {\n        top: initial;\n        right: 0;\n        left: 0;\n        bottom: calc(var(--value, 0) * (100% - var(--cursor-size)));\n        height: var(--cursor-size);\n        width: 100%;\n      }\n      .slider .slider-track-cursor.vertical:after {\n        height: var(--handle-size);\n        width: 50%;\n      }\n\n      :host([pressed]) .slider-track-bar,\n      :host([pressed]) .slider-track-cursor {\n        transition: none;\n      }\n      :host(:disabled) .slider {\n        cursor: not-allowed;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-control-slider\": HaControlSlider;\n  }\n}\n","import { css, CSSResultGroup } from \"lit\";\nimport { computeCardSize } from \"../common/compute-card-size\";\nimport { LovelaceCardEditor } from \"../types\";\nimport { HuiStackCard } from \"./hui-stack-card\";\nimport { GridCardConfig } from \"./types\";\n\nconst DEFAULT_COLUMNS = 3;\nconst SQUARE_ROW_HEIGHTS_BY_COLUMNS = {\n  1: 5,\n  2: 3,\n  3: 2,\n};\n\nclass HuiGridCard extends HuiStackCard<GridCardConfig> {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-grid-card-editor\");\n    return document.createElement(\"hui-grid-card-editor\");\n  }\n\n  public async getCardSize(): Promise<number> {\n    if (!this._cards || !this._config) {\n      return 0;\n    }\n\n    if (this.square) {\n      const rowHeight = SQUARE_ROW_HEIGHTS_BY_COLUMNS[this.columns] || 1;\n      return (\n        (this._cards.length < this.columns\n          ? rowHeight\n          : (this._cards.length / this.columns) * rowHeight) +\n        (this._config.title ? 1 : 0)\n      );\n    }\n\n    const promises: Array<Promise<number> | number> = [];\n\n    for (const element of this._cards) {\n      promises.push(computeCardSize(element));\n    }\n\n    const cardSizes = await Promise.all(promises);\n\n    let totalHeight = this._config.title ? 1 : 0;\n\n    // Each column will adjust to max card size of it's row\n    for (let start = 0; start < cardSizes.length; start += this.columns) {\n      totalHeight += Math.max(...cardSizes.slice(start, start + this.columns));\n    }\n\n    return totalHeight;\n  }\n\n  get columns() {\n    return this._config?.columns || DEFAULT_COLUMNS;\n  }\n\n  get square() {\n    return this._config?.square !== false;\n  }\n\n  setConfig(config: GridCardConfig) {\n    super.setConfig(config);\n    this.style.setProperty(\"--grid-card-column-count\", String(this.columns));\n    if (this.square) {\n      this.setAttribute(\"square\", \"\");\n    } else {\n      this.removeAttribute(\"square\");\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.sharedStyles,\n      css`\n        #root {\n          display: grid;\n          grid-template-columns: repeat(\n            var(--grid-card-column-count, ${DEFAULT_COLUMNS}),\n            minmax(0, 1fr)\n          );\n          grid-gap: var(--grid-card-gap, 8px);\n        }\n        :host([square]) #root {\n          grid-auto-rows: 1fr;\n        }\n        :host([square]) #root::before {\n          content: \"\";\n          width: 0;\n          padding-bottom: 100%;\n          grid-row: 1 / 1;\n          grid-column: 1 / 1;\n        }\n\n        :host([square]) #root > *:not([hidden]) {\n          grid-row: 1 / 1;\n          grid-column: 1 / 1;\n        }\n        :host([square]) #root > *:not([hidden]) ~ *:not([hidden]) {\n          /*\n\t       * Remove grid-row and grid-column from every element that comes after\n\t       * the first not-hidden element\n\t       */\n          grid-row: unset;\n          grid-column: unset;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-grid-card\": HuiGridCard;\n  }\n}\n\ncustomElements.define(\"hui-grid-card\", HuiGridCard);\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport \"../ha-control-slider\";\n\n@customElement(\"ha-tile-slider\")\nexport class HaTileSlider extends LitElement {\n  @property({ type: Boolean })\n  public disabled = false;\n\n  @property()\n  public mode?: \"start\" | \"end\" | \"cursor\" = \"start\";\n\n  @property({ type: Boolean, attribute: \"show-handle\" })\n  public showHandle = false;\n\n  @property({ type: Number })\n  public value?: number;\n\n  @property({ type: Number })\n  public step = 1;\n\n  @property({ type: Number })\n  public min = 0;\n\n  @property({ type: Number })\n  public max = 100;\n\n  @property() public label?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-control-slider\n        .disabled=${this.disabled}\n        .mode=${this.mode}\n        .value=${this.value}\n        .step=${this.step}\n        .min=${this.min}\n        .max=${this.max}\n        aria-label=${ifDefined(this.label)}\n        .showHandle=${this.showHandle}\n      >\n      </ha-control-slider>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-control-slider {\n        --control-slider-color: var(--tile-slider-color, var(--primary-color));\n        --control-slider-background: var(\n          --tile-slider-background,\n          var(--disabled-color)\n        );\n        --control-slider-background-opacity: var(\n          --tile-slider-background-opacity,\n          0.2\n        );\n        --control-slider-thickness: 40px;\n        --control-slider-border-radius: 10px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-tile-slider\": HaTileSlider;\n  }\n}\n"],"names":[],"sourceRoot":""}