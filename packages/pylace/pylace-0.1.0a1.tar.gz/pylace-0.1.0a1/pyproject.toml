[build-system]
requires = ["maturin>=0.13,<0.14"]
build-backend = "maturin"

[project]
name = "pylace"
version = "0.1.0a1"
description = "A probabalistic programming ML tool for science"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Programming Language :: Rust",
    "Topic :: Scientific/Engineering",
]
license = { text="SSPL-1.0" }
authors = [
  { name="Baxter Eaves", email="bax@redpoll.ai"},
  { name="Michael Schmidt", email="schmidt@redpoll.ai"},
]
maintainers = [
  { name="Baxter Eaves", email="bax@redpoll.ai"},
  { name="Michael Schmidt", email="schmidt@redpoll.ai"},
  { name="Ken Swanson", email="ken.swanson@redpoll.ai" }
]

dependencies = [
    'numpy ~= 1.21',
    'pandas ~= 1.3',
    'polars ~= 0.16.13',
    'scipy ~= 1.7',
    'plotly ~= 5.13.1',
    'tqdm ~= 4.64.1'
]

[project.urls]
Repository = "https://github.com/promised-ai/lace"

[tool.mypy]
files = ["lace"]
strict = true
enable_error_code = [
    "redundant-expr",
    "truthy-bool",
    "ignore-without-code",
]

disable_error_code = [
    "empty-body",
]

[[tool.mypy.overrides]]
module = ["lace.core.*"]
warn_return_any = false


[tool.ruff]
target-version = "py37"
line-length = 100
fix = true

select = [
  "E", # pycodestyle
  "W", # pycodestyle
  "F", # Pyflakes
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "D", # flake8-docstrings
  "I", # isort
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "Q", # flake8-quotes
  "UP", # pyupgrade
  "PT", # flake8-pytest-style
  "RUF", # Ruff-specific rules
]

ignore = [
  # Line length regulated by black
  "E501",
  # pydocstyle: http://www.pydocstyle.org/en/stable/error_codes.html
  # numpy convention with a few additional lints
  "D107",
  "D202", # No blank lines allowed after function docstring -> clashes with Black
  "D203",
  "D212",
  "D401",
  "D402",
  "D415",
  "D416",
  # flake8-pytest-style:
  "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
  # flake8-simplify
  "SIM102", # Use a single `if` statement instead of nested `if` statements
  # ruff
  "RUF005", # unpack-instead-of-concatenating-to-collection-literal
  "D100",
  "D101",
  "D103",
  "D105",
  "D417",
  "TCH001",
  "SIM114",
]

[tool.ruff.pycodestyle]
max-doc-length = 100

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
strict = true

[tool.black]
line-length = 80
