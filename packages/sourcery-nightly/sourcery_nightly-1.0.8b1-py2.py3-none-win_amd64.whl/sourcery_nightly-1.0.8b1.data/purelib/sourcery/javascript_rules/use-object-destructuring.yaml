rules:
  # These two rules together convert a series of property accesses into a single destructuring access.

- id: use-object-destructuring
  description: Prefer object destructuring when accessing and using properties.
  explanation: |
    Object destructuring can often remove an unnecessary temporary reference, as well as making your code more succinct.

    From the [Airbnb Javascript Style Guide](https://airbnb.io/javascript/#destructuring--object)
  language: javascript
  tags:
  - airbnb-javascript-style-guide
  - airbnb
  - default
  any:
  - pattern: |
      const ${property} = ${object}.${property}
    replacement: |
      const {${property}} = ${object}
  - pattern: |
      let ${property} = ${object}.${property}
    replacement: |
      let {${property}} = ${object}
  tests:
  - match: |
      const firstName = user.firstName;
    expect: |
      const {firstName} = user;
  - match: |
      let firstName = user.firstName;
    expect: |
      let {firstName} = user;

- id: combine-object-destructuring
  description: Combine destructure assignments.
  language: javascript
  any:
  - pattern: |
      const {...} = ${object};
      const {...} = ${object};
    replacement: |
      const {..., ...} = ${object};
  - pattern: |
      let {...} = ${object};
      let {...} = ${object};
    replacement: let {..., ...} = ${object};
  tests:
  - match: |
      const {firstName} = user;
      const {lastName} = user;
    expect: const {firstName, lastName} = user;
  - match: |
      let {firstName} = user;
      let {lastName} = user;
    expect: let {firstName, lastName} = user;
  - match: |
      const {a, b} = alphabet;
      const {c, d} = alphabet;
    expect: |
      const {a, b, c, d} = alphabet;
  - no-match: |
      const {firstUserName} = firstUser;
      const {secondUserName} = secondUser;
  - no-match: |
      let {firstUserName} = firstUser;
      const {secondUserName} = firstUser;
