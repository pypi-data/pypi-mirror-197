# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetQueryResultResult',
    'AwaitableGetQueryResultResult',
    'get_query_result',
    'get_query_result_output',
]

@pulumi.output_type
class GetQueryResultResult:
    """
    A collection of values returned by GetQueryResult.
    """
    def __init__(__self__, dataset=None, graph_image_url=None, id=None, query_id=None, query_json=None, query_url=None, results=None):
        if dataset and not isinstance(dataset, str):
            raise TypeError("Expected argument 'dataset' to be a str")
        pulumi.set(__self__, "dataset", dataset)
        if graph_image_url and not isinstance(graph_image_url, str):
            raise TypeError("Expected argument 'graph_image_url' to be a str")
        pulumi.set(__self__, "graph_image_url", graph_image_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if query_id and not isinstance(query_id, str):
            raise TypeError("Expected argument 'query_id' to be a str")
        pulumi.set(__self__, "query_id", query_id)
        if query_json and not isinstance(query_json, str):
            raise TypeError("Expected argument 'query_json' to be a str")
        pulumi.set(__self__, "query_json", query_json)
        if query_url and not isinstance(query_url, str):
            raise TypeError("Expected argument 'query_url' to be a str")
        pulumi.set(__self__, "query_url", query_url)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)

    @property
    @pulumi.getter
    def dataset(self) -> str:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter(name="graphImageUrl")
    def graph_image_url(self) -> str:
        return pulumi.get(self, "graph_image_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> str:
        """
        The ID of the Query created and executed to obtain the result.
        """
        return pulumi.get(self, "query_id")

    @property
    @pulumi.getter(name="queryJson")
    def query_json(self) -> str:
        return pulumi.get(self, "query_json")

    @property
    @pulumi.getter(name="queryUrl")
    def query_url(self) -> str:
        """
        The permalink to the executed query's results.
        """
        return pulumi.get(self, "query_url")

    @property
    @pulumi.getter
    def results(self) -> Sequence[Mapping[str, Any]]:
        return pulumi.get(self, "results")


class AwaitableGetQueryResultResult(GetQueryResultResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQueryResultResult(
            dataset=self.dataset,
            graph_image_url=self.graph_image_url,
            id=self.id,
            query_id=self.query_id,
            query_json=self.query_json,
            query_url=self.query_url,
            results=self.results)


def get_query_result(dataset: Optional[str] = None,
                     query_json: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQueryResultResult:
    """
    Use this data source to access information about an existing resource.

    :param str dataset: The dataset this query is associated with.
    :param str query_json: A JSON object describing the query according to the Query Specification. While the JSON can be constructed manually, it is easiest to use the _get_query_specification data source.
    """
    __args__ = dict()
    __args__['dataset'] = dataset
    __args__['queryJson'] = query_json
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('honeycomb:index/getQueryResult:GetQueryResult', __args__, opts=opts, typ=GetQueryResultResult).value

    return AwaitableGetQueryResultResult(
        dataset=__ret__.dataset,
        graph_image_url=__ret__.graph_image_url,
        id=__ret__.id,
        query_id=__ret__.query_id,
        query_json=__ret__.query_json,
        query_url=__ret__.query_url,
        results=__ret__.results)


@_utilities.lift_output_func(get_query_result)
def get_query_result_output(dataset: Optional[pulumi.Input[str]] = None,
                            query_json: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetQueryResultResult]:
    """
    Use this data source to access information about an existing resource.

    :param str dataset: The dataset this query is associated with.
    :param str query_json: A JSON object describing the query according to the Query Specification. While the JSON can be constructed manually, it is easiest to use the _get_query_specification data source.
    """
    ...
