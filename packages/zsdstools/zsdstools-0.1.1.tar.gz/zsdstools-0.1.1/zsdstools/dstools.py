import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt # data visualization
import seaborn as sns # statistical data visualization
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
import pandas as pd
from sklearn.model_selection import train_test_split
import math
from scipy.spatial.distance import jensenshannon
import warnings

# ignore warnings generated by Seaborn
warnings.filterwarnings("ignore")


def set_image_size(fig_size = (20,15), font_scale = 3):
  sns.set(font_scale = font_scale)
  plt.rcParams["figure.figsize"] = (20,15)
  plt.rcParams['legend.fontsize'] = 'x-large'

def max_print_out(pattern=True, fig_size = (20,15)):
    '''It will maximize print out line and set float format with .2f'''
    set_image_size(fig_size)
    number = None if pattern else 10
    # Set options to avoid truncation when displaying a dataframe
    pd.set_option("display.max_rows", number)
    pd.set_option("display.max_columns", 150)
    # Set floating point numbers to be displayed with 2 decimal places
    pd.set_option('display.float_format', '{:.2f}'.format)
    # for showing all entities 

# DataFrame Creation

# Function to calculate entropy of a single row
def entropy_function(row):
    entropy = 0
    for count in row:
        if count != 0:
          entropy -= count * math.log(count)
    return entropy

# Create a new entropy report that is based on one dataframe
def create_single_df_entropy_report(prob, target_label, name = 'triage'):
    """
    Create a new entropy report that is based on one dataframe

    Arguments:
    prob (dataframe): Takes the probability output dataframe
    target_label (dataframe): Takes the target label dataframe
    name (String) : Takes the name of this dataframe

    Returns:
    dataframe: Entropy report of probabilities output with target labels and the name of this dataframe

    Example:
    >>> all_report = create_single_df_entropy_report(all.iloc[:, 1:] , all.iloc[:, 0], 'all')
    |index|Diagnosis|entropy|dataset|
    |---|---|---|---|
    |0|REFLUX ESOPHAGITIS|0\.8959063511095817|all|
    |1|CONSTIPATION|1\.9491016202069602|all|
    |2|ABDOMINAL PAIN NYD|1\.8665818383234185|all|
    |3|ABDOMINAL PAIN NYD|1\.0685110005777079|all|
    |4|COLITIS|1\.6930067321377043|all|

    """
    # Apply function to each row
    entropy = prob.apply(entropy_function, axis=1)
    df = pd.DataFrame(entropy, columns = ['entropy'])
    df['dataset'] = name
    return pd.concat([target_label, df] , axis = 1)

# Combine entropy reports
def combine_entropy_reports(reports):
    """
    Create a new entropy report that is combined by multiple entropy reports 

    Arguments:
    reports (DataFrame Array): Takes a array form of inputs that cotains all entropy reports

    Returns:
    dataframe: Entropy report all inputs

    Example:
    >>> all_report = combine_entropy_reports([entropy_reports, new_reports])
    >>> all_report.head()
    """
    entropy_report = []
    for df in reports:
      entropy_report.append(df)  
    return pd.concat(entropy_report).reset_index(drop=True)


## Plot functions
def histogram_plot_summary(entropy_report):
    sns.histplot(data=entropy_report, x = 'entropy', kde=True, hue='dataset', alpha=0.7, bins=20)
    plt.title("Entropy histogram of all three datasets")
    plt.savefig("histogram_plot_summary.png")

def boxplot_summary(entropy_report):
    sns.boxplot(data=entropy_report, y="entropy", x='dataset')
    plt.title("Boxplot of all three datasets")
    plt.xlabel('Dataset')
    plt.ylabel('Entropy')
    plt.savefig("boxplot_summary.png")

def violin_plot_summary(entropy_report):
    sns.violinplot(data=entropy_report, y="entropy", x='dataset')
    plt.title("Violin plot of all three datasets")
    plt.xlabel('Dataset')
    plt.ylabel('Entropy')
    plt.savefig("violin_plot_summary.png")

def historgram_plot_facetgrid(entropy_report, fig_size = (40,40)):
    g = sns.FacetGrid(entropy_report, col="Diagnosis", col_wrap=5, sharey=False ,  sharex=False, hue = 'dataset')
    # Map histogram plot to "total_bill" column
    g.map(sns.histplot, "entropy", kde = True)
    g.set_titles(col_template="{col_name}")
    g.set_ylabels("Entropy")
    g.fig.set_size_inches(fig_size[0],fig_size[0])
    g.tight_layout()
    g.add_legend()
    # Set title and legends
    plt.savefig("historgram_plot_facetgrid.png")

def boxplot_facetgrid(entropy_report, fig_size = (40,40)):
    g = sns.FacetGrid(entropy_report,  col="Diagnosis", col_wrap=4, sharey=False ,  sharex=False)
    # Map histogram plot to "total_bill" column
    g.map(sns.boxplot, "dataset", "entropy",  palette="Set1")
    g.set_titles(col_template="{col_name}")
    g.set_ylabels("Entropy")
    g.fig.set_size_inches(fig_size[0],fig_size[0])
    g.tight_layout()
    g.add_legend()
    plt.savefig("boxplot_facetgrid.png")

def violinplot_facetgrid(entropy_report, fig_size = (40,40)):
    g = sns.FacetGrid(entropy_report,  col="Diagnosis", col_wrap=4, sharey=False ,  sharex=False)
    # Map histogram plot to "total_bill" column
    g.map(sns.violinplot, "dataset", "entropy",  palette="Set1")
    g.set_titles(col_template="{col_name}")
    g.set_ylabels("Entropy")
    g.fig.set_size_inches(fig_size[0],fig_size[0])
    g.tight_layout()
    g.add_legend()
    plt.savefig("violinplot_facetgrid.png")


def entropy_plot(entropy_report, type_report = 'summary', type_plot = 'histogram', fig_size = (40,40)):
    """
    Generate Statistical Plots on your entropy report

    Arguments:
    entropy_report (DataFrame Array): Takes a single dataframe as entropy report
    type_report (String): 
            summary   : Plot entropy on all target labels summary, 
            facetgrid : Plot entropy on facet of every kinds of target label
    type_report (String):
            histogram : Histogram plot
            boxplot: Boxplot
            violinplot: Violinplot
    Returns:
    dataframe: Entropy report all inputs

    Example:
    >>> dstools.entropy_plot(entropy_report, type_report = 'facetgrid', type_plot = 'violinplopt')
    """
    # ignore warnings generated by Seaborn
    warnings.filterwarnings("ignore")

    if type_report == 'summary':
      if type_plot == 'histogram':
        histogram_plot_summary(entropy_report)
      elif type_plot == 'boxplot':
        boxplot_summary(entropy_report)
      elif type_plot == 'violinplopt':
        violin_plot_summary(entropy_report)
      else:
        print("The following are the correct plot type")
        print(f"type_report (String):\n summary : Plot entropy on all target labels summary,\n facetgrid : Plot entropy on facet of every kinds of target label\n type_report (String):\nhistogram : Histogram plot\n boxplot: Boxplot\nviolinplot: Violinplot")
    elif type_report == 'facetgrid':
      if type_plot == 'histogram':
        historgram_plot_facetgrid(entropy_report, fig_size)
      elif type_plot == 'boxplot':
        boxplot_facetgrid(entropy_report, fig_size)
      elif type_plot == 'violinplot':
        violinplot_facetgrid(entropy_report, fig_size)
      else:
        print("The following are the correct plot type")
        print(f"type_report (String):\n summary : Plot entropy on all target labels summary,\n facetgrid : Plot entropy on facet of every kinds of target label\n type_report (String):\nhistogram : Histogram plot\n boxplot: Boxplot\nviolinplot: Violinplot")
  

