{"version":3,"sources":["STTable.tsx","index.tsx"],"names":["isDate","dateStr","isNaN","Date","getDate","isFloat","floatStr","parseFloat","STTable","props","searchInput","getColumnSearchProps","dataIndex","linkable","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","style","padding","ref","node","placeholder","value","onChange","e","target","onPressEnter","handleSearch","marginBottom","display","type","onClick","icon","SearchOutlined","size","width","handleReset","closeDropdown","setState","searchText","searchedColumn","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownOpenChange","visible","setTimeout","select","render","text","x","state","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","placement","title","href","handleAction","bind","onPagerChange","page","pageSize","event","id","uuidv4","payload","action","records","column","Streamlit","setComponentValue","onSelectChange","selectedRowKeys","data","args","columns","row_key","actions_in_row","tags_columns","batch_actions","linkable_columns","sorter_columns","searchable_columns","expand_column","default_expand_all_rows","iframes_in_row","iframe_height","rows_per_page","show_pager","expand_json","dynamic_pager_page","enable_dynamic_pager","dynamic_pager_total","actions","that","rowSelection","selections","Table","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","map","ellipsis","showTitle","key","concat","action_width","i","Object","assign","defaultSortOrder","sorter","a","b","aa","bb","getTime","Number","localeCompare","tags","index","split","tag","compact_layout","color_backgroud","pager","showQuickJumper","total","current","theme","token","components","colorBgContainer","algorithm","compactAlgorithm","defaultAlgorithm","pagination","rowKey","dataSource","scroll","sticky","expandable","defaultExpandAllRows","onExpand","expanded","ajustHeight","expandedRowRender","indent","root","document","getElementById","clientWidth","margin","link","marginRight","frameBorder","src","length","height","summary","pageData","Summary","fixed","Row","Cell","colSpan","filter","item","okText","cancelText","this","stopPropagation","setFrameHeight","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.e72d8e80.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport {\n  Table,\n  Input,\n  Button,\n  Tag,\n  Space,\n  InputRef,\n  Tooltip,\n  Popconfirm,\n  ConfigProvider,\n  theme,\n} from \"antd\"\nimport { TableToken } from \"antd/lib/table/style\"\nimport { ColumnType } from \"antd/lib/table\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport Highlighter from \"react-highlight-words\"\nimport { SearchOutlined } from \"@ant-design/icons\"\nimport JSONPretty from \"react-json-pretty\"\n\ninterface IExtra {\n  action: string\n}\n\ninterface EventPayload {\n  action: string\n  records?: any[]\n  column?: string\n}\n\ninterface Event {\n  id: string\n  payload: EventPayload\n}\n\ninterface State {\n  //pagination?: any\n  filters?: any\n  sorter?: any\n  searchText?: string\n  searchedColumn?: string\n  selectedRowKeys?: React.Key[]\n}\n\ninterface FilterConfirmProps {\n  closeDropdown: boolean\n}\n\ninterface ColumnFilterItem {\n  text: React.ReactNode\n  value: string | number | boolean\n  children?: ColumnFilterItem[]\n}\n\ninterface FilterDropdownProps {\n  prefixCls: string\n  setSelectedKeys: (selectedKeys: React.Key[]) => void\n  selectedKeys: React.Key[]\n  confirm: (param?: FilterConfirmProps) => void\n  clearFilters: () => void\n  filters?: ColumnFilterItem[]\n  visible: boolean\n}\n\nfunction isDate(dateStr: string) {\n  return !isNaN(new Date(dateStr).getDate())\n}\n\nfunction isFloat(floatStr: string) {\n  return !isNaN(parseFloat(floatStr))\n}\n\nclass STTable extends StreamlitComponentBase<State> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      searchedColumn: \"\",\n    }\n  }\n\n  searchInput?: InputRef\n\n  getColumnSearchProps = (dataIndex: string, linkable: boolean) => ({\n    filterDropdown: ({\n      setSelectedKeys,\n      selectedKeys,\n      confirm,\n      clearFilters,\n    }: FilterDropdownProps) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={(node: InputRef) => {\n            this.searchInput = node\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={(e) =>\n            setSelectedKeys(e.target.value ? [e.target.value] : [])\n          }\n          onPressEnter={() =>\n            this.handleSearch(selectedKeys, confirm, dataIndex)\n          }\n          style={{ marginBottom: 8, display: \"block\" }}\n        />\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n          <Button\n            type=\"link\"\n            size=\"small\"\n            onClick={() => {\n              confirm({ closeDropdown: false })\n              this.setState({\n                searchText: selectedKeys[0] as string,\n                searchedColumn: dataIndex,\n              })\n            }}\n          >\n            Filter\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined style={{ color: filtered ? \"#1890ff\" : undefined }} />\n    ),\n    onFilter: (value: string, record: any) =>\n      record[dataIndex]\n        ? record[dataIndex]\n            .toString()\n            .toLowerCase()\n            .includes(value.toLowerCase())\n        : \"\",\n    onFilterDropdownOpenChange: (visible: boolean) => {\n      if (visible) {\n        setTimeout(() => this.searchInput && this.searchInput.select(), 100)\n      }\n    },\n    render: (text: string, record: any) => {\n      let x =\n        this.state.searchedColumn && this.state.searchedColumn === dataIndex ? (\n          <Highlighter\n            highlightStyle={{ backgroundColor: \"#ffc069\", padding: 0 }}\n            searchWords={[this.state.searchText]}\n            autoEscape\n            textToHighlight={text ? text.toString() : \"\"}\n          />\n        ) : (\n          <Tooltip placement=\"topLeft\" title={text}>\n            {text}\n          </Tooltip>\n        )\n      if (linkable) {\n        // eslint-disable-next-line\n        x = (\n          <a\n            href=\"#\"\n            onClick={this.handleAction(\"ClickLink\", [record], dataIndex).bind(\n              this\n            )}\n          >\n            {x}\n          </a>\n        )\n      }\n      return x\n    },\n  })\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: () => void,\n    dataIndex: string\n  ) => {\n    confirm()\n    this.setState({\n      searchText: selectedKeys[0] as string,\n      searchedColumn: dataIndex,\n    })\n  }\n\n  handleReset = (clearFilters: () => void) => {\n    clearFilters()\n    this.setState({ searchText: \"\" })\n  }\n\n  private handleAction(action: string, records: object[], column?: string) {\n    const that = this\n    return function (e: React.MouseEvent<HTMLElement>) {\n      e.stopPropagation()\n      const event: Event = {\n        id: uuidv4(),\n        payload: {\n          action,\n          records,\n          column,\n        },\n      }\n      Streamlit.setComponentValue(event)\n      that.setState({ selectedRowKeys: [] })\n    }\n  }\n\n  ajustHeight() {\n    setTimeout(() => {\n      Streamlit.setFrameHeight()\n    }, 300)\n  }\n\n  componentDidMount() {\n    this.ajustHeight()\n  }\n\n  componentDidUpdate() {\n    this.ajustHeight()\n  }\n\n  onPagerChange = (page: Number, pageSize: Number) => {\n    const event: Event = {\n      id: uuidv4(),\n      payload: {\n        action: \"pager\",\n        records: [{\"page\": page, \"page_size\": pageSize}],\n        column: undefined,\n      },\n    }\n    Streamlit.setComponentValue(event)\n  }\n\n  onSelectChange = (selectedRowKeys: React.Key[]) => {\n    this.setState({ selectedRowKeys })\n  }\n\n  public render = (): ReactNode => {\n    const data = this.props.args.data\n    let columns: ColumnType<object>[] = this.props.args.columns\n    const {\n      row_key,\n      actions_in_row,\n      tags_columns,\n      batch_actions,\n      linkable_columns,\n      sorter_columns,\n      searchable_columns,\n      expand_column,\n      default_expand_all_rows,\n      iframes_in_row,\n      iframe_height,\n      rows_per_page,\n      show_pager,\n      expand_json,\n      dynamic_pager_page,\n      enable_dynamic_pager,\n      dynamic_pager_total,\n    } = this.props.args\n    let actions = this.props.args.actions\n    const that = this\n\n    const { selectedRowKeys } = this.state\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.onSelectChange,\n      selections: [\n        Table.SELECTION_ALL,\n        Table.SELECTION_INVERT,\n        Table.SELECTION_NONE,\n      ],\n    }\n\n    // eslint-disable-next-line\n    columns.map((column: ColumnType<object>) => {\n      column.ellipsis = {\n        showTitle: false,\n      }\n      if (linkable_columns.includes(column.key as string)) {\n        column.render = (text: string, record: any) => {\n          // eslint-disable-next-line\n          return (\n            <a\n              href=\"#\"\n              onClick={that\n                .handleAction(\"ClickLink\", [record], column.key?.toString())\n                .bind(that)}\n            >\n              {text}\n            </a>\n          )\n        }\n      }\n    })\n    if (actions || actions_in_row) {\n      columns = columns.concat({\n        title: \"Action\",\n        key: \"operation\",\n        width: this.props.args.action_width,\n        render: (text, record: any) => {\n          if (record[\"_antd_table_actions\"]) {\n            actions = record[\"_antd_table_actions\"]\n          }\n          return (\n            <Space size=\"middle\">\n              {actions.map(function (action: string, i: Number) {\n                // eslint-disable-next-line\n                return (\n                  <a\n                    href=\"#\"\n                    key={action}\n                    onClick={that.handleAction(action, [record]).bind(that)}\n                  >\n                    {action}\n                  </a>\n                )\n              })}\n            </Space>\n          )\n        },\n      })\n    }\n    if (searchable_columns) {\n      // eslint-disable-next-line\n      columns.map((column: ColumnType<object>) => {\n        if ((searchable_columns as string[]).includes(column.key as string)) {\n          Object.assign(\n            column,\n            this.getColumnSearchProps(\n              column.dataIndex as string,\n              linkable_columns.includes(column.key as string)\n            )\n          )\n        }\n      })\n    }\n    if (sorter_columns) {\n      // eslint-disable-next-line\n      columns.map((column: ColumnType<object>) => {\n        if ((sorter_columns as string[]).includes(column.key as string)) {\n          column.defaultSortOrder = \"descend\"\n          if (!column.sorter) {\n            column.sorter = (a: any, b: any) => {\n              const aa = a[column.key as string]\n              const bb = b[column.key as string]\n              if (typeof aa === \"number\") {\n                return aa - bb\n              } else if (isDate(aa) && isDate(bb)) {\n                return new Date(aa).getTime() - new Date(bb).getTime()\n              } else if (isFloat(aa) && isFloat(bb)) {\n                return Number.parseFloat(aa) - Number.parseFloat(bb)\n              }\n              return aa.localeCompare(bb)\n            }\n          }\n        }\n      })\n    }\n    if (tags_columns) {\n      // eslint-disable-next-line\n      columns.map((column: ColumnType<object>) => {\n        if ((tags_columns as string[]).includes(column.key as string)) {\n          column.render = (tags: string, record: any, index: Number) => {\n            return (\n              <>\n                {tags.split(\",\").map((tag) => (\n                  <Tag color=\"blue\" key={\"tags/\" + tag + \"/\" + index}>\n                    {tag}\n                  </Tag>\n                ))}\n              </>\n            )\n          }\n        }\n      })\n    }\n    const compact_layout = this.props.args.compact_layout\n    const color_backgroud = this.props.args.color_backgroud\n    let pager : any = false\n    if (show_pager) {\n      pager = { pageSize: rows_per_page, showQuickJumper: true }\n      if (enable_dynamic_pager){\n        pager.total = dynamic_pager_total\n        pager.current = dynamic_pager_page\n        pager.onChange = this.onPagerChange.bind(this)\n      }\n    }\n    return (\n      <ConfigProvider\n        theme={{\n          token: {},\n          components: {\n            Table: {\n              colorBgContainer: color_backgroud,\n            } as TableToken,\n          },\n          algorithm: compact_layout\n            ? theme.compactAlgorithm\n            : theme.defaultAlgorithm,\n        }}\n      >\n        <Table\n          pagination={pager}\n          rowSelection={batch_actions ? rowSelection : undefined}\n          rowKey={row_key}\n          size={\"large\"}\n          columns={columns}\n          dataSource={data}\n          scroll={{ x: true }}\n          sticky\n          expandable={\n            expand_column || iframes_in_row\n              ? {\n                  defaultExpandAllRows: default_expand_all_rows,\n                  onExpand: (expanded: boolean, record: any) => {\n                    this.ajustHeight()\n                  },\n                  expandedRowRender: function (\n                    record: any,\n                    index,\n                    indent,\n                    expanded\n                  ) {\n                    const root = document.getElementById(\"root\")\n                    let width = 0\n                    if (root) {\n                      width = root.clientWidth\n                    }\n                    return (\n                      <>\n                        {expand_column &&\n                          (expand_json ? (\n                            <JSONPretty\n                              id=\"json-pretty\"\n                              data={record[expand_column as string]}\n                            ></JSONPretty>\n                          ) : (\n                            <p style={{ margin: 0 }}>\n                              {record[expand_column as string]}\n                            </p>\n                          ))}\n                        {record[\"_antd_table_iframes\"] &&\n                          record[\"_antd_table_iframes\"].map(\n                            (link: string, index: number) => {\n                              // eslint-disable-next-line\n                              return (\n                                <iframe\n                                  style={{ marginRight: \"3px\" }}\n                                  frameBorder=\"0\"\n                                  key={index.toString()}\n                                  src={link}\n                                  width={\n                                    width /\n                                      record[\"_antd_table_iframes\"].length -\n                                    12\n                                  }\n                                  height={iframe_height}\n                                >\n                                  Browser not compatible.\n                                </iframe>\n                              )\n                            }\n                          )}\n                      </>\n                    )\n                  },\n                }\n              : undefined\n          }\n          summary={(pageData) => {\n            return batch_actions ? (\n              <Table.Summary fixed=\"bottom\">\n                <Table.Summary.Row>\n                  <Table.Summary.Cell index={0} colSpan={columns.length}>\n                    <Space size=\"middle\">\n                      {batch_actions.map(function (action: string, i: Number) {\n                        const selectedKeys: string[] = (\n                          that.state.selectedRowKeys || []\n                        ).map((key: React.Key) => key.toString())\n                        const records: object[] = (data as object[]).filter(\n                          (item: any) =>\n                            selectedKeys.includes(item[row_key].toString())\n                        )\n                        return (\n                          <Popconfirm\n                            title=\"Are you sure to delete this task?\"\n                            //onConfirm={confirm}\n                            okText=\"Yes\"\n                            cancelText=\"No\"\n                            key={`${i}`}\n                          >\n                            <Button\n                              key={`${i}`}\n                              onClick={that\n                                .handleAction(action, records)\n                                .bind(that)}\n                            >\n                              {action}\n                            </Button>\n                          </Popconfirm>\n                        )\n                      })}\n                    </Space>\n                  </Table.Summary.Cell>\n                </Table.Summary.Row>\n              </Table.Summary>\n            ) : (\n              <></>\n            )\n          }}\n        />\n      </ConfigProvider>\n    )\n  }\n}\n\nexport default withStreamlitConnection(STTable)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport STTable from \"./STTable\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <STTable />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}