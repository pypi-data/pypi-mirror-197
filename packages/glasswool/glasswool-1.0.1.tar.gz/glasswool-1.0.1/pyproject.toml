[tool.poetry]
name = "glasswool"
version = "1.0.1"
description = "Outlier filter"
authors = ["Your Name <you@example.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "~3.10"
conda-lock = "^1.4.0"
numba = "^0.56.4"
pandas = "^1.5.3"
pytest = "^7.2.2"
mkdocs = "^1.4.2"
jupyterlab = "^3.6.1"
matplotlib = "^3.7.1"

[tool.poetry.group.dev.dependencies]
black = "^23.1.0"
ruff = "^0.0.254"
pre-commit = "^3.1.1"
mypy = "^1.1.1"

[tool.poetry.group.docs.dependencies]
mkdocs-material = ">=8.0.0, <=9.0.0"
mkdocs-autorefs = "^0.4.1"
mkdocs-macros-plugin = "^0.7.0"
mkdocs-jupyter = "^0.22.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-git-revision-date-localized-plugin = "^1.2.0"
mkdocstrings = "^0.20.0"
mkdocstrings-python = "^0.8.3"


[tool.poetry.group.test.dependencies]
pytest-cov = "^4.0.0"

[tool.ruff]
line-length = 88
select = [
  "B", # flake8-bugbear
  "BLE", # flake8-blind-except
  "C4", # comprehensions
  "D", # pydocstyle
  "E", # pycodestyle
  "F", # pyflakes
  "I", # isort
  "ICN", # flake8-import-conventions
  "ISC", # flake8-implicit-str-concat
  "PGH", # pygrep-hooks
  "PLC", # pylint
  "PLE", # pylint
  "PLR", # pylint import style
  "PLW", # pylint
  "RET", # flake8-return
  "RUF", # ruff-specific rules
  "SIM", # flake8-simplify
  "T10", # flake8-debugger
  "T20", # flake8-print
  "TID", # flake8-tidy-imports
  "UP", # pyupgrade
  "W", # pycodestyle
  "YTT", # flake8-2020

]
respect-gitignore = true
ignore = [
  "B904", # raise from e or raise from None in exception handlers
  "C408", # dict(...) as literal
  "D100", # public module
  "D101", # public class
  "D102", # public method
  "D103", # public function
  "D104", # public package
  "D105", # magic methods
  "D106", # nested class
  "D107", # init
  "D202", # blank lines after function docstring
  "D203", # blank line before class docstring
  "D213", # Multi-line docstring summary should start at the second line
  "D401", # Imperative mood
  "D402", # First line should not be the function's signature
  "E501",
  "E731",
  "PGH003",
  "PLR0911", # too many return statements
  "PLR0912", # too many branches
  "PLR0913", # too many arguments
  "PLR0915", # too many statements
  "PLR2004", # forces everything to be a constant
  "PLW2901", # overwriting loop variable
  "RET504",
  "RET505",
  "RET506",
  "RET507",
  "RET508",
  "RUF005", # splat instead of concat
  "SIM102", # nested ifs
  "SIM108", # convert everything to ternary operator
  "SIM114", # combine `if` branches using logical `or` operator
  "SIM116", # dictionary instead of `if` statements
  "SIM117", # nested withs
  "SIM118", # remove .keys() calls from dictionaries
  "SIM300", # yoda conditions
  "UP037", # remove quotes from type annotation

]
exclude = ["*_py310.py", "glasswool/tests/*/snapshots/*"]
target-version = "py38"
# none of these codes will be automatically fixed by ruff
unfixable = [
  "T201", # print statements
  "F401", # unused imports
  "RUF100", # unused noqa comments
  "F841", # unused variables

]

[tool.ruff.per-file-ignores]
"*test*.py" = [
  "D", # ignore all docstring lints in tests

]

[tool.black]
line_length = 88
skip_string_normalization = true
extend_exclude = '\.ipynb|\.direnv|result(-\d+)|_py310\.py|decompiled\.py'

[tool.conda-lock]
channels = ["conda-forge"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
