# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TeamMemberArgs', 'TeamMember']

@pulumi.input_type
class TeamMemberArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 role: pulumi.Input[str]):
        """
        The set of arguments for constructing a TeamMember resource.
        :param pulumi.Input[str] email: User email to invite. Adding an team member will send the user an invitation. Deleting a team member will either delete the invitation or the user depending on whether the user has accepted the invitation.
        :param pulumi.Input[str] role: User role. Valid values include [MEMBER, ADMIN].
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        User email to invite. Adding an team member will send the user an invitation. Deleting a team member will either delete the invitation or the user depending on whether the user has accepted the invitation.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        User role. Valid values include [MEMBER, ADMIN].
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class _TeamMemberState:
    def __init__(__self__, *,
                 accepted_invitation: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TeamMember resources.
        :param pulumi.Input[str] accepted_invitation: Whether the user has accepted the invitation to the team.
        :param pulumi.Input[str] email: User email to invite. Adding an team member will send the user an invitation. Deleting a team member will either delete the invitation or the user depending on whether the user has accepted the invitation.
        :param pulumi.Input[str] role: User role. Valid values include [MEMBER, ADMIN].
        """
        if accepted_invitation is not None:
            pulumi.set(__self__, "accepted_invitation", accepted_invitation)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="acceptedInvitation")
    def accepted_invitation(self) -> Optional[pulumi.Input[str]]:
        """
        Whether the user has accepted the invitation to the team.
        """
        return pulumi.get(self, "accepted_invitation")

    @accepted_invitation.setter
    def accepted_invitation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accepted_invitation", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        User email to invite. Adding an team member will send the user an invitation. Deleting a team member will either delete the invitation or the user depending on whether the user has accepted the invitation.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        User role. Valid values include [MEMBER, ADMIN].
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


class TeamMember(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages team membership and invitations.

        ## Example Usage

        ```python
        import pulumi
        import symbiosis_pulumi as symbiosis

        example = symbiosis.TeamMember("example",
            email="my-user@email.com",
            role="MEMBER")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email: User email to invite. Adding an team member will send the user an invitation. Deleting a team member will either delete the invitation or the user depending on whether the user has accepted the invitation.
        :param pulumi.Input[str] role: User role. Valid values include [MEMBER, ADMIN].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TeamMemberArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages team membership and invitations.

        ## Example Usage

        ```python
        import pulumi
        import symbiosis_pulumi as symbiosis

        example = symbiosis.TeamMember("example",
            email="my-user@email.com",
            role="MEMBER")
        ```

        :param str resource_name: The name of the resource.
        :param TeamMemberArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TeamMemberArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TeamMemberArgs.__new__(TeamMemberArgs)

            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            if role is None and not opts.urn:
                raise TypeError("Missing required property 'role'")
            __props__.__dict__["role"] = role
            __props__.__dict__["accepted_invitation"] = None
        super(TeamMember, __self__).__init__(
            'symbiosis:index/teamMember:TeamMember',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accepted_invitation: Optional[pulumi.Input[str]] = None,
            email: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None) -> 'TeamMember':
        """
        Get an existing TeamMember resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accepted_invitation: Whether the user has accepted the invitation to the team.
        :param pulumi.Input[str] email: User email to invite. Adding an team member will send the user an invitation. Deleting a team member will either delete the invitation or the user depending on whether the user has accepted the invitation.
        :param pulumi.Input[str] role: User role. Valid values include [MEMBER, ADMIN].
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TeamMemberState.__new__(_TeamMemberState)

        __props__.__dict__["accepted_invitation"] = accepted_invitation
        __props__.__dict__["email"] = email
        __props__.__dict__["role"] = role
        return TeamMember(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acceptedInvitation")
    def accepted_invitation(self) -> pulumi.Output[str]:
        """
        Whether the user has accepted the invitation to the team.
        """
        return pulumi.get(self, "accepted_invitation")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        User email to invite. Adding an team member will send the user an invitation. Deleting a team member will either delete the invitation or the user depending on whether the user has accepted the invitation.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        User role. Valid values include [MEMBER, ADMIN].
        """
        return pulumi.get(self, "role")

