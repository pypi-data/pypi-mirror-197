from rstyleslice import rslice


a = rslice('123456789')
c = rslice(list('123456789'))
d = rslice(tuple('123456789'))
e = rslice(range(len('123456789')))

# 索引等值
s = [int(x) for x in '123456789']
for i in s:
    assert a[i] == c[i] == d[i]
    assert a[-i] == c[-i] == d[-i]

# 切片等值
s = list(range(-15, 16)) + [None]
dt = list(range(1, 16)) + [None]
s.remove(0)
for start in s:
    for stop in s:
        for step in dt:
            key = slice(start, stop, step)
            assert a[key] == ''.join(c[key]) == ''.join(d[key])
            assert len(a[key]) == len(c[key]) == len(d[key])

# 正索引取值
assert a[1] == '1'
assert a[2] == '2'
assert a[3] == '3'
assert a[4] == '4'
assert a[5] == '5'
assert a[6] == '6'
assert a[7] == '7'
assert a[8] == '8'
assert a[9] == '9'

# 负索引取值
assert a[-1] == '9'
assert a[-2] == '8'
assert a[-3] == '7'
assert a[-4] == '6'
assert a[-5] == '5'
assert a[-6] == '4'
assert a[-7] == '3'
assert a[-8] == '2'
assert a[-9] == '1'


# 正向切片
assert (a[:] == a[1:9] == a[1:-1] == a[-9:-1] == a[-9:9]
             == a[:9] == a[:-1] == a[1:] == a[-9:]
             == a[1:15] == a[-9:15] == a[:15]
             == '123456789')
assert a[2:8] == a[2:-2] == a[-8:-2] == a[-8:8] == '2345678'
assert a[3:7] == a[3:-3] == a[-7:-3] == a[-7:7] == '34567'
assert a[4:6] == a[4:-4] == a[-6:-4] == a[-6:6] == '456'
assert a[5:5] == a[5:-5] == a[-5:-5] == a[-5:5] == '5'

# 逆向切片
assert (a[9:1] == a[-1:1] == a[-1:-9] == a[9:-9]
             == a[15:1] == a[15:-9]
             == '987654321')
assert a[8:2] == a[-2:2] == a[-2:-8] == a[8:-8] == '8765432'
assert a[7:3] == a[-3:3] == a[-3:-7] == a[7:-7] == '76543'
assert a[6:4] == a[-4:4] == a[-4:-6] == a[6:-6] == '654'

# 正向切片 + 跳跃
## 2步
assert (a[::2] == a[1:9:2] == a[1:-1:2] == a[-9:-1:2] == a[-9:9:2]
             == a[:9:2] == a[:-1:2] == a[1::2] == a[-9::2]
             == a[1:15:2] == a[-9:15:2] == a[:15:2]
             == '13579')
assert a[2:8:2] == a[2:-2:2] == a[-8:-2:2] == a[-8:8:2] == '2468'
assert a[3:7:2] == a[3:-3:2] == a[-7:-3:2] == a[-7:7:2] == '357'
assert a[4:6:2] == a[4:-4:2] == a[-6:-4:2] == a[-6:6:2] == '46'
assert a[5:5:2] == a[5:-5:2] == a[-5:-5:2] == a[-5:5:2] == '5'
## 3步
assert (a[::3] == a[1:9:3] == a[1:-1:3] == a[-9:-1:3] == a[-9:9:3]
             == a[:9:3] == a[:-1:3] == a[1::3] == a[-9::3]
             == a[1:15:3] == a[-9:15:3] == a[:15:3]
             == '147')
assert a[2:8:3] == a[2:-2:3] == a[-8:-2:3] == a[-8:8:3] == '258'
assert a[3:7:3] == a[3:-3:3] == a[-7:-3:3] == a[-7:7:3] == '36'
assert a[4:6:3] == a[4:-4:3] == a[-6:-4:3] == a[-6:6:3] == '4'
assert a[5:5:3] == a[5:-5:3] == a[-5:-5:3] == a[-5:5:3] == '5'
## 4步
assert (a[::4] == a[1:9:4] == a[1:-1:4] == a[-9:-1:4] == a[-9:9:4]
             == a[:9:4] == a[:-1:4] == a[1::4] == a[-9::4]
             == a[1:15:4] == a[-9:15:4] == a[:15:4]
             == '159')
assert a[2:8:4] == a[2:-2:4] == a[-8:-2:4] == a[-8:8:4] == '26'
assert a[3:7:4] == a[3:-3:4] == a[-7:-3:4] == a[-7:7:4] == '37'
assert a[4:6:4] == a[4:-4:4] == a[-6:-4:4] == a[-6:6:4] == '4'
assert a[5:5:4] == a[5:-5:4] == a[-5:-5:4] == a[-5:5:4] == '5'

# 逆向切片 + 跳跃
## 2步
assert (a[9:1:2] == a[-1:1:2] == a[-1:-9:2] == a[9:-9:2]
             == a[15:1:2] == a[15:-9:2]
             == '97531')
assert a[8:2:2] == a[-2:2:2] == a[-2:-8:2] == a[8:-8:2] == '8642'
assert a[7:3:2] == a[-3:3:2] == a[-3:-7:2] == a[7:-7:2] == '753'
assert a[6:4:2] == a[-4:4:2] == a[-4:-6:2] == a[6:-6:2] == '64'
## 3步骤
assert (a[9:1:3] == a[-1:1:3] == a[-1:-9:3] == a[9:-9:3]
             == a[15:1:3] == a[15:-9:3]
             == '963')
assert a[8:2:3] == a[-2:2:3] == a[-2:-8:3] == a[8:-8:3] == '852'
assert a[7:3:3] == a[-3:3:3] == a[-3:-7:3] == a[7:-7:3] == '74'
assert a[6:4:3] == a[-4:4:3] == a[-4:-6:3] == a[6:-6:3] == '6'

# 赋值

c = rslice([1, 2, 3, 4, 5, 6, 7, 8, 9])
c[1] = 'a'
assert c.core == ['a', 2, 3, 4, 5, 6, 7, 8, 9]
c[9] = 'b'
assert c.core == ['a', 2, 3, 4, 5, 6, 7, 8, 'b']
c[-1] = 'e'
assert c.core == ['a', 2, 3, 4, 5, 6, 7, 8, 'e']
c[-9] = 'e'
assert c.core == ['e', 2, 3, 4, 5, 6, 7, 8, 'e']
c[4:6] = ['44', '55']
assert c.core == ['e', 2, 3, '44', '55', 7, 8, 'e']
c[4:6] = []
assert c.core == ['e', 2, 3, 8, 'e']
c[4:] = [1, 2, 3, 4, 5]
assert c.core == ['e', 2, 3, 1, 2, 3, 4, 5]
c[4:100] = ['1', 2, 3, 4, 5]
assert c.core == ['e', 2, 3, '1', 2, 3, 4, 5]
c[4:] = []
assert c.core == ['e', 2, 3]
c[:] = [1, 2, 3, 4, 5, 6, 7, 8, 9]
assert c.core == [1, 2, 3, 4, 5, 6, 7, 8, 9]
c[-4:7] = ['44', '55']
assert c.core == [1, 2, 3, 4, 5, '44', '55', 8, 9]
c[-4:] = ['44', '55']
assert c.core == [1, 2, 3, 4, 5, '44', '55']
c[-1:] = [7, 8, 9]
assert c.core == [1, 2, 3, 4, 5, '44', 7, 8, 9]
c[9:] = [7, 8, 9]
assert c.core == [1, 2, 3, 4, 5, '44', 7, 8, 7, 8, 9]
c[-2:] = [7, 8, 9]
assert c.core == [1, 2, 3, 4, 5, '44', 7, 8, 7, 7, 8, 9]
c[1:2] = [9, 8, 7]
assert c.core == [9, 8, 7, 3, 4, 5, '44', 7, 8, 7, 7, 8, 9]
c[1:] = ['9', 8, '7']
assert c.core == ['9', 8, '7']
c[:3] = ['32', 32, '232']
assert c.core == ['32', 32, '232']
c[4:-3] = ['p', 3552, '2p32']
assert c.core == ['p', 3552, '2p32']
c[:-3] = ['qp', 35452, '2pw32']
assert c.core == ['qp', 35452, '2pw32', 3552, '2p32']
c[100:99] = ['q-p', 3547752, '2pw3-2']
assert c.core == ['qp', 35452, '2pw32', 3552, '2p32', 'q-p', 3547752, '2pw3-2']

# 左侧插入
c[:] = [15, 16, 17, 18]
assert c.core == [15, 16, 17, 18]
c[:-100] = [14]
assert c.core == [14, 15, 16, 17, 18]
c[:-5] = ['14']
assert c.core == ['14', 15, 16, 17, 18]
c[:-6] = [13]
assert c.core == [13, '14', 15, 16, 17, 18]
c[-10:-10] = [12]
assert c.core == [12, 13, '14', 15, 16, 17, 18]

# 右侧插入

c[7:] = ['18']
assert c.core == [12, 13, '14', 15, 16, 17, '18']
c[8:] = [19, 20]
assert c.core == [12, 13, '14', 15, 16, 17, '18', 19, 20]

print('测试通过')