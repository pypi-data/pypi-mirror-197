# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['increase',
 'increase._utils',
 'increase.resources',
 'increase.resources.entities',
 'increase.resources.simulations',
 'increase.types',
 'increase.types.entities',
 'increase.types.shared',
 'increase.types.shared_params',
 'increase.types.simulations']

package_data = \
{'': ['*']}

install_requires = \
['anyio>=3.5.0',
 'distro>=1.7.0',
 'httpx>=0.23.0',
 'pydantic>=1.9.0',
 'typing-extensions>=4.1.1']

setup_kwargs = {
    'name': 'increase',
    'version': '0.4.0',
    'description': 'Client library for the increase API',
    'long_description': '# Increase Python API Library\n\n[![PyPI version](https://img.shields.io/pypi/v/increase.svg)](https://pypi.org/project/increase/)\n\nThe Increase Python library provides convenient access to the Increase REST API from any Python 3.7+\napplication. It includes type definitions for all request params and response fields,\nand offers both synchronous and asynchronous clients powered by [httpx](https://github.com/encode/httpx).\n\n## Documentation\n\nThe API documentation can be found [here](https://increase.com/documentation).\n\n## Installation\n\n```sh\npip install increase\n```\n\n## Usage\n\n```python\nfrom increase import Increase\n\nincrease = Increase(\n    # defaults to os.environ.get("INCREASE_API_KEY")\n    api_key="my api key",\n    # defaults to "production".\n    environment="sandbox",\n)\n\naccount = increase.accounts.create(\n    name="My First Increase Account",\n)\nprint(account.id)\n```\n\nWhile you can provide an `api_key` keyword argument, we recommend using [python-dotenv](https://pypi.org/project/python-dotenv/)\nand adding `INCREASE_API_KEY="my api key"` to your `.env` file so that your API Key is not stored in source control.\n\n## Async Usage\n\nSimply import `AsyncIncrease` instead of `Increase` and use `await` with each API call:\n\n```python\nfrom increase import AsyncIncrease\n\nincrease = AsyncIncrease(\n    # defaults to os.environ.get("INCREASE_API_KEY")\n    api_key="my api key",\n    # defaults to "production".\n    environment="sandbox",\n)\n\n\nasync def main():\n    account = await increase.accounts.create(\n        name="My First Increase Account",\n    )\n    print(account.id)\n\n\nasyncio.run(main())\n```\n\nFunctionality between the synchronous and asynchronous clients is otherwise identical.\n\n## Using Types\n\nNested request parameters are [TypedDicts](https://docs.python.org/3/library/typing.html#typing.TypedDict), while responses are [Pydantic](https://pydantic-docs.helpmanual.io/) models. This helps provide autocomplete and documentation within your editor.\n\nIf you would like to see type errors in VS Code to help catch bugs earlier, set `python.analysis.typeCheckingMode` to `"basic"`.\n\n## Pagination\n\nList methods in the Increase API are paginated.\n\nThis library provides auto-paginating iterators with each list response, so you do not have to request successive pages manually:\n\n```python\nimport increase\n\nincrease = Increase()\n\nall_accounts = []\n# Automatically fetches more pages as needed.\nfor account in increase.accounts.list():\n    # Do something with account here\n    all_accounts.append(account)\nprint(all_accounts)\n```\n\nOr, asynchronously:\n\n```python\nimport asyncio\nimport increase\n\nincrease = AsyncIncrease()\n\n\nasync def main() -> None:\n    all_accounts = []\n    # Iterate through items across all pages, issuing requests as needed.\n    async for account in increase.accounts.list():\n        all_accounts.append(account)\n    print(all_accounts)\n\n\nasyncio.run(main())\n```\n\nAlternatively, you can use the `.has_next_page()`, `.next_page_info()`, or `.get_next_page()` methods for more granular control working with pages:\n\n```python\nfirst_page = await increase.accounts.list()\nif first_page.has_next_page():\n    print(f"will fetch next page using these details: {first_page.next_page_info()}")\n    next_page = await first_page.get_next_page()\n    print(f"number of items we just fetched: {len(next_page.data)}")\n\n# Remove `await` for non-async usage.\n```\n\nOr just work directly with the returned data:\n\n```python\nfirst_page = await increase.accounts.list()\n\nprint(f"next page cursor: {first_page.next_cursor}")  # => "next page cursor: ..."\nfor account in first_page.data:\n    print(account.balances)\n\n# Remove `await` for non-async usage.\n```\n\n## Nested params\n\nNested parameters are dictionaries, typed using `TypedDict`, for example:\n\n```py\nfrom increase import Increase\n\nincrease = Increase()\n\nincrease.accounts.create(\n    foo={\n        "bar": True\n    },\n)\n```\n\n## File Uploads\n\nRequest parameters that correspond to file uploads can be passed as `bytes` or a tuple of `(filename, contents, media type)`.\n\n```python\nfrom pathlib import Path\nfrom increase import Increase\n\nincrease = Increase()\n\ncontents = Path("my/file.txt").read_bytes()\nincrease.files.create(\n    file=contents,\n    purpose="other",\n)\n```\n\nThe async client uses the exact same interface. This example uses `aiofiles` to asynchronously read the file contents but you can use whatever method you would like.\n\n```python\nimport aiofiles\nfrom increase import Increase\n\nincrease = Increase()\n\nasync with aiofiles.open("pytest.ini", mode="rb") as f:\n    contents = await f.read()\n\nawait increase.files.create(\n    file=contents,\n    purpose="other",\n)\n```\n\n## Handling errors\n\nWhen the library is unable to connect to the API (e.g., due to network connection problems or a timeout), a subclass of `increase.APIConnectionError` is raised.\n\nWhen the API returns a non-success status code (i.e., 4xx or 5xx\nresponse), a subclass of `increase.APIStatusError` will be raised, containing `status_code` and `response` properties.\n\nAll errors inherit from `increase.APIError`.\n\n```python\nfrom increase import Increase\n\nincrease = Increase()\n\ntry:\n    increase.accounts.create(\n        naem="Oops",\n    )\nexcept increase.APIConnectionError as e:\n    print("The server could not be reached")\n    print(e.__cause__)  # an underlying Exception, likely raised within httpx.\nexcept increase.RateLimitError as e:\n    print("A 429 status code was received; we should back off a bit.")\nexcept increase.APIStatusError as e:\n    print("Another non-200-range status code was received")\n    print(e.status_code)\n    print(e.response)\n```\n\nError codes are as followed:\n\n| Status Code | Error Type                 |\n| ----------- | -------------------------- |\n| 400         | `BadRequestError`          |\n| 401         | `AuthenticationError`      |\n| 403         | `PermissionDeniedError`    |\n| 404         | `NotFoundError`            |\n| 422         | `UnprocessableEntityError` |\n| 429         | `RateLimitError`           |\n| >=500       | `InternalServerError`      |\n| N/A         | `APIConnectionError`       |\n\n### Retries\n\nCertain errors will be automatically retried 2 times by default, with a short exponential backoff.\nConnection errors (for example, due to a network connectivity problem), 409 Conflict, 429 Rate Limit,\nand >=500 Internal errors will all be retried by default.\n\nYou can use the `max_retries` option to configure or disable this:\n\n```python\nfrom increase import Increase\n\n# Configure the default for all requests:\nincrease = Increase(\n    # default is 2\n    max_retries=0,\n)\n\n# Or, configure per-request:\nincrease.with_options(max_retries=5).accounts.create(\n    name="Jack",\n)\n```\n\n### Timeouts\n\nRequests time out after 60 seconds by default. You can configure this with a `timeout` option,\nwhich accepts a float or an [`httpx.Timeout`](https://www.python-httpx.org/advanced/#fine-tuning-the-configuration):\n\n```python\nfrom increase import Increase\n\n# Configure the default for all requests:\nincrease = Increase(\n    # default is 60s\n    timeout=20.0,\n)\n\n# More granular control:\nincrease = Increase(\n    timeout=httpx.Timeout(60.0, read=5.0, write=10.0, connect=2.0),\n)\n\n# Override per-request:\nincrease.with_options(timeout=5 * 1000).accounts.list(\n    status="open",\n)\n```\n\nOn timeout, an `APITimeoutError` is thrown.\n\nNote that requests which time out will be [retried twice by default](#retries).\n\n## Advanced: Configuring custom URLs, proxies, and transports\n\nYou can configure the following keyword arguments when instantiating the client:\n\n```python\nimport httpx\nfrom increase import Increase\n\nincrease = Increase(\n    # Use a custom base URL\n    base_url="http://my.test.server.example.com:8083",\n    proxies="http://my.test.proxy.example.com",\n    transport=httpx.HTTPTransport(local_address="0.0.0.0"),\n)\n```\n\nSee the httpx documentation for information about the [`proxies`](https://www.python-httpx.org/advanced/#http-proxying) and [`transport`](https://www.python-httpx.org/advanced/#custom-transports) keyword arguments.\n\n## Status\n\nThis package is in beta. Its internals and interfaces are not stable and subject to change without a major semver bump;\nplease reach out if you rely on any undocumented behavior.\n\nWe are keen for your feedback; please email us at [dev-feedback@increase.com](mailto:dev-feedback@increase.com) or open an issue with questions,\nbugs, or suggestions.\n\n## Requirements\n\nPython 3.7 or higher.',
    'author': 'Increase',
    'author_email': 'dev-feedback@increase.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/increase/increase-python',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
