[tool.poetry]
name = "docker-minecraft"
version = "0.2.0"
description = "Make a Minecraft server in Docker, with one command."
authors = ["osfanbuff63 <osfanbuff63@osfanbuff63.tech>"]
readme = "README.md"
license = "GPL-3.0-or-later"
repository = "https://codeberg.org/osfanbuff63/docker-minecraft-cli"
documentation = "https://docker-minecraft.osfanbuff63.tech"
packages = [{include = "docker_minecraft", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.11, <4"
click = "^8.1.3"
docker = "^6.0.1"
requests = "^2.28.2"
tomlkit = "^0.11.6"

[tool.poetry.group.dev.dependencies]
black = "^23.1.0"
isort = "^5.12.0"
mypy = "^1.1.1"
pytest = "^7.2.2"
types-requests = "^2.28.11.15"
flake8 = "^6.0.0"
pylint = "^2.17.0"


[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^9.1.2"
mkdocstrings = "^0.20.0"
mkdocstrings-python = "^0.8.3"
pillow = "^9.4.0"
cairosvg = "^2.6.0"
mike = "^1.1.2"

[tool.poetry.scripts]
docker-minecraft = "docker_minecraft:docker_minecraft"

[tool.poetry_bumpversion.file."src/docker_minecraft/__init__.py"]

[tool.isort]
profile = "black"

[tool.pylint.main]

# Always return a 0 (non-error) status code, even if lint errors are found. This
# is primarily useful in continuous integration scripts.
exit-zero = true

# Files or directories to be skipped. They should be base names, not paths.
ignore = ["docker_minecraft.__main__"]

# Minimum Python version to use for version dependent checks. Will default to the
# version used to run pylint.
py-version = "3.10"

[tool.pylint.classes]
# Warn about protected attribute access inside special methods
# check-protected-access-in-special-methods =

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = ["__init__"]

[tool.pylint."messages control"]
disable = ["raw-checker-failed", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message", "useless-suppression", "deprecated-pragma", "use-symbolic-message-instead", "missing-module-docstring", "too-many-branches", "protected-access", "too-many-locals", "too-many-arguments", "global-variable-undefined", "missing-timeout", "redefined-outer-name", "too-many-statements", "redefined-builtin"]

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = [""]

[tool.pylint.format]

# Maximum number of characters on a single line.
# this is literally meant to disable this feature
max-line-length = 10000

# Maximum number of lines in a module.
max-module-lines = 1000

[tool.pylint.imports]

# Force import order to recognize a module as part of a third party library.
known-third-party = ["docker", "click"]

[tool.pylint.method_args]
# List of qualified names (i.e., library.method) which require a timeout
# parameter e.g. 'requests.api.get,requests.api.post'
timeout-methods = ["requests.api.delete", "requests.api.get", "requests.api.head", "requests.api.options", "requests.api.patch", "requests.api.post", "requests.api.put", "requests.api.request"]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "XXX", "TODO"]

# Activate the evaluation score.
score = false


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
